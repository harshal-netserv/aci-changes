from django.http import HttpResponseRedirect
from django.http import HttpResponse
from django.shortcuts import render
import time
import datetime
import json, ast
# import pandas as pd

import sys
import urllib
from mysite.models import combimatin_db, SwitchMACMigrationDB, ACIInterfaceStatusDB
from mysite.models import CronDB, ServiceRequestDB, UserSelectionDb, CustomerDB, LeafDB, StationDb
from mysite.models import ACI_EPG_Mapping, DeviceModel, SwitchMigrationDB, NetworkConnectionDB
import zipfile
import os
import requests

# ------------------------------------------##-----------------------------------------------------#
import sqlite3
import json
import math
import re
import collections

# -------------------------------------------###--------------------------------------------------#
sys.path.append('/home/ubuntu/prepro/mysite/mysite/')
from nlead_library.nlead_package import *
from nlead_library.newcom import *
from nlead_library.service_request import *
from nlead_library.ent_com import *
from nlead_library.data_analysis import *
from nlead_library.enterprise_firewalls import *
from nlead_library.implementation_functions import *
from nlead_library.servicerequest_inputs import *
# from nlead_library.green_service_inputs import *
from nlead_library.ansible_input import *
from nlead_library.green_field_campus_inputs import *
from nlead_library.Zscale_inputs import *
# from nlead_library.cucm_inputs import *
# from nlead_library.cucmFunctions import *
from nlead_library.aci_api_inputs import *
from nlead_library.aci_api_functions import *
from nlead_library.Zscale2_inputs import *
from nlead_library.msp_inputs import *
from nlead_library.application_inputs import *
from nlead_library.Mscale2_inputs import *
from nlead_library.mscale_inputs import *
from nlead_library.app_connectivity import *
from nlead_library.app_conn_set_inputs import *
from nlead_library.sd_wan_deployment_inputs import *
from nlead_library.hardware_refresh_inputs import *
from nlead_library.brownfield_campus_inputs import *
from nlead_library.cisco_ise_inputs import *
from nlead_library.network_assurance_inputs import *
from nlead_library.patching_matrix_functions import *
# from nlead_library.newcom import *
from nlead_library.service_now import *
# from draw_topology_class import GetTopology
import sqlite3
from django.contrib.staticfiles import views
from django.contrib import auth
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm
from django.utils.decorators import method_decorator
from django.core.context_processors import csrf

from django.core.mail import send_mail
from django.core.mail import EmailMultiAlternatives
from django.core.files import File
import tempfile
import shutil
from django.conf import settings
from mysite.fabric_config import *
from mysite.apply_functions import *
# from mysite.infoblox import *
########################################################
from django.http import JsonResponse
#####################################################################
# from mysite.fabric_fuctions import *
from nlead_library.nlead_package import search_last_user_input_value

glb_user_type = ''

global FILE_DIR
FILE_DIR = '/home/netserv/PycharmProjects/netserv/mysite/'


@login_required(login_url='/login/')
def user_input(request):
    print request.user
    group = ""
    if len(request.user.groups.all()) > 0:
        group = str(request.user.groups.all()[0])
    templateid = ""
    if request.GET.get('templateid') is not None:
        templateid = request.GET.get('templateid')
        print "tempid"
        print templateid
    # # group = ""
    if len(request.user.groups.all()) > 0:
        group = str(request.user.groups.all()[0])
    dept = getuserdept(request)
    return render(request, 'user_input.html', {'c1_val': [], 'c2_val': {}, 'c3_val': {},
                                               'c4_val': {}, 'c1s': "", 'c2s': "", 'c3s': "",
                                               'c4s': "", 'c5s': "", 'c6s': "",
                                               'label1': "", 'label2': "", 'label3': "",
                                               'label4': "", 'label5': 'Ticket ID',
                                               'label6': 'Sub Task ID(s) (Optional)',
                                               'templateid': templateid, 'group': group, 'dept': dept})


def getuserdept(request):
    '''
        Description :
            This function is used for selection of user profile.
		Inputs :
			request
		Output :
			Return department of user.



    :param request:
    :return:
    '''
    current_user = request.user
    uid = current_user.id
    from mysite.models import UserProfile
    q1 = UserProfile.objects.values_list('department').filter(user=uid).last()
    if q1:
        return q1[0]
    else:
        return ""


def getusersubdept(request):
    current_user = request.user
    uid = current_user.id
    from mysite.models import UserProfile
    q1 = UserProfile.objects.values_list('subdepartment').filter(user=uid).last()
    if q1:
        return q1[0]
    else:
        return ""


@login_required(login_url='/login/')
def user_input_gen(request):
    # Get option selected , taskid & subid here either through session or through function & then change further logic
    current_user = request.user
    from mysite.models import UserSelectionDb
    label1 = 'Device-OS or Network'
    label2 = 'Platform'
    label3 = 'Technology'
    label4 = 'Configuration and Troubleshooting'
    if request.session.has_key("taskid"):
        c5sel = request.session['taskid']
        c6sel = request.session['subtaskid']

    # from mysite.models import UserTransactionDb
    # returnl =  [];
    # list = UserTransactionDb.objects.exclude(c5_value=u'').values_list('c5_value').distinct()
    # for o in list:
    # if o:
    # returnl.append(o[0])
    entry = UserSelectionDb.objects.filter(user=current_user.id)
    if request.GET.get('c1s') is not None and request.GET.get('c2s') is not None and request.GET.get(
            'c3s') is not None and request.GET.get('c4s') is not None:
        print 'I am using the link'
        type = 0
        request.session["user_ios"] = request.GET.get('c1s')
        request.session["user_plat"] = request.GET.get('c2s')
        request.session["user_tech"] = request.GET.get('c3s')
        # request.session["user_ios"] = request.GET.get('c4s')
        c1sel = request.GET.get('c1s')
        c2sel = request.GET.get('c2s')
        c3sel = request.GET.get('c3s')
        c4sel = request.GET.get('c4s')
        # if request.GET.get('c5s') is not None:
        # c5sel = request.GET.get('c5s')
        customer = ""
        # if request.GET.get('c6s') is not None:
        # c6sel =request.GET.get('c6s')
        if customer == "":
            customer = 'all'
        if c1sel == 'Enterprise-1':
            # print 'customer'
            # print customer
            nlead = NleadData(c1sel)
            ios_list = nlead.getIosList()
            label1 = 'Area Type'
            label2 = 'Support Type'
            label3 = 'Affected Service'
            plat_list = ['na']
            service_info = read_jason_file('services', customer)
            service_list = change_dict_format(service_info)
            service_list += [{"name": "User Options", "options":
                [{"label": "Add Service", "value": "Add Service"},
                 {"label": "Modify Service", "value": "Modify Service"},
                 {"label": "Delete Service", "value": "Delete Service"},
                 {"label": "Add Device", "value": "Add Device"},
                 {"label": "Modify Device", "value": "Modify Device"},
                 {"label": "Delete Device", "value": "Delete Device"}
                 ]}]
            # plat_list = {"meta": {"label": "c2", "default": "na", "na": "na"}}
            tech_list = {"meta": {"label": "", "default": "", "na": ""},
                         "sections": service_list}
            # tech_list = {"meta": {"label": "", "default": "", "na": ""},
            #                  "sections": [{"name": "Data Center", "options":
            #                      [{"label": "EPIC", "value": "epic"},
            #                       {"label": "PACS", "value": "pacs"},
            #                       {"label": "CITRIX", "value": "citrix"},
            #                       {"label": "DMZ", "value": "dmz"}]},
            #                               {"name": "Cloud", "options":
            #                                   [{"label": "Azure", "value": "azure"},
            #                                    {"label": "AWS", "value": "aws"}]},
            #                               {"name": "Others", "options":
            #                                   [{"label": "Voice", "value": "voice"},
            #                                    {"label": "Internet", "value": "internet"},
            #                                    {"label": "Informacast", "value": "informacast"}]},
            #                               {"name": "User Options", "options":
            #                                   [{"label": "Add Service", "value": "Add Service"},
            #                                    {"label": "Modify Service", "value": "Modify Service"},
            #                                    {"label": "Delete Service", "value": "Delete Service"},
            #                                    {"label": "Add Device", "value": "Add Device"},
            #                                    {"label": "Modify Device", "value": "Modify Device"},
            #                                    {"label": "Delete Device", "value": "Delete Device"}
            #                                    ]}]}

            sym_list = {"meta": {"label": "", "default": "", "na": ""},
                        "sections": [{"name": "Troubleshooting", "options":
                            [{"label": "Not Reachable", "value": "Not Reachable"},
                             {"label": "Poor Performance", "value": "Poor Performance"},
                             {"label": "Degraded Performance", "value": "Degraded Performance"},
                             {"label": "Slow Response", "value": "Slow Response"},
                             {"label": "Not Working", "value": "Not Working"},
                             {"label": "Other", "value": "Other"},
                             ]},
                                     {"name": "User Options", "options":
                                         [{"label": "Add Path", "value": "Add Path"},
                                          {"label": "Modify Path", "value": "Modify Path"},
                                          {"label": "Delete Path", "value": "Delete Path"}]}]}
            #
            # plat_list = ['Management', 'NOC', 'Escalation']
            # tech_list = {'Data Center': ['EPIC', 'PACS', 'CITRIX', 'DMZ'],
            #              'Cloud': ['Azure', 'AWS'], 'Others': ['Voice', 'Internet', 'Informacast']}
            # sym_list = {'Troubleshooting': ['Not Reachable', 'Poor Performance', 'Degraded Performance',
            #                                 'Slow Response', 'Not Working', 'Other']}
        else:

            if c1sel == 'ASA Firewall':
                c1sel = 'Firewalls'
            nlead = NleadData(c1sel)

            plat_list = nlead.getPlatfromList(c1sel)
            ios_list = nlead.getIosList()

            tech_list = {}
            tech_dict = nlead.getTechSectionDict(c1sel, c2sel)

            for area in tech_dict.iterkeys():
                tech_list[area] = tech_dict[area]
            db = ConvertUserToDbVar(c1sel, c2sel, c3sel, '')
            request.session['tp_list'] = db.getTpList()

            if c3sel == 'L2FWD':
                c3sel = 'Layer2 Forwarding'
            elif c3sel == 'MCAST':
                c3sel = 'Multicast'
            elif c3sel == 'L2MCAST':
                c3sel = 'Layer2 Multicast (IGMP)'
            elif c3sel == 'VXLAN':
                c3sel = 'VXLAN (BGP-EVPN)'

            training_dict = db.getTrainingList()
            sym_list = nlead.getTypeAndTpDict(c1sel, c2sel, c3sel, request.session['tp_list'], training_dict)

        if c1sel == 'Firewalls':
            c1sel = 'ASA Firewall'
        # elif c1sel == 'Multiple_Devices':
        #     c1sel ='Multiple Devices'

        if c2sel == 'Not_Applicable':
            c2sel = 'Not Applicable'

        if request.session['user_ios'] == 'Enterprise_Firewalls' or request.session[
            'user_ios'] == 'Enterprise Firewalls':

            # plat_list = {"meta": {"label": "c11", "default": "na", "na":"na"}}
            tech_list = {"meta": {"label": "c2", "default": "na", "na": "na"}}
            sym_list = {"meta": {"label": "", "default": "", "na": ""},
                        "sections": [{"name": "Configuration", "options":
                            [{"label": "Firewall Rules with New Object Groups", "value": "New Object Groups"},
                             {"label": "Firewall Rules with Existing Object Groups",
                              "value": "Existing Object Groups"},
                             ]}]}

        elif request.session['user_ios'] == 'Multiple_Devices':
            # plat_list = {"meta": {"label": "c11", "default": "na", "na":"na"}}
            tech_list = {"meta": {"label": "c2", "default": "na", "na": "na"}}

            sym_list = {"meta": {"label": "", "default": "", "na": ""},
                        "sections": [{"name": "Configuration", "options":
                            [{"label": "Provisioning Layer3 Link",
                              "value": "Provisioning Layer3 Link"},
                             ]}]}
        elif request.session['user_ios'] == 'ACI':
            print 'I am here 1'
            print c1sel
            print c2sel
            print c3sel
            # plat_list = {"meta": {"label": "c11", "default": "na", "na":"na"}}
            tech_list = {"meta": {"label": "c2", "default": "na", "na": "na"}}

            # sym_list = {"meta": {"label": "", "default": "", "na": ""},
            #             "sections": [{"name": "Configuration", "options":
            #                 [{"label": "IPv4 Troubleshooting",
            #                   "value": "IPv4 Troubleshooting"},
            #                  ]}]}
            training_dict = db.getTrainingList()
            sym_list = nlead.getTypeAndTpDict(c1sel, c2sel, c3sel, request.session['tp_list'], training_dict)
            print sym_list

        elif request.session['user_ios'] == 'fabric_configuration':
            plat_list = {"meta": {"label": "Select Options", "default": "12", "na": ""}, "sections": [
                {"name": "Select Options",
                 "options": [{"label": "East-DC", "value": "East-DC"}, {"label": "West-DC", "value": "West-DC"}]}]}
            tech_list = {"meta": {"label": "55", "default": "12", "na": "na"}, "sections": [{"options": []}]}
            sym_list = {"meta": {"label": "Select Options", "default": "", "na": ""},
                        "sections": [{"options": [{"label": "Configuring Provisioning Leaf Port", "value": "29"}]}]}

            type = 1
        # response_data['type'] = type
        # return render(request, 'phase2.html', {'c1_val': ios_list, 'c2_val': plat_list, 'c3_val': tech_list,
        # 'c4_val': sym_list, 'c1s': c1sel, 'c2s': c2sel, 'c3s': c3sel,
        # 'c4s': c4sel,'c5s':c5sel,'c6s':c6sel,
        # 'label1': label1, 'label2': label2, 'label3': label3,
        # 'label4': label4,'label5':'Ticket ID','label6':'Sub Task ID(s) (Optional)','customers':json.dumps(returnl)})
        return render(request, 'phase2.html', {'c1_val': ios_list, 'c2_val': plat_list, 'c3_val': tech_list,
                                               'c4_val': sym_list, 'c1s': c1sel, 'c2s': c2sel, 'c3s': c3sel,
                                               'c4s': c4sel,
                                               'label1': label1, 'label2': label2, 'label3': label3,
                                               'label4': label4, 'customers': json.dumps(returnl)})

    elif request.session.has_key('user_type'):
        # when refresh
        # user does the refresh or existing user login or use other browser (need to confirm)

        c1sel = request.session['user_ios']
        c2sel = request.session['user_plat']
        print "c2sel is : " + c2sel
        c3sel = request.session['user_tech']
        # c3sel = request.session['user_tech']

        print  "c1sel is : " + c1sel

        # print 'c3sel'
        # print c3sel
        c4sel = request.session['user_type']
        # if request.session.has_key('customer'):
        # c5sel = request.session['customer']
        # customer = request.session['customer']
        # c6sel = request.session['device']
        if c1sel == 'Enterprise-1':
            nlead = NleadData(c1sel)
            ios_list = nlead.getIosList()
            label1 = 'Area Type'
            label2 = 'Support Type'
            label3 = 'Affected Service'
            if customer == "":
                customer = 'all'

            plat_list = ['na']
            service_info = read_jason_file('services', customer)
            service_list = change_dict_format(service_info)
            service_list += [{"name": "User Options", "options":
                [{"label": "Add Service", "value": "Add Service"},
                 {"label": "Modify Service", "value": "Modify Service"},
                 {"label": "Delete Service", "value": "Delete Service"},
                 {"label": "Add Device", "value": "Add Device"},
                 {"label": "Modify Device", "value": "Modify Device"},
                 {"label": "Delete Device", "value": "Delete Device"}
                 ]}]
            # plat_list = {"meta": {"label": "c2", "default": "na", "na": "na"}}
            tech_list = {"meta": {"label": "", "default": "", "na": ""},
                         "sections": service_list}

            service_info = read_jason_file('services', customer)
            service_list = change_dict_format(service_info)
            service_list += [{"name": "User Options", "options":
                [{"label": "Add Service", "value": "Add Service"},
                 {"label": "Modify Service", "value": "Modify Service"},
                 {"label": "Delete Service", "value": "Delete Service"},
                 {"label": "Add Device", "value": "Add Device"},
                 {"label": "Modify Device", "value": "Modify Device"},
                 {"label": "Delete Device", "value": "Delete Device"}
                 ]}]
            tech_list = {"meta": {"label": "", "default": "", "na": ""},
                         "sections": service_list}

            # tech_list = {"meta": {"label": "", "default": "", "na": ""},
            #                  "sections": [{"name": "Data Center", "options":
            #                      [{"label": "EPIC", "value": "epic"},
            #                       {"label": "PACS", "value": "pacs"},
            #                       {"label": "CITRIX", "value": "citrix"},
            #                       {"label": "DMZ", "value": "dmz"}]},
            #                               {"name": "Cloud", "options":
            #                                   [{"label": "Azure", "value": "azure"},
            #                                    {"label": "AWS", "value": "aws"}]},
            #                               {"name": "Others", "options":
            #                                   [{"label": "Voice", "value": "voice"},
            #                                    {"label": "Internet", "value": "internet"},
            #                                    {"label": "Informacast", "value": "informacast"}]},
            #                               {"name": "User Options", "options":
            #                                   [{"label": "Add Service", "value": "Add Service"},
            #                                    {"label": "Modify Service", "value": "Modify Service"},
            #                                    {"label": "Delete Service", "value": "Delete Service"},
            #                                    {"label": "Add Device", "value": "Add Device"},
            #                                    {"label": "Modify Device", "value": "Modify Device"},
            #                                    {"label": "Delete Device", "value": "Delete Device"}
            #                                    ]}]}

            if c3sel == 'Add Service' or c3sel == 'Modify Service' or c3sel == 'Delete Service' \
                    or c3sel == 'Add Device' or c3sel == 'Modify Device' or c3sel == 'Delete Device':
                sym_list = {"meta": {"label": "", "default": "", "na": "na"},
                            "sections": [{"name": "Troubleshooting1", "options":
                                [{"label": "Not Reachable", "value": "Not Reachable"},
                                 {"label": "Poor Performance", "value": "Poor Performance"},
                                 {"label": "Degraded Performance", "value": "Degraded Performance"},
                                 {"label": "Slow Response", "value": "Slow Response"},
                                 {"label": "Not Working", "value": "Not Working"},
                                 {"label": "Other", "value": "Other"},
                                 ]},
                                         {"name": "User Options", "options":
                                             [{"label": "Add Path", "value": "Add Path"},
                                              {"label": "Modify Path", "value": "Modify Path"},
                                              {"label": "Delete Path", "value": "Delete Path"}]}]}
            else:
                sym_list = {"meta": {"label": "", "default": "", "na": ""},
                            "sections": [{"name": "Troubleshooting1", "options":
                                [{"label": "Not Reachable", "value": "Not Reachable"},
                                 {"label": "Poor Performance", "value": "Poor Performance"},
                                 {"label": "Degraded Performance", "value": "Degraded Performance"},
                                 {"label": "Slow Response", "value": "Slow Response"},
                                 {"label": "Not Working", "value": "Not Working"},
                                 {"label": "Other", "value": "Other"},
                                 ]},
                                         {"name": "User Options", "options":
                                             [{"label": "Add Path", "value": "Add Path"},
                                              {"label": "Modify Path", "value": "Modify Path"},
                                              {"label": "Delete Path", "value": "Delete Path"}]}]}

                # plat_list = ['Management', 'NOC', 'Escalation']
                # tech_list = {'Data Center': ['EPIC', 'PACS', 'CITRIX', 'DMZ'],
                #              'Cloud': ['Azure', 'AWS'], 'Others': ['Voice', 'Internet', 'Informacast']}
                # sym_list = {"meta": {"label": "Troubleshooting", "default": "", "na": ""},
                #             "sections": [{"name": "Troubleshooting", "options":
                #                 [{"label": "Not Reachable", "value": "Not Reachable"},
                #                  {"label": "Poor Performance","value": "Poor Performance"},
                #                  {"label": "Degraded Performance","value": "Degraded Performance"},
                #                  {"label": "Slow Response","value": "Slow Response"},
                #                  {"label": "Not Working","value": "Not Working"},
                #                  {"label": "Other","value": "Other"}
                #                  ]}]}
        else:

            nlead = NleadData(c1sel)
            plat_list = nlead.getPlatfromList(c1sel)
            print 'plat_list'
            print plat_list
            ios_list = nlead.getIosList()
            tech_list = {}
            tech_dict = nlead.getTechSectionDict(c1sel, c2sel)
            for area in tech_dict.iterkeys():
                tech_list[area] = tech_dict[area]
            db = ConvertUserToDbVar(c1sel, c2sel, c3sel, '')
            request.session['tp_list'] = db.getTpList()
            print 'tp_list'
            print request.session['tp_list']
            if c3sel == 'L2FWD':
                c3sel = 'Layer2 Forwarding'
            elif c3sel == 'MCAST':
                c3sel = 'Multicast'
            elif c3sel == 'L2MCAST':
                c3sel = 'Layer2 Multicast (IGMP)'
            elif c3sel == 'VXLAN':
                c3sel = 'VXLAN (BGP-EVPN)'

            training_dict = db.getTrainingList()
            sym_list = nlead.getTypeAndTpDict(c1sel, c2sel, c3sel, request.session['tp_list'], training_dict)

        if c1sel == 'Firewalls':
            c1sel = 'ASA Firewall'
        # elif c1sel == 'Multiple_Devices':
        #     c1sel ='Multiple Devices'

        if c2sel == 'Not_Applicable':
            c2sel = 'Not Applicable'

        if request.session['user_ios'] == 'Enterprise_Firewalls' or request.session[
            'user_ios'] == 'Enterprise Firewalls':

            # plat_list = {"meta": {"label": "c11", "default": "na", "na":"na"}}
            tech_list = {"meta": {"label": "c2", "default": "na", "na": "na"}}
            sym_list = {"meta": {"label": "", "default": "", "na": ""},
                        "sections": [{"name": "Configuration", "options":
                            [{"label": "Firewall Rules with New Object Groups", "value": "New Object Groups"},
                             {"label": "Firewall Rules with Existing Object Groups",
                              "value": "Existing Object Groups"},
                             ]}]}

        elif request.session['user_ios'] == 'Multiple_Devices':
            # plat_list = {"meta": {"label": "c11", "default": "na", "na":"na"}}
            tech_list = {"meta": {"label": "c2", "default": "na", "na": "na"}}

            sym_list = {"meta": {"label": "", "default": "", "na": ""},
                        "sections": [{"name": "Configuration", "options":
                            [{"label": "Provisioning Layer3 Link",
                              "value": "Provisioning Layer3 Link"},
                             ]}]}
        elif request.session['user_ios'] == 'ACI':
            # plat_list = {"meta": {"label": "c11", "default": "na", "na":"na"}}
            tech_list = {"meta": {"label": "c2", "default": "na", "na": "na"}}

            # sym_list = {"meta": {"label": "", "default": "", "na": ""},
            #             "sections": [{"name": "Configuration", "options":
            #                 [{"label": "IPv4 Troubleshooting",
            #                   "value": "IPv4 Troubleshooting"},
            #                  ]}]}
            training_dict = db.getTrainingList()
            print "training_dict"
            print training_dict
            print "TPLIST from session : "
            print request.session['tp_list']
            # if not request.session['tp_list']:
            #     request.session['tp_list'] = ['IPv4 Troubleshooting']
            print 'I am here 1'
            print c1sel
            print c2sel
            print c3sel
            sym_list = nlead.getTypeAndTpDict(c1sel, c2sel, c3sel, request.session['tp_list'], training_dict)
            print "Sym List Is"
            print sym_list
            # sym_list = {"meta": {"default": "", "na": "", "label": ""}, "sections": [{"name": "Configurations", "options": [{"value": "IPv4 Troubleshooting", "label": "IPv4 Troubleshooting"}]}, {"name": "User Options", "options": [{"label": "Add New Template"}, {"label": "Delete Existing Template"}]}, {"name": "Troubleshooting", "options": [{"value": "IPv4 Troubleshooting", "label": "IPv4 Troubleshooting"}]}]}
        elif request.session['user_ios'] == 'fabric_configuration':
            plat_list = {"meta": {"label": "Select Options", "default": "12", "na": ""}, "sections": [
                {"name": "Select Options",
                 "options": [{"label": "East-DC", "value": "East-DC"}, {"label": "West-DC", "value": "West-DC"}]}]}
            tech_list = {"meta": {"label": "55", "default": "12", "na": "na"}, "sections": [{"options": []}]}
            sym_list = {"meta": {"label": "Select Options", "default": "", "na": ""},
                        "sections": [{"options": [{"label": "Configuring Provisioning Leaf Port", "value": "29"}]}]}
            type = 1
        # response_data['type'] = type
        print "tech2---->"
        print sym_list
        print "C4s -->0"
        print c4sel
        # return render(request, 'phase2.html', {'c1_val': ios_list, 'c2_val': plat_list, 'c3_val': tech_list,
        # 'c4_val': sym_list, 'c1s': c1sel, 'c2s': c2sel, 'c3s': c3sel,
        # 'c4s': c4sel,'c5s':c5sel,'c6s':c6sel,
        # 'label1': label1, 'label2': label2, 'label3': label3,
        # 'label4': label4,'label5':'Ticket ID ','label6':'Sub Task ID(s) (Optional)','customers':json.dumps(returnl)})
        return render(request, 'phase2.html', {'c1_val': ios_list, 'c2_val': plat_list, 'c3_val': tech_list,
                                               'c4_val': sym_list, 'c1s': c1sel, 'c2s': c2sel, 'c3s': c3sel,
                                               'c4s': c4sel,
                                               'label1': label1, 'label2': label2, 'label3': label3,
                                               'label4': label4})
    elif entry:

        entry = UserSelectionDb.objects.get(user=current_user.id)
        c1sel = entry.c1_value
        nlead = NleadData()
        plat_list = nlead.getPlatfromList(c1sel)
        c2sel = entry.c2_value
        c3sel = entry.c3_value
        # c5sel = entry.c5_value
        # c6sel = entry.c6_value
        if c1sel == 'Enterprise-1':
            label2 = 'Affected User'
            label3 = 'Affected Service'
        else:
            label2 = 'Plat Type'
            label3 = 'Tech Type'

        c4sel = entry.c4_value
        nlead = NleadData()
        ios_list = nlead.getIosList()
        response_data = {}

        tech_dict = nlead.getTechSectionDict(c1sel, c2sel)
        for area in tech_dict.iterkeys():
            response_data[area] = tech_dict[area]
        db = ConvertUserToDbVar(c1sel, c2sel, c3sel, '')
        request.session['tp_list'] = db.getTpList()
        request.session['user_ios'] = c1sel
        request.session['user_plat'] = c2sel
        request.session['user_tech'] = c3sel
        request.session['user_type'] = c4sel
        request.session['user_comb'] = ''
        # request.session['customer'] = c5sel
        # request.session['device'] = c6sel
        db = ConvertUserToDbVar(c1sel, c2sel, c3sel, '')
        request.session['tp_list'] = db.getTpList()
        training_dict = db.getTrainingList()
        response_data1 = nlead.getTypeAndTpDict(c1sel, c2sel, c3sel, request.session['tp_list'], training_dict)

        # return render(request, 'phase2.html', {'c1_val': ios_list, 'c2_val': plat_list, 'c3_val': response_data,
        # 'c4_val': response_data1, 'c1s': c1sel, 'c2s': c2sel, 'c3s': c3sel,
        # 'c4s': c4sel,'c5s':c5sel,'c6s':c6sel,
        # 'label1': label1, 'label2': label2, 'label3': label3,
        # 'label4': label4,'label5':'Ticket ID ','label6':'Sub Task ID(s) (Optional)','customers':json.dumps(returnl)})
        return render(request, 'phase2.html', {'c1_val': ios_list, 'c2_val': plat_list, 'c3_val': response_data,
                                               'c4_val': response_data1, 'c1s': c1sel, 'c2s': c2sel, 'c3s': c3sel,
                                               'c4s': c4sel,
                                               'label1': label1, 'label2': label2, 'label3': label3,
                                               'label4': label4})
    else:
        c1sel = ''
        c2sel = ''
        c3sel = ''
        c4sel = ''
        # c5sel = ''
        # c6sel = ''
        request.session['user_ios'] = c1sel
        request.session['user_plat'] = c2sel
        request.session['user_tech'] = c3sel
        request.session['user_type'] = c4sel
        request.session['user_comb'] = ''
        # request.session['customer'] = c5sel
        # request.session['device'] = c6sel
        if c1sel == 'Enterprise-1':
            label2 = 'Affected User'
            label3 = 'Affected Service'
        else:
            label2 = 'Plat Type'
            label3 = 'Tech Type'
        nlead = NleadData()
        ios_list = nlead.getIosList()
        all_plat = nlead.getAllPlatfromList()
        plat_list = nlead.getPlatfromList('IOS')

        # set c4 val here
        response_data1 = nlead.getTypeAndTpDict(c1sel, c2sel, c3sel, [])
        # response_data1 = nlead.getTypeAndTpDict(c1sel, c2sel, c3sel, request.session['tp_list'])
        # return render(request, 'phase2.html', {'c1_val': ios_list, 'c2_val': all_plat, 'c3_val': '',
        # 'c4_val': response_data1, 'c1s': c1sel, 'c2s': c2sel, 'c3s': c3sel,
        # 'c4s': c4sel,'c5s':c5sel,'c6s':c6sel,
        # 'label1': label1, 'label2': label2, 'label3': label3,
        # 'label4': label4,'label5':'Ticket ID ','label6':'Sub Task ID(s) (Optional)','customers':json.dumps(returnl)})
        return render(request, 'phase2.html', {'c1_val': ios_list, 'c2_val': plat_list, 'c3_val': '',
                                               'c4_val': response_data1, 'c1s': c1sel, 'c2s': c2sel, 'c3s': c3sel,
                                               'c4s': c4sel,
                                               'label1': label1, 'label2': label2, 'label3': label3,
                                               'label4': label4})


@login_required(login_url='/login/')
def c1_checked(request):
    from mysite.models import UserTransactionDb
    response_data = {}
    nlead = NleadData()
    # ios_list = nlead.getIosList()
    # plat_list = nlead.getPlatfromList('IOS')
    # tech_list = nlead.getTechList('NX-IOS', 'NX7000')
    # type_list = nlead.getTypeList('NX-IOS', 'NX7000', 'OTV')
    if request.method == 'GET':
        # response = HttpResponse()
        if request.GET.get('c2') == '1':
            if request.GET.get('c1') == 'ASA Firewall':
                user_ios = 'Firewalls'
            elif request.GET.get('c1').__contains__(' '):
                user_ios = request.GET.get('c1').replace(' ', '_')
            else:
                user_ios = request.GET.get('c1')
            request.session['user_ios'] = user_ios

            # if ios = enterprise jump directly to inputs ask pranav
            customer = request.GET.get('c5')
            request.session['customer'] = customer
            if customer == '':
                customer == 'all'
            if request.session['user_ios'] == 'Enterprise-1':
                label1 = 'Area Type'
                label2 = 'Support Type'
                label3 = 'Affected Service'

                # plat_list = ['na']
                c2_opts = {"meta": {"label": "c11", "default": "na", "na": "na"}}

                service_info = read_jason_file('services', customer)
                print 'service_info'
                print service_info
                service_list = change_dict_format(service_info)
                service_list += [{"name": "User Options", "options":
                    [{"label": "Add Service", "value": "Add Service"},
                     {"label": "Modify Service", "value": "Modify Service"},
                     {"label": "Delete Service", "value": "Delete Service"},
                     {"label": "Add Device", "value": "Add Device"},
                     {"label": "Modify Device", "value": "Modify Device"},
                     {"label": "Delete Device", "value": "Delete Device"}
                     ]}]
                print 'service_list'
                print service_list

                c3_opts = {"meta": {"label": "", "default": "", "na": ""},
                           "sections": service_list}
                # c3_opts = {"meta": {"label": "", "default": "", "na": ""},
                #              "sections": [{"name": "Data Center", "options":
                #                  [{"label": "EPIC", "value": "epic"},
                #                   {"label": "PACS", "value": "pacs"},
                #                   {"label": "CITRIX", "value": "citrix"},
                #                   {"label": "DMZ", "value": "dmz"}]},
                #                           {"name": "Cloud", "options":
                #                               [{"label": "Azure", "value": "azure"},
                #                                {"label": "AWS", "value": "aws"}]},
                #                           {"name": "Others", "options":
                #                               [{"label": "Voice", "value": "voice"},
                #                                {"label": "Internet", "value": "internet"},
                #                                {"label": "Informacast", "value": "informacast"}]},
                #                           {"name": "User Options", "options":
                #                               [{"label": "Add Service", "value": "Add Service"},
                #                                {"label": "Modify Service", "value": "Modify Service"},
                #                                {"label": "Delete Service", "value": "Delete Service"},
                #                                {"label": "Add Device", "value": "Add Device"},
                #                                {"label": "Modify Device", "value": "Modify Device"},
                #                                {"label": "Delete Device", "value": "Delete Device"}
                #                                ]}]}
                na = ""
                if request.session['user_tech'] == "Add Service" or request.session['user_tech'] == "Modify Service" or \
                        request.session['user_tech'] == "Delete Service":
                    na = "na"
                c4_opts = {"meta": {"label": "", "default": "", "na": na},
                           "sections": [{"name": "Troubleshooting", "options":
                               [{"label": "Not Reachable", "value": "Not Reachable"},
                                {"label": "Poor Performance", "value": "Poor Performance"},
                                {"label": "Degraded Performance", "value": "Degraded Performance"},
                                {"label": "Slow Response", "value": "Slow Response"},
                                {"label": "Not Working", "value": "Not Working"},
                                {"label": "Other", "value": "Other"},
                                ]},
                                        {"name": "User Options", "options":
                                            [{"label": "Add Path", "value": "Add Path"},
                                             {"label": "Modify Path", "value": "Modify Path"},
                                             {"label": "Delete Path", "value": "Delete Path"}]}]}
                #
                # c4_opts = {"meta": {"label": "", "default": "", "na": ""},
                #             "sections": [{"name": "Troubleshooting", "options":
                #                 [{"label": "Not Reachable", "value": "Not Reachable"},
                #                  {"label": "Poor Performance", "value": "Poor Performance"},
                #                  {"label": "Degraded Performance", "value": "Degraded Performance"},
                #                  {"label": "Slow Response", "value": "Slow Response"},
                #                  {"label": "Not Working", "value": "Not Working"},
                #                  {"label": "Other", "value": "Other"},
                #                  ]}]}
                response_data = {}

                response_data['type'] = 2
                response_data['c2'] = c2_opts
                response_data['c3'] = c3_opts
                response_data['c4'] = c4_opts

                # output = ["Management", "NOC", "Escalation"]
                # response_data = {"sections": output, "label": "Support Role"}
                # output = '["Management","NOC","Escalation"]'
            elif request.session['user_ios'] == 'Enterprise_Firewalls':
                c2_opts = {"meta": {"label": "c11", "default": "na", "na": "na"}}
                c3_opts = {"meta": {"label": "c2", "default": "na", "na": "na"}}
                user_dict = {'Troubleshooting': ['Not Reachable', 'Poor Performance', 'Degraded Performance',
                                                 'Slow Response', 'Not Working', 'Other']}
                c4_opts = {"meta": {"label": "", "default": "", "na": ""},
                           "sections": [{"name": "Configuration", "options":
                               [{"label": "Firewall Rules with New Object Groups", "value": "New Object Groups"},
                                {"label": "Firewall Rules with Existing Object Groups",
                                 "value": "Existing Object Groups"},
                                ]}]}
                response_data = {}

                response_data['type'] = 2
                response_data['c2'] = c2_opts
                response_data['c3'] = c3_opts
                response_data['c4'] = c4_opts

            elif request.session['user_ios'] == 'Multiple_Devices':
                c2_opts = {"meta": {"label": "c11", "default": "na", "na": "na"}}
                c3_opts = {"meta": {"label": "c2", "default": "na", "na": "na"}}
                # print "!!!!!!!! In multiple Devices "
                # c2_opts = {"meta": {"label": "c11", "default": "na", "na": "na"}}
                # c3_opts = {"meta": {"label": "c2", "default": "na", "na": "na"}}
                user_dict = {'Troubleshooting': ['Not Reachable', 'Poor Performance', 'Degraded Performance',
                                                 'Slow Response', 'Not Working', 'Other']}
                c4_opts = {"meta": {"label": "", "default": "", "na": ""},
                           "sections": [{"name": "Configuration", "options":
                               [{"label": "Provisioning Layer3 Link", "value": "Provisioning Layer3 Link"},
                                ]}]}
                response_data = {}

                response_data['type'] = 2
                response_data['c2'] = c2_opts
                response_data['c3'] = c3_opts
                response_data['c4'] = c4_opts

            elif request.session['user_ios'] == 'ACI':
                print "I am coming here --->"
                c2_opts = {"meta": {"label": "c11", "default": "na", "na": "na"}}
                c3_opts = {"meta": {"label": "c2", "default": "na", "na": "na"}}
                # user_dict = {'Troubleshooting': ['Not Reachable', 'Poor Performance', 'Degraded Performance',
                #                                  'Slow Response', 'Not Working', 'Other']}
                # c4_opts = {"meta": {"label": "", "default": "", "na": ""},
                #            "sections": [{"name": "Configuration", "options":
                #                [{"label": "IPv4 Troubleshooting",
                #                  "value": "IPv4 Troubleshooting"},
                #                 ]}]}
                # request.session['user_tech'] = user_tech
                request.session['user_plat'] = 'na'
                request.session['user_tech'] = 'na'
                glb_user_ios = request.session['user_ios']
                glb_user_plat = request.session['user_plat']
                glb_user_tech = request.session['user_tech']
                print glb_user_ios
                print glb_user_plat
                print glb_user_tech
                db = ConvertUserToDbVar(glb_user_ios, glb_user_plat, glb_user_tech, '')
                request.session['tp_list'] = db.getTpList()
                print 'getTpList'
                print db.getTpList()
                training_dict = db.getTrainingList()
                print 'training_dict'
                print training_dict
                c4_opts = nlead.getTypeAndTpDict(glb_user_ios, glb_user_plat, glb_user_tech, request.session['tp_list'],
                                                 training_dict)
                response_data = {}

                response_data['type'] = 2
                response_data['c2'] = c2_opts
                response_data['c3'] = c3_opts
                response_data['c4'] = c4_opts

            elif request.session['user_ios'] == 'fabric configuration':

                plat_list = {"meta": {"label": "Select Options", "default": "12", "na": ""}, "sections": [
                    {"name": "Select Options",
                     "options": [{"label": "East-DC", "value": "East-DC"}, {"label": "West-DC", "value": "West-DC"}]}]}
                tech_list = {"meta": {"label": "55", "default": "12", "na": "na"}, "sections": [{"options": []}]}
                sym_list = {"meta": {"label": "Select Options", "default": "", "na": ""},
                            "sections": [{"options": [{"label": "Configuring Provisioning Leaf Port", "value": "29"}]}]}
                type = 1

                c2_opts = {"meta": {"label": "c11", "default": "na", "na": "na"}}
                c3_opts = {"meta": {"label": "c2", "default": "na", "na": "na"}}
                user_dict = {'Troubleshooting': ['Not Reachable', 'Poor Performance', 'Degraded Performance',
                                                 'Slow Response', 'Not Working', 'Other']}
                c4_opts = {"meta": {"label": "", "default": "", "na": ""},
                           "sections": [{"name": "Configuration", "options":
                               [{"label": "Provisioning Layer3 Link",
                                 "value": "Provisioning Layer3 Link"},
                                ]}]}
                response_data = {}

                response_data['type'] = 2
                response_data['c2'] = c2_opts
                response_data['c3'] = c3_opts
                response_data['c4'] = c4_opts

            else:
                output = nlead.getPlatfromList(request.session['user_ios'])
                response_data = {"sections": output, "label": "Platform"}
                # c2_opts = {"meta": {"label": "Select type 2", "default": "12","na":""}, "sections": [{"name": "section one","options": [{"label":"other","value":"12"},{"label":"other1","value":"123"} ]}, {"name": "section 2","options": [{"label":"other","value":"12"},{"label":"other1","value":"123"} ]}]}

                # c3_opts = {"meta": {"label": "55", "default": "12","na":"na"}}
                # c4_opts = {"meta": {"label": "55", "default": "12","na":""}, "sections": [{"name": "section one","options": [{"label":"other","value":"12"},{"label":"other1","value":"123"} ]}, {"name": "section 2","options": [{"label":"other","value":"12"},{"label":"other1","value":"123"} ]}]}
                # response_data = {}

                # response_data['type'] = 2
                # response_data['c2'] = c2_opts
                # response_data['c3'] = c3_opts
                # response_data['c4'] = c4_opts
            return HttpResponse(json.dumps(response_data), content_type="application/json")
            # return HttpResponse(output)
        elif request.GET.get('c2') == '2':
            if request.session:
                glb_user_ios = request.session['user_ios']

            else:
                glb_user_ios = ''
            if request.GET.get('c1') == 'Not Applicable':
                user_plat = 'Not_Applicable'
            else:
                user_plat = request.GET.get('c1')
            request.session['user_plat'] = user_plat
            if request.session['user_ios'] == 'Enterprise-1':
                tech_dict = change_dict_format_2(read_jason_file('services', request.session['customer']))
                # tech_dict = {'Data Center': ['EPIC', 'PACS', 'CITRIX', 'DMZ'],
                #      'Cloud': ['Azure', 'AWS'], 'Others': ['Voice', 'Internet', 'Informacast', 'Add Service'],
                #              'User Options': ['Add Service', 'Modify Service', 'Delete Service',
                #                               'Add Device', 'Modify Device', 'Delete Device']}
                request.session['user_plat'] = 'management'
                label = 'Affected Service'
            else:
                tech_dict = nlead.getTechSectionDict(glb_user_ios, user_plat)
                label = 'Technology'
            user_dict = {}
            for area in tech_dict.iterkeys():
                user_dict[area] = tech_dict[area]
            response_data['sections'] = user_dict
            response_data['label'] = label

            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get('c2') == '3':
            label = 'Configuration and Troubleshooting'
            if request.GET.get('c1') == 'VXLAN (BGP-EVPN)':
                user_tech = 'VXLAN'
            elif request.GET.get('c1') == 'Layer2 Forwarding':
                user_tech = 'L2FWD'
            elif request.GET.get('c1') == 'Multicast':
                user_tech = 'MCAST'
            elif request.GET.get('c1') == 'Layer2 Multicast (IGMP)':
                user_tech = 'L2MCAST'
            else:
                user_tech = request.GET.get('c1')
            if request.session['user_ios'] == 'Enterprise-1':
                if request.GET.get('c1') == 'Add Service' or request.GET.get(
                        'c1') == 'Modify Service' or request.GET.get('c1') == 'Delete Service' \
                        or request.GET.get('c1') == 'Add Device' or request.GET.get(
                    'c1') == 'Modify Device' or request.GET.get('c1') == 'Delete Device':
                    user_dict = {"meta": {"label": "", "default": "", "na": "na"}}
                else:
                    user_dict = {'Troubleshooting': ['Not Reachable', 'Poor Performance', 'Degraded Performance',
                                                     'Slow Response', 'Not Working', 'Other'],
                                 'User Options': ['Add Path', 'Modify Path', 'Delete Path']}
            elif request.session['user_ios'] == 'Multiple_Devices' or request.session['user_ios'] == 'Multiple Devices':
                request.session['user_tech'] = user_tech
                glb_user_ios = request.session['user_ios']
                glb_user_plat = request.session['user_plat']
                glb_user_tech = request.session['user_tech']
                db = ConvertUserToDbVar(glb_user_ios, glb_user_plat, glb_user_tech, '')
                request.session['tp_list'] = db.getTpList()
                request.session['tp_list'] = ['Provisioning Layer3 Link']
                user_dict = nlead.getTypeAndTpDict(glb_user_ios, glb_user_plat, glb_user_tech,
                                                   request.session['tp_list'])
            elif request.session['user_ios'] == 'ACI' or request.session['user_ios'] == 'Cisco ACI':
                request.session['user_tech'] = user_tech
                glb_user_ios = request.session['user_ios']
                glb_user_plat = request.session['user_plat']
                glb_user_tech = request.session['user_tech']
                db = ConvertUserToDbVar(glb_user_ios, glb_user_plat, glb_user_tech, '')
                request.session['tp_list'] = db.getTpList()
                print '2nd tp_list'
                print request.session['tp_list']
                # request.session['tp_list'] = ['Provisioning Layer3 Link']
                user_dict = nlead.getTypeAndTpDict(glb_user_ios, glb_user_plat, glb_user_tech,
                                                   request.session['tp_list'])
            else:
                request.session['user_tech'] = user_tech
                glb_user_ios = request.session['user_ios']
                glb_user_plat = request.session['user_plat']
                glb_user_tech = request.session['user_tech']
                db = ConvertUserToDbVar(glb_user_ios, glb_user_plat, glb_user_tech, '')
                request.session['tp_list'] = db.getTpList()
                training_dict = db.getTrainingList()
                user_dict = nlead.getTypeAndTpDictOld(glb_user_ios, glb_user_plat, glb_user_tech,
                                                      request.session['tp_list'], training_dict)
                if request.session['user_ios'] == 'fabric_configuration':
                    response_data['meta'] = {"label": label, "default": c3s, "na": "na"}
                else:
                    c3_opts = user_dict
            response_data['sections'] = user_dict
            response_data['label'] = label
            response_data['label'] = label
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get('c2') == '4':

            c1s = ""
            c2s = ""
            c3s = ""
            c4s = ""
            c5s = ""
            # return HttpResponse('["val31","val32","val33"]')
            customer = request.GET.get('c1')
            entry = UserTransactionDb.objects.filter(c5_value=customer).order_by('timestamp').last()
            if entry:
                c1s = entry.c1_value
                c2s = entry.c2_value
                c3s = entry.c3_value
                c4s = entry.c4_value
                c6s = entry.c6_value
            request.session['user_ios'] = c1s
            request.session['user_plat'] = c2s
            request.session['user_tech'] = c3s
            request.session['device'] = c6s
            request.session['customer'] = customer

            nlead = NleadData()
            ios_list = nlead.getIosList()
            platform = nlead.getPlatfromList(c1s)
            c2_opts = {"meta": {"label": "Platform", "default": c2s, "na": ""}, "sections": platform}

            tech_dict = nlead.getTechSectionDict(c1s, c2s)
            label = 'Technology'
            user_dict = {}
            for area in tech_dict.iterkeys():
                user_dict[area] = tech_dict[area]
            label = 'Configuration and Troubleshooting'
            db = ConvertUserToDbVar(c1s, c2s, c3s, '')
            request.session['tp_list'] = db.getTpList()
            training_dict = db.getTrainingList()
            user_dict1 = nlead.getTypeAndTpDictOld(c1s, c2s, c3s,
                                                   request.session['tp_list'], training_dict)

            if c3s == 'L2FWD':
                c3s = 'Layer2 Forwarding'
            elif c3s == 'MCAST':
                c3s = 'Multicast'
            elif c3s == 'L2MCAST':
                c3s = 'Layer2 Multicast (IGMP)'
            elif c3s == 'VXLAN':
                c3s = 'VXLAN (BGP-EVPN)'
            if request.session['user_ios'] == 'fabric_configuration':
                c3_opts = {"meta": {"label": label, "default": c3s, "na": ""}, "sections": user_dict}
            else:
                c3_opts = {"meta": {"label": label, "default": c3s, "na": "na"}, "sections": user_dict}
            c4_opts = {"meta": {"label": label, "default": c4s, "na": ""}, "sections": user_dict1}
            response_data['c1'] = ios_list
            response_data['c2'] = c2_opts
            response_data['c3'] = c3_opts
            response_data['c4'] = c4_opts
            response_data['c1s'] = c1s
            response_data['c2s'] = c2s
            response_data['c3s'] = c3s
            response_data['c4s'] = c4s
            response_data['c5s'] = c6s
            response_data['type'] = 2
            # response_data['type'] = type
            return HttpResponse(json.dumps(response_data), content_type="application/json")


def display_meta(request):
    values = request.META.items()
    values.sort()
    html = []
    for k, v in values:
        html.append('<tr><td>%s</td><td>%s</td></tr>' % (k, v))
    return HttpResponse('<table>%s</table>' % '\n'.join(html))


def CombinationsSubmitted(request):
    current_user = request.user
    from mysite.models import UserSelectionDb
    from mysite.models import UserTransactionDb
    from django.db.models import F
    if request.GET.get('c3') == 'VXLAN (BGP-EVPN)':
        tech_value = 'VXLAN'
    elif request.GET.get('c3') == 'Layer2 Forwarding':
        tech_value = 'L2FWD'
    elif request.GET.get('c3') == 'Multicast':
        tech_value = 'MCAST'
    elif request.GET.get('c3') == 'Layer2 Multicast (IGMP)':
        tech_value = 'L2MCAST'
    else:
        tech_value = request.GET.get('c3')

    # below for task without service request
    if request.session.has_key('taskid'):
        q1 = UserTransactionDb(user=current_user.id, c1_value=request.GET.get('c1'), c2_value=request.GET.get('c2'),
                               c3_value=tech_value, c4_value=request.GET.get('c4'), c5_value="", c6_value="",
                               taskid=request.session['taskid'], subtaskid=request.session['subtaskid'])
        q1.save()
    else:
        q1 = UserTransactionDb(user=current_user.id, c1_value=request.GET.get('c1'), c2_value=request.GET.get('c2'),
                               c3_value=tech_value, c4_value=request.GET.get('c4'), c5_value="", c6_value="", taskid="",
                               subtaskid="")
        q1.save()
    if request.session.has_key('taskid'):
        entry = UserSelectionDb.objects.filter(user=current_user.id)
        if not entry:
            # below for task without service request
            p = UserSelectionDb(user=current_user.id, c1_value=request.GET.get('c1'), c2_value=request.GET.get('c2'),
                                c3_value=tech_value, c4_value=request.GET.get('c4'),
                                c5_value=request.session['customer'], c6_value="", taskid=request.session['taskid'],
                                subtaskid=request.session['subtaskid'])
            p.save()
        else:
            p1 = UserSelectionDb.objects.filter(user=current_user.id).update(c1_value=request.GET.get('c1'),
                                                                             c2_value=request.GET.get('c2'),
                                                                             c3_value=tech_value,
                                                                             c4_value=request.GET.get('c4'),
                                                                             c5_value=request.session['customer'],
                                                                             c6_value=request.GET.get('c6'),
                                                                             taskid=request.session['taskid'],
                                                                             subtaskid=request.session['subtaskid']
                                                                             )
            # p1.save()
    print 'current_user: %s' % current_user
    # Call the class to run the python and tcl script to get the input list
    # this should return the dict like following
    cutomer = request.session['customer']
    request.session['device'] = ""
    response_data = []
    if request.method == 'GET':
        # user_ios = request.GET.get('c1')
        if request.GET.get('c1') == 'ASA Firewall':
            user_ios = 'Firewalls'
        elif request.GET.get('c1').__contains__(' '):
            user_ios = request.GET.get('c1').replace(' ', '_')
        else:
            user_ios = request.GET.get('c1')
        request.session['user_ios'] = user_ios
        if request.GET.get('c2').__contains__(' '):
            user_plat = request.GET.get('c2').replace(' ', '_')
        # if request.GET.get('c2') == 'Any IOS Platform':
        #     user_plat = 'Any_IOS_Platform'
        else:
            user_plat = request.GET.get('c2')
        glb_user_ios = user_ios
        if user_plat == "":
            user_plat = 'Any'
        elif user_plat == 'C3750_C3850':
            user_plat = 'C3750'
        elif user_plat == 'C3900_C2900':
            user_plat = 'C4500'
        elif user_plat == 'C3800_C2800':
            user_plat = 'C4500'

        request.session['user_plat'] = user_plat
        user_tech = tech_value
        request.session['user_tech'] = user_tech
        user_type = request.GET.get('c4')
        request.session['user_type'] = user_type

        glb_user_plat = user_plat
        glb_user_tech = user_tech
        glb_user_type = user_type
        sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                    'type': user_type, 'user_name': current_user, 'customer': request.session['customer']}

        if user_type == "Add New Template":
            para = GetInputsForTemplate(glb_user_ios, glb_user_plat, glb_user_tech, glb_user_type)
            # glb_intput_para = para.getTemplateInputs()
            request.session['input_para_list'] = para.getTemplateInputs()
            # print glb_intput_para
            info_dict = GetInputVariableDictOpration(request.session['input_para_list'])
            response_data = info_dict.input_para_dict
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_type == "Delete Existing Template":
            request.session['input_para_list'] = ['template_name']
            info_dict = GetInputVariableDictOpration(request.session['input_para_list'])
            response_data = info_dict.input_para_dict
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_type == "Modify Existing Template":
            request.session['input_para_list'] = ['template_name']
            info_dict = GetInputVariableDictOpration(request.session['input_para_list'])
            response_data = info_dict.input_para_dict
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_type == 'New Object Groups' and user_ios == 'Enterprise_Firewalls':
            user_question_data = EnterpriseFirewallsTpInputVariable(sel_para)
            response_data = user_question_data.get_response_data()
            request.session['user_comb'] = response_data
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_ios == 'Multiple_Devices' or user_ios == 'Multiple Devices':
            user_question_data = MultiDeviceTpInputVariable(sel_para)
            response_data = user_question_data.get_response_data()
            request.session['result_symptom_dict'] = user_question_data.get_result_symptom_dict()
            # request.session['user_comb'] = response_data
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.session['tp_list'].__contains__(user_type) or not user_type.find(
                'Troubleshooting') == -1 or user_ios == 'JUNOS' \
                or glb_user_ios == 'F5' or glb_user_ios == 'CP' or glb_user_ios == 'Linux' or glb_user_ios == 'Windows':
            print 'I am here .... Linux'
            glb_user_type = user_type
            test_flag = True
            if test_flag:
                set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer)
                result = set_inputs_to_db.overwriteTlDb()
                feature_data = set_inputs_to_db.get_feature_data()
                field_desc_list = set_inputs_to_db.field_desc_list
                feature_list = set_inputs_to_db.get_feature_list()
                request.session['input_optional_list'] = set_inputs_to_db.optional_list
                # add new logic
            data = ReadTemplateDb(sel_para, glb_user_type, customer)
            template_inputs = data.getInputsFromDb()
            template_inputs_variables = template_inputs.split(" ")

            if sel_para.get('ios') == 'Firewalls':
                template_inputs_dict = GetInputVariableDictForAsaTP(sel_para, template_inputs_variables, feature_data,
                                                                    field_desc_list)
            else:
                print 'I am here 10'
                template_inputs_dict = GetInputVariableDictForTp(request, sel_para, template_inputs_variables,
                                                                 feature_data,
                                                                 field_desc_list)
            response_data = template_inputs_dict.input_para_dict
            request.session['input_response_data'] = response_data
            glb_CombinationsSubmitted = response_data
            request.session['user_comb'] = glb_CombinationsSubmitted
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif glb_user_type == "Problem Solving":
            user_question_data = ProblemSolvingInputVariable(sel_para)
            response_data = user_question_data.get_response_data()
            # request.session['input_response_data'] = response_data
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_ios == "Enterprise-1":
            if glb_user_tech == 'Add Service' or glb_user_tech == 'Modify Service' or glb_user_tech == 'Delete Service':
                user_question_data = Ent_Service_Input(sel_para)
            elif glb_user_tech == 'Add Device' or glb_user_tech == 'Modify Device' or glb_user_tech == 'Delete Device':
                print 'I am here submitted Ent_Device_Input'
                user_question_data = Ent_Device_Input(sel_para)
            elif glb_user_type == 'Add Path' or glb_user_type == 'Modify Path' or glb_user_type == 'Delete Path':
                user_question_data = Ent_Path_Input(sel_para)
            else:
                service_data = {}
                if request.session['customer']:
                    file_name = '/home/ubuntu/prepro/mysite/mysite/data/' + request.session['customer'].replace(' ',
                                                                                                                '_').lower() + '/' + 'services' + '.json'
                else:
                    file_name = '/home/ubuntu/prepro/mysite/mysite/data/' + 'all' + '/' + 'services' + '.json'
                with open(file_name, 'r') as f:
                    service_data = json.load(f)
                request.session['service_data'] = service_data
                user_question_data = Enterprise_1_InputVariable(sel_para, {}, service_data)
                request.session['result_symptom_dict'] = user_question_data.get_result_symptom_dict()
            response_data = user_question_data.get_response_data()
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        else:
            # Old tag - TCL/TK combination
            sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                        'type': glb_user_type, 'user_name': current_user}
            sel_para_2 = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                          'type': glb_user_type}
            para = GetInputVariable(user_ios, user_plat, user_tech, user_type)
            # glb_sel_para = para.getUserInputsToTcl()
            intput_para = para.getTypeList()
            # glb_intput_para = para.getTypeList()
            request.session['non_common_que'] = para.get_non_common_que()
            info_dict = GetInputVariableDict(intput_para, sel_para, request.session['non_common_que'])
            response_data = info_dict.input_para_dict
            # response_data = {"column":"12","inputs": inputs}
            request.session['sel_para'] = sel_para_2
            request.session['intput_para'] = intput_para
            glb_CombinationsSubmitted = response_data['inputs']
            request.session['user_comb'] = glb_CombinationsSubmitted
            return HttpResponse(json.dumps(response_data), content_type="application/json")


def CombinationsSubmittedTemplate(request, user_ios, user_plat, user_tech, tmplt_name, tag=""):
    '''
        Description:
            load template inputs.
		Inputs:
		    request & data get from def get_user_selection
		Output:
            Return a dictionary called response_data.

    :param request:
    :param user_ios:
    :param user_plat:
    :param user_tech:
    :param tmplt_name:
    :param tag:
    :return:
    '''
    current_user = request.user
    from mysite.models import UserSelectionDb
    from mysite.models import UserTransactionDb
    from django.db.models import F

    if request.GET.get('c3', user_ios) == 'VXLAN (BGP-EVPN)':
        tech_value = 'VXLAN'
    elif request.GET.get('c3', user_ios) == 'Layer2 Forwarding':
        tech_value = 'L2FWD'
    elif request.GET.get('c3', user_ios) == 'Multicast':
        tech_value = 'MCAST'
    elif request.GET.get('c3', user_ios) == 'Layer2 Multicast (IGMP)':
        tech_value = 'L2MCAST'
    else:
        tech_value = request.GET.get('c3', user_tech)

        # below for task without service request
    q1 = UserTransactionDb(user=current_user.id, c1_value=request.GET.get('c1', user_ios),
                           c2_value=request.GET.get('c2', user_plat), c3_value=tech_value,
                           c4_value=request.GET.get('c4', tmplt_name), c5_value=request.session['customer'],
                           c6_value="", taskid="", subtaskid="")
    q1.save()
    if request.session.has_key('taskid'):
        entry = UserSelectionDb.objects.filter(user=current_user.id)
        if not entry:
            # below for task without service request
            p = UserSelectionDb(user=current_user.id, c1_value=request.GET.get('c1', user_ios),
                                c2_value=request.GET.get('c2', user_plat),
                                c3_value=tech_value, c4_value=request.GET.get('c4', tmplt_name),
                                c5_value=request.session['customer'], c6_value="", taskid=request.session['taskid'],
                                subtaskid=request.session['subtaskid'])
            p.save()
        else:
            p1 = UserSelectionDb.objects.filter(user=current_user.id).update(c1_value=request.GET.get('c1', user_ios),
                                                                             c2_value=request.GET.get('c2', user_plat),
                                                                             c3_value=tech_value,
                                                                             c4_value=request.GET.get('c4', tmplt_name),
                                                                             c5_value=request.session['customer'],
                                                                             c6_value=request.GET.get('c6'),
                                                                             taskid=request.session['taskid'],
                                                                             subtaskid=request.session['subtaskid']
                                                                             )
            # p1.save()
    print 'current_user: %s' % current_user
    # Call the class to run the python and tcl script to get the input list
    # this should return the dict like following
    customer = request.session['customer']
    response_data = []

    if request.method == 'GET':
        # user_ios = request.GET.get('c1',user_ios)
        ext_dict = {}
        if request.session.has_key("extension"):
            ext_dict = request.session["extension"]

        if request.GET.has_key("ext"):
            ext_dict["ext_name"] = request.GET.get("ext")
        if request.GET.has_key("config_action"):
            ext_dict["action"] = request.GET.get("config_action")
        request.session["ext_dict"] = ext_dict
        if request.GET.get('c1', user_ios) == 'ASA Firewall':
            user_ios = 'Firewalls'
        elif request.GET.get('c1', user_ios).__contains__(' '):
            user_ios = request.GET.get('c1', user_ios).replace(' ', '_')
        else:
            user_ios = request.GET.get('c1', user_ios)
        request.session['user_ios'] = user_ios
        if request.GET.get('c2', user_plat).__contains__(' '):
            user_plat = request.GET.get('c2', user_plat).replace(' ', '_')
        # if request.GET.get('c2') == 'Any IOS Platform':
        #     user_plat = 'Any_IOS_Platform'
        else:
            user_plat = request.GET.get('c2', user_plat)
        glb_user_ios = user_ios
        if user_plat == "":
            user_plat = 'Any'
        elif user_plat == 'C3750_C3850':
            user_plat = 'C3750'
        elif user_plat == 'C3900_C2900':
            user_plat = 'C4500'
        elif user_plat == 'C3800_C2800':
            user_plat = 'C4500'
        print ">>>>>>", user_plat
        request.session['user_plat'] = user_plat
        user_tech = tech_value
        request.session['user_tech'] = user_tech
        user_type = request.GET.get('c4', tmplt_name)
        # print ">>>>>>>>>>>", user_type
        request.session['user_type'] = user_type

        glb_user_plat = user_plat
        glb_user_tech = user_tech
        glb_user_type = user_type
        tp_list = []
        e1 = template_db.objects.filter(ios=user_ios, plat=user_plat, tech=user_tech).values_list("template",
                                                                                                  "type").all()
        if e1:
            for each in e1:
                if user_ios in ["nx", "ios", "xr"] and str(each[1]) == "2":
                    print each[0]
                    continue
                else:
                    tp_list.append(each[0])
        sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                    'type': user_type, 'user_name': current_user, 'customer': request.session['customer']}
        if user_type == "Add New Template":
            para = GetInputsForTemplate(glb_user_ios, glb_user_plat, glb_user_tech, glb_user_type)
            # glb_intput_para = para.getTemplateInputs()
            request.session['input_para_list'] = para.getTemplateInputs()
            # print glb_intput_para
            info_dict = GetInputVariableDictOpration(request.session['input_para_list'])
            response_data = info_dict.input_para_dict
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_type == "Delete Existing Template":
            request.session['input_para_list'] = ['template_name']
            info_dict = GetInputVariableDictOpration(request.session['input_para_list'])
            response_data = info_dict.input_para_dict
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_type == "Modify Existing Template":
            request.session['input_para_list'] = ['template_name']
            info_dict = GetInputVariableDictOpration(request.session['input_para_list'])
            response_data = info_dict.input_para_dict
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_type == 'New Object Groups' and user_ios == 'Enterprise_Firewalls':
            user_question_data = EnterpriseFirewallsTpInputVariable(sel_para)
            response_data = user_question_data.get_response_data()
            request.session['user_comb'] = response_data
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif user_ios == 'Multiple_Devices' or user_ios == 'Multiple Devices':
            user_question_data = MultiDeviceTpInputVariable(sel_para)
            response_data = user_question_data.get_response_data()
            request.session['result_symptom_dict'] = user_question_data.get_result_symptom_dict()
            # request.session['user_comb'] = response_data
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif tag == "legacy":
            # Old tag - TCL/TK combination

            print "in elif >>>>>>>>>"

            sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                        'type': glb_user_type, 'user_name': current_user}
            sel_para_2 = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                          'type': glb_user_type}

            print sel_para_2
            para = GetInputVariable(user_ios, user_plat, user_tech, user_type)
            # glb_sel_para = para.getUserInputsToTcl()
            intput_para = para.getTypeList()
            # glb_intput_para = para.getTypeList()
            request.session['non_common_que'] = para.get_non_common_que()
            info_dict = GetInputVariableDict(intput_para, sel_para, request.session['non_common_que'])
            response_data = info_dict.input_para_dict
            # response_data = {"column":"12","inputs": inputs}
            request.session['sel_para'] = sel_para_2
            request.session['intput_para'] = intput_para
            glb_CombinationsSubmitted = response_data['inputs']
            request.session['user_comb'] = glb_CombinationsSubmitted
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif tp_list.__contains__(user_type) or not user_type.find('Troubleshooting') == -1 or user_ios == 'JUNOS' \
                or glb_user_ios == 'F5' or glb_user_ios == 'CP' or glb_user_ios == 'Linux' or glb_user_ios == 'Windows':
            request.session['tp_list'] = tp_list
            glb_user_type = user_type
            test_flag = True
            if test_flag:
                set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, ext_dict)
                result = set_inputs_to_db.overwriteTlDb()
                feature_data = set_inputs_to_db.get_feature_data()
                field_desc_list = set_inputs_to_db.field_desc_list
                feature_list = set_inputs_to_db.get_feature_list()
                request.session['input_optional_list'] = set_inputs_to_db.optional_list
            data = ReadTemplateDb(sel_para, glb_user_type, customer, ext_dict)
            template_inputs = data.getInputsFromDb()
            template_inputs_variables = template_inputs.split(" ")
            if sel_para.get('ios') == 'Firewalls':
                template_inputs_dict = GetInputVariableDictForAsaTP(sel_para, template_inputs_variables, feature_data,
                                                                    field_desc_list)
            else:
                print 'I am here 10'
                template_inputs_dict = GetInputVariableDictForTp(request, customer, sel_para, template_inputs_variables,
                                                                 feature_data,
                                                                 field_desc_list)

            response_data = template_inputs_dict.input_para_dict
            if "SDA Fabric Verification" in sel_para.get('type'):
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(
                    taskid=request.session['project_no']).all()
                if q:
                    db_values = {}
                    for inputs_tpl in q:
                        if "[" in inputs_tpl[1]:
                            inp_lst = json.loads(inputs_tpl[1])
                            db_values[inputs_tpl[0]] = ",".join(inp_lst)
                        else:
                            db_values[inputs_tpl[0]] = inputs_tpl[1]
                print db_values
                for input_dict in response_data['inputs']:
                    indx = response_data['inputs'].index(input_dict)
                    var_name = input_dict['name']
                    if var_name in db_values:
                        # print var_name, ">>>>>>>>>>0", db_values[var_name]
                        # print response_data['inputs'][indx]
                        response_data['inputs'][indx]['type'] = "hidden"
                        response_data['inputs'][indx]['default1'] = db_values[var_name]
            request.session['input_response_data'] = response_data
            glb_CombinationsSubmitted = response_data
            request.session['user_comb'] = glb_CombinationsSubmitted
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")

        elif glb_user_type == "Problem Solving":

            user_question_data = ProblemSolvingInputVariable(sel_para)
            response_data = user_question_data.get_response_data()

            # request.session['input_response_data'] = response_data

            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")

        elif user_ios == "Enterprise-1":
            if glb_user_tech == 'Add Service' or glb_user_tech == 'Modify Service' or glb_user_tech == 'Delete Service':
                user_question_data = Ent_Service_Input(sel_para)
            elif glb_user_tech == 'Add Device' or glb_user_tech == 'Modify Device' or glb_user_tech == 'Delete Device':
                print 'I am here submitted Ent_Device_Input'
                user_question_data = Ent_Device_Input(sel_para)
            elif glb_user_type == 'Add Path' or glb_user_type == 'Modify Path' or glb_user_type == 'Delete Path':
                user_question_data = Ent_Path_Input(sel_para)
            else:

                service_data = {}
                if request.session['customer']:
                    file_name = '/home/ubuntu/prepro/mysite/mysite/data/' + request.session['customer'].replace(' ',
                                                                                                                '_').lower() + '/' + 'services' + '.json'
                else:
                    file_name = '/home/ubuntu/prepro/mysite/mysite/data/' + 'all' + '/' + 'services' + '.json'
                with open(file_name, 'r') as f:
                    service_data = json.load(f)
                request.session['service_data'] = service_data
                user_question_data = Enterprise_1_InputVariable(sel_para, {}, service_data)
                request.session['result_symptom_dict'] = user_question_data.get_result_symptom_dict()
            response_data = user_question_data.get_response_data()
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")
        else:
            # Old tag - TCL/TK combination
            print "I am in this else"
            sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                        'type': glb_user_type, 'user_name': current_user}
            sel_para_2 = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                          'type': glb_user_type}
            para = GetInputVariable(user_ios, user_plat, user_tech, user_type)
            # glb_sel_para = para.getUserInputsToTcl()
            intput_para = para.getTypeList()
            # glb_intput_para = para.getTypeList()
            request.session['non_common_que'] = para.get_non_common_que()
            info_dict = GetInputVariableDict(intput_para, sel_para, request.session['non_common_que'])
            response_data = info_dict.input_para_dict
            # response_data = {"column":"12","inputs": inputs}
            request.session['sel_para'] = sel_para_2
            request.session['intput_para'] = intput_para
            glb_CombinationsSubmitted = response_data['inputs']
            request.session['user_comb'] = glb_CombinationsSubmitted
            return response_data
            # return HttpResponse(json.dumps(response_data), content_type="application/json")


def TemplateAction(request, user_type):
    print "template Action working "
    com_dict = {}
    if request.GET.has_key("ios"):
        com_dict['user_ios'] = request.GET.get("ios")
        com_dict['user_plat'] = "na"
        com_dict['user_tech'] = "na"
        template_name = request.GET.get("template")
    elif request.GET.has_key("template"):
        template = request.GET.get("template")
        match = re.match(r"(.+)\((\w+)\)\s?\((.+)\)", template)
        if match:
            template_name = match.group(1).strip()
            if match.group(2) == 'FIREWALLS':
                com_dict['user_ios'] = match.group(2).title()
            elif match.group(2) == 'ACI' or match.group(2) == 'NA':
                com_dict['user_ios'] = match.group(2).upper()
            else:
                com_dict['user_ios'] = match.group(2).lower()
            com_dict['user_tech'] = match.group(3).lower()
        entry = template_db.objects.filter(ios=com_dict['user_ios'], tech=com_dict['user_tech'],
                                           template=template_name).values_list("plat").last()
        if entry:
            com_dict['user_plat'] = entry[0]
        else:
            com_dict['user_plat'] = "na"
        print com_dict
    else:
        com_dict['user_ios'] = "na"
        com_dict['user_plat'] = "na"
        com_dict['user_tech'] = "na"
    request.session['user_ios'] = com_dict['user_ios']
    request.session['user_plat'] = com_dict['user_plat']
    request.session['user_tech'] = com_dict['user_tech']
    request.session['user_type'] = user_type

    customer = request.session['customer']
    ext_dict = {}
    if request.GET.has_key("ext"):
        ext_dict["ext_name"] = request.GET.get("ext")

    if request.GET.has_key("config_action"):
        ext_dict["action"] = request.GET.get("config_action")
    request.session['ext'] = ext_dict
    if user_type == "Add New Template":
        para = GetInputsForTemplate(com_dict['user_ios'], com_dict['user_plat'], com_dict['user_tech'], user_type)
        # glb_intput_para = para.getTemplateInputs()
        request.session['input_para_list'] = para.getTemplateInputs()
        # print glb_intput_para
        info_dict = GetInputVariableDictOpration(request.session['input_para_list'], template_name)
        response_data = info_dict.input_para_dict
        return response_data
    elif user_type == "Delete Existing Template":
        request.session['input_para_list'] = ['template_name']
        info_dict = GetInputVariableDictOpration(request.session['input_para_list'], template_name)
        response_data = info_dict.input_para_dict
        return response_data
    elif user_type == "Modify Existing Template":
        para = GetInputsForTemplate(com_dict['user_ios'], com_dict['user_plat'], com_dict['user_tech'], user_type)
        request.session['input_para_list'] = para.getTemplateInputs()
        # request.session['input_para_list'] = ['template_name']
        info_dict = GetInputVariableDictOpration_new(request.session['input_para_list'], com_dict, customer,
                                                     template_name, ext_dict)
        response_data = info_dict.input_para_dict

        return response_data


@login_required(login_url='/login/')
# process all provided data, process and analyse it and based on the that modify new input form
# no need to save in the database
# should be separate for template and troubleshooting and problem solving
def resend_inputs(request):
    print 'In: resend_inputs'
    # for el in request.GET:
    #     print el
    current_user = request.user,
    # from fabric_input import *

    # Call the class to run the python and tcl script to get the input list
    # this should return the dict like following
    response_data = []
    if request.method == 'GET':
        if request.GET.get('optionselected') == '29':
            print request.GET
            old_response_data = request.GET
            input_data = Provisioning_InputData(old_response_data, request.session['tenant_data'])
            response_data = input_data.get_response_data()
            return HttpResponse(json.dumps(response_data), content_type="application/json")
            # if request.GET.get('tenant'):
            # print "selected Tenant"
            # tenant_list = get_tenant_list()
            # tenant_list[1], tenant_list[2], tenant_list[3] = tenant_list[2], tenant_list[3], tenant_list[1]
            # tenant_options = []
            # for each in tenant_list:
            # opt_dict ={}
            # opt_dict["value"] = each
            # opt_dict["label"] = each
            # opt_dict["send"] = "yes"
            # tenant_options.append(opt_dict)
            # App_list = get_app_list(request.GET.get('tenant'))
            # app_options = []
            # for each in App_list:
            # opt_dict ={}
            # opt_dict["value"] = each
            # opt_dict["label"] = each
            # opt_dict["send"] = "yes"
            # app_options.append(opt_dict)
            # epg_list = get_epg_list(request.GET.get('tenant'),request.GET.get('application'))
            # epg_options = []
            # for each in epg_list:
            # opt_dict ={}
            # opt_dict["value"] = each
            # opt_dict["label"] = each
            # epg_options.append(opt_dict)

            # response_data = {"column": "12", "newline": "no", "inputs": [
            # {"type":"radio","name":"tenant","default1":request.GET.get('tenant'),"desc":"Tenant","options":tenant_options},
            # {"type":"radio","name":"application","default1":request.GET.get('application'),"desc":"Application","options":app_options},
            # {"type":"checkbox","name":"epg","default1":request.GET.get('epg[]'),"desc":"EPG(s)","options":epg_options},
            # # {"newline": "yes", "type": "text", "name": "leaf", "desc": "Leaf", "mandatory": "yes","validate": "\d+",
            # # "example": "Ex. 102", "pattern": "", "csend": "no","extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": ""},
            # {"note": "Please select Leaf ", "type": "checkbox", "name": "leaf", "default1": request.GET.get('leaf[]'),
            # "desc": "Leaf", "mandatory": "yes", "options": [{"label": "101", "value": "101", "hide": "hide", "trigger": ["hidden", "hidden1"]}, {"label": "102", "value": "102", "hide": "hide", }, {"label": "103", "value": "103", "hide": "hide"}]},
            # # {"type":"radio","name":"port type","default1":"portchannel","desc":"Port Type","options":[{"label":"Physical","value":"physical", "hide": "hide"}]},
            # {"type":"radio","name":"porttype","default1":"portchannel","desc":"Port Type","options":[{"label":"Physical","value":"physical", "hide": "hide"},{"label":"Port Channel","value":"portchannel", "hide": "hide", "trigger": ["portch"]},{"label":"Virtual Port Channel","value":"vpc", "hide": "hide", "trigger": ["portch"]}]},

            # {"newline": "yes", "type": "text", "name": "physical_port", "desc": "Physical Port", "mandatory": "yes","validate": "[eE](\w+)?\s?\d/\d+",
            # "example": "Ex: eth 1/1", "pattern": "", "csend": "no","extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": ""},
            # {"newline": "yes", "type": "text", "name": "portch", "desc": "Port Channel Num",
            # "example": "Ex. ", "pattern": "", "csend": "no","extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1":request.GET.get('changeid') },
            # {"type":"radio","name":"switchport","default1":"access","desc":"Switch Port Mode","options":[{"label":"Access","value":"access"},{"label":"Trunk","value":"trunk"}]},
            # # {"newline": "yes", "type": "text", "name": "vlan", "desc": "Vlan", "mandatory": "yes","validate": "\d+",
            # # "example": "", "pattern": "", "csend": "no","extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": ""},
            # {"type":"radio","name":"fex","default1":"no","desc":"FEX Enable","options":[{"label":"Yes","value":"yes", "hide": "hide", "trigger": ["fexno"]},{"label":"No","value":"no", "hide": "hide"}]},
            # {"newline": "yes", "type": "text", "name": "fexno", "desc": "Fex Num", "mandatory": "yes",
            # "example": "", "pattern": "", "csend": "no","extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": ""},
            # {"type":"radio","name":"apply_config","default1":"show","desc":"Configuration Action","options":[{"label":"Show Configuration","value":"show"},{"label":"Apply Configuration","value":"apply", "hide": "hide", "trigger": ["mode"]}]},
            # {"type":"radio","name":"mode","default1":"applynow","desc":"Apply Mode","options":[{"label":"Apply Now","value":"applynow"},{"label":"Apply in Maintenance Window","value":"applymw"}]},
            # {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
            # "example": "", "pattern": "", "csend": "yes","extraclass": "", "hide": "hide", "rhide": "hide", "default1": "step1"},
            # {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "", "example": "", "pattern": "",
            # "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1":request.GET.get('optionselected')},
            # {"newline": "yes", "type": "hidden", "name": "changeid", "desc": "", "example": "", "pattern": "",
            # "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": request.GET.get('changeid') },
            # {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "", "pattern": "",
            # "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": "198.18.133.200" }
            # ]
            # }
        if request.GET.get('optionselected') == '33':
            old_response_data = request.GET
            input_data = Provisioning_BDInputData(old_response_data)
            response_data = input_data.get_response_data()
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        if request.GET.get('optionselected') == '39':
            old_response_data = request.GET
            input_data = BootstrapConfig(old_response_data)
            response_data = input_data.get_response_data()
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        if request.GET.get('optionselected') == '40':
            old_response_data = request.GET
            input_data = ProvisionTenant(old_response_data)
            response_data = input_data.get_response_data()
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        if request.GET.get('optionselected') == '41':
            old_response_data = request.GET
            input_data = ProvisionEPG(old_response_data)
            response_data = input_data.get_response_data()
            return HttpResponse(json.dumps(response_data), content_type="application/json")

    if request.method == 'GET':
        user_ios = request.session['user_ios']
        user_plat = request.session['user_plat']
        user_tech = request.session['user_tech']
        user_type = request.session['user_type']
        current_user = request.user
        print "User_IOS ", user_ios
        old_response_data = {}
        sel_para = {'ios': user_ios, 'plat': user_plat, 'tech': user_tech,
                    'type': user_type, 'user_name': current_user, 'customer': request.session['customer']}
        #
        # sel_para = {'ios': user_ios, 'plat': user_plat, 'tech': user_tech, 'type': user_type, 'user_name': current_user}
        if user_plat == "":
            user_plat = 'Any'
        # print request.session["ext_dict"]
        if user_type == 'New Object Groups':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = ''
                        for element in request.GET.getlist(el):
                            if element_value:
                                element_value += '++' + element
                            else:
                                element_value = element
                        # checkbox_value[el.split("[]")[0]] = element_value
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            resend_data = EnterpriseFirewallsTpInputVariable(sel_para, old_response_data)
            if not resend_data.error_list:
                # need to add this logic
                request.session['file_list'] = ['New_Object_Groups_asa_Exterprise_Firewalls',
                                                'New_Object_Groups_asa_Exterprise_Firewalls']
                request.session['device_list'] = resend_data.device_list
                request.session['device_num_list'] = resend_data.device_num_list
            # request.session['input_list'] = user_question_data.get_input_list()
            # request.session['feature_list'] = user_question_data.get_feature_list()
            # request.session['feature_data'] = user_question_data.get_feature_data()
            # request.session['feature_input_list'] = user_question_data.get_feature_intput_list()
            # request.session['feature_combination_list'] = user_question_data.get_feature_combination_list()
            # request.session['file_list'] = user_question_data.file_list
            # request.session['device_list'] = user_question_data.device_list
            # request.session['device_num_list'] = user_question_data.device_num_list
            # request.session['user_comb'] = response_data
            response_data = resend_data.get_response_data()
        elif user_ios == 'greenfield':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            print "Fabric Type ", fabrictype
            if fabrictype == "sda":
                new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"],
                                                              old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"], old_response_data)
            response_data = new_response_data.get_response_data()
        elif user_ios == 'zscale':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            print "Fabric Type ", fabrictype
            if fabrictype == "sda":
                new_response_data = Zscale_PlanData(request.session["ext_dict"]["ext_name"],
                                                    old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"], old_response_data)
            response_data = new_response_data.get_response_data()
        elif user_ios == 'zscale2':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            print "Fabric Type ", fabrictype
            if fabrictype == "sda":
                new_response_data = Zscale2_PlanData(request.session["ext_dict"]["ext_name"],
                                                     old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"], old_response_data)
            response_data = new_response_data.get_response_data()

        elif user_ios == 'msp':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            print "Fabric Type ", fabrictype
            if fabrictype == "sda":
                new_response_data = MSP_PlanData(request.session["ext_dict"]["ext_name"],
                                                 old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"], old_response_data)
            response_data = new_response_data.get_response_data()

        elif user_ios == 'application':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            print "Fabric Type ", fabrictype
            if fabrictype == "sda":
                new_response_data = Application_PlanData(request.session["ext_dict"]["ext_name"],
                                                         old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"], old_response_data)
            response_data = new_response_data.get_response_data()

        elif user_ios == 'mscale':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            print "Fabric Type ", fabrictype
            if fabrictype == "sda":
                new_response_data = mscale_PlanData(request.session["ext_dict"]["ext_name"],
                                                    old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"], old_response_data)
            response_data = new_response_data.get_response_data()
        elif user_ios == 'sd_wan':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            # print "Fabric Type ", fabrictype
            # print "ext_dict Type ", request.session["ext_dict"]
            # if "_" in request.session["ext_dict"]["ext_name"]:
            #     request.session["ext_dict"]["ext_name"] = request.session["ext_dict"]["ext_name"].split("_")[0]
            if fabrictype == "sda":
                print "??????????"
                new_response_data = SD_Wan_Deployment_Planning(request.session["ext_dict"]["ext_name"],
                                                               old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = SD_Wan_Deployment_Planning(request.session["ext_dict"]["ext_name"],
                                                               old_response_data)
            response_data = new_response_data.get_response_data()
        elif user_ios == 'cisco_ise':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            print "Fabric Type ", fabrictype
            print
            if fabrictype == "sda":
                new_response_data = CiscoISE_PlanData(request.session["ext_dict"]["ext_name"],
                                                      old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = CiscoISE_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            response_data = new_response_data.get_response_data()
        elif user_ios == 'brownfield':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            fabrictype = request.session["fabrictype"]
            print "Fabric Type ", fabrictype
            if fabrictype == "sda":
                new_response_data = BrownFieldCampus_SDA_Data(request.session["ext_dict"]["ext_name"],
                                                              old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = BrownFieldCampus_NON_SDA_Data(request.session["ext_dict"]["ext_name"],
                                                                  old_response_data)
            response_data = new_response_data.get_response_data()
        elif user_ios == 'network_assurance':
            print "User_IOS ", user_ios
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            # new_response_data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], old_response_data)
            fabrictype = request.session["fabrictype"]
            print "Fabric Type ", fabrictype
            if fabrictype == "sda":
                new_response_data = Network_assurance_SDA_data(request.session["ext_dict"]["ext_name"],
                                                               old_response_data)
            elif fabrictype == "non_sda":
                new_response_data = Network_assurance_NON_SDA_Data(request.session["ext_dict"]["ext_name"],
                                                                   old_response_data)
            response_data = new_response_data.get_response_data()
        elif user_ios == 'Multiple_Devices' or user_ios == 'Multiple Devices':
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = ''
                        for element in request.GET.getlist(el):
                            if element_value:
                                element_value += '++' + element
                            else:
                                element_value = element
                        # checkbox_value[el.split("[]")[0]] = element_value
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            user_question_data = MultiDeviceTpInputVariable(sel_para, old_response_data)
            request.session['input_list'] = user_question_data.user_para_list
            # request.session['feature_list'] = user_question_data.get_feature_list()
            # request.session['feature_data'] = user_question_data.get_feature_data()
            # request.session['feature_input_list'] = user_question_data.get_feature_intput_list()
            # request.session['feature_combination_list'] = user_question_data.get_feature_combination_list()
            request.session['file_list'] = user_question_data.file_list
            request.session['device_list'] = user_question_data.device_list
            request.session['device_num_list'] = user_question_data.device_num_list
            response_data = user_question_data.get_response_data()
            request.session['user_comb'] = response_data
        elif request.session.has_key('tp_list') and request.session['tp_list'].__contains__(user_type):
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = ''
                        for element in request.GET.getlist(el):
                            if element_value:
                                element_value += '++' + element
                            else:
                                element_value = element
                        # checkbox_value[el.split("[]")[0]] = element_value
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            print old_response_data
            # print request.session['input_response_data']
            if "ACI" in user_type:

                user_question_data = ACI_Resend_InputVariable(request, sel_para, old_response_data,
                                                              request.session['input_response_data'])
                response_data = user_question_data.get_response_data()
                # request.session['input_response_data'] = response_data
            else:

                user_question_data = Firewall_Resend_InputVariable(request, sel_para, old_response_data,
                                                                   request.session['input_response_data'])
            # response_data = user_question_data.get_response_data()
            response_data = user_question_data.get_response_data()
        elif user_ios == "Enterprise-1":
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = ''
                        for element in request.GET.getlist(el):
                            if element_value:
                                element_value += '++' + element
                            else:
                                element_value = element
                        # checkbox_value[el.split("[]")[0]] = element_value
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            if user_tech == 'Add Service' or user_tech == 'Modify Service' or user_tech == 'Delete Service':
                user_question_data = Ent_Service_Input(sel_para, old_response_data)
            elif user_tech == 'Add Device' or user_tech == 'Modify Device' or user_tech == 'Delete Device':
                print 'view Ent_Device_Input'
                user_question_data = Ent_Device_Input(sel_para, old_response_data)
            elif user_type == 'Add Path' or user_type == 'Modify Path' or user_type == 'Delete Path':
                user_question_data = Ent_Path_Input(sel_para, old_response_data)
            else:
                user_question_data = Enterprise_1_InputVariable(sel_para, old_response_data,
                                                                request.session['service_data'])
            response_data = user_question_data.get_response_data()
        elif user_type == "Problem Solving":
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    old_response_data[el] = request.GET.get(el)
            user_question_data = ProblemSolvingInputVariable(sel_para, old_response_data)
            response_data = user_question_data.get_response_data()
        elif user_ios == "apic_services":
            # old input data
            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            old_response_data[new_el] = element_value
                    else:
                        old_response_data[el] = request.GET.get(el)
            epic_service = request.GET.get('apic_services')
            port_type = request.GET.get('port_type')
            action = request.GET.get('action')
            if action == "De-Provision" or epic_service == "policy_grp" or action == "add_modify_tenent" or epic_service == "port_channel_group":
                aci_class = ACI_Inputs(epic_service, port_type, action, old_response_data)
                response_data = aci_class.get_response_data()
            else:
                request.session["ext_dict"] = {}
                request.session["ext_dict"]["action"] = action
                user_question_data = ACI_Resend_InputVariable(request, sel_para, old_response_data,
                                                              request.session['input_response_data'])
                response_data = user_question_data.get_response_data()
                # request.session['input_response_data'] = response_data
            # response_data = aci_class.get_response_data()
        else:

            old_response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    old_response_data[el] = request.GET.get(el)
            info_dict = GetInputVariableDict(request.session['intput_para'], sel_para,
                                             request.session['non_common_que'], old_response_data)
            response_data = info_dict.input_para_dict
            glb_CombinationsSubmitted = response_data
            request.session['user_comb'] = glb_CombinationsSubmitted
    return HttpResponse(json.dumps(response_data), content_type="application/json")


def Resetsubmited(request):
    print 'Resetsubmited'
    # Fetch (reset) -> loads previouse values
    user_ios = request.session['user_ios']
    user_plat = request.session['user_plat']
    user_tech = request.session['user_tech']
    user_type = request.session['user_type']
    current_user = request.user
    customer = ""
    device = ""
    current_user = request.user
    tp_list = []
    template_data = template_db.objects.filter(ios=user_ios, plat=user_plat, tech=user_tech).values_list("template",
                                                                                                         "type").all()
    if template_data:
        for each in template_data:
            if user_ios in ["nx", "ios", "xr"] and str(each[1]) == "2":
                continue
            else:
                tp_list.append(each[0])
    if request.method == 'GET':
        user_sel = {}
        # user_ios = request.GET.get('c1')
        if request.GET.get('c1') == 'ASA Firewall':
            user_ios = 'Firewalls'
        # user_plat = request.GET.get('c2')
        # user_type = request.GET.get('c4')
        # request.session['user_ios'] = request.GET.get('c1')
        # user_sel['ios'] = request.GET.get('c1')
        user_sel['ios'] = user_ios
        # request.session['user_plat'] = request.GET.get('c2')
        user_sel['plat'] = user_plat
        if user_tech == 'VXLAN (BGP-EVPN)':
            tech_value = 'VXLAN'
        elif user_tech == 'Layer2 Forwarding':
            tech_value = 'L2FWD'
        elif user_tech == 'Multicast':
            tech_value = 'MCAST'
        elif user_tech == 'Layer2 Multicast (IGMP)':
            tech_value = 'L2MCAST'
        else:
            tech_value = user_tech
        request.session['user_tech'] = tech_value
        user_sel['tech'] = tech_value
        # request.session['user_type'] = request.GET.get('c4')
        if user_plat == "":
            user_plat = 'Any'
        glb_user_type = user_type

        request.session['user_plat'] = user_plat
        if tp_list.__contains__(user_type) or not user_type.find('Troubleshooting') == -1 or user_ios == 'JUNOS' \
                or user_ios == 'F5' or user_ios == 'CP':
            response_data = request.session['user_comb']
            response_data = get_new_response_data_tp(response_data, current_user, request.session['user_tech'],
                                                     request.session['user_type'], customer, device)
        elif glb_user_type == "Problem Solving":
            response_data = request.session['user_comb']
            response_data = get_new_response_data_tp_old(response_data, current_user, customer, device)
        elif user_ios == 'Multiple_Devices':
            response_data = request.session['user_comb']
            response_data = get_new_response_data_tp(response_data, current_user, request.session['user_tech'],
                                                     request.session['user_type'], customer, device)
        elif user_ios == "Enterprise-1":
            response_data = request.session['user_comb']
            response_data = get_new_response_data_tp(response_data, current_user, customer, device)
        else:
            response_data = request.session['user_comb']

            response_data = get_new_response_data_ts(response_data, current_user, user_sel, customer, device)
        return HttpResponse(json.dumps(response_data), content_type="application/json")


def LoadModifyTemplate(request, user_ios="", user_plat="", user_tech="", user_type=""):
    from mysite.models import CronDB
    print 'LoadModifyTemplate'
    # Fetch (reset) -> loads previouse values
    current_user = request.user
    taskid = request.session['taskid']
    subtaskid = request.session['subtaskid']
    customer = ""
    device = ""
    tp_list = []
    # print " USER IOS ",user_ios
    template_data = template_db.objects.filter(ios=user_ios, plat=user_plat, tech=user_tech).values_list("template",
                                                                                                         "type").all()
    if template_data:
        for each in template_data:
            if user_ios in ["nx", "ios", "xr"] and str(each[1]) == "2":
                continue
            else:
                tp_list.append(each[0])
    # print tp_list
    if request.method == 'GET':
        user_sel = {}
        if request.GET.get('c1') == 'ASA Firewall':
            user_ios = 'Firewalls'
        user_sel['ios'] = user_ios
        user_sel['plat'] = user_plat
        if user_tech == 'VXLAN (BGP-EVPN)':
            tech_value = 'VXLAN'
        elif user_tech == 'Layer2 Forwarding':
            tech_value = 'L2FWD'
        elif user_tech == 'Multicast':
            tech_value = 'MCAST'
        elif user_tech == 'Layer2 Multicast (IGMP)':
            tech_value = 'L2MCAST'
        else:
            tech_value = user_tech
        request.session['user_tech'] = tech_value
        user_sel['tech'] = tech_value
        if user_ios == "greenfield":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            if fabrictype == "sda":
                db_inputs = {}
                print request.session["ext_dict"]["ext_name"]
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                             subtaskid=request.session[
                                                                                                 'subtaskid']).all()
                if q:
                    for tpl in q:
                        if "[" in tpl[1]:
                            val = json.loads(tpl[1])
                        else:
                            val = tpl[1]
                        db_inputs[tpl[0]] = val
                # print db_inputs
                data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"], db_inputs)
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_ios == "zscale":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            if fabrictype == "sda":
                db_inputs = {}
                print request.session["ext_dict"]["ext_name"]
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                             subtaskid=request.session[
                                                                                                 'subtaskid']).all()
                if q:
                    for tpl in q:
                        if "[" in tpl[1]:
                            val = json.loads(tpl[1])
                        else:
                            val = tpl[1]
                        db_inputs[tpl[0]] = val
                # print db_inputs
                data = Zscale_PlanData(request.session["ext_dict"]["ext_name"], db_inputs)
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_ios == "zscale2":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            if fabrictype == "sda":
                db_inputs = {}
                print request.session["ext_dict"]["ext_name"]
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                             subtaskid=request.session[
                                                                                                 'subtaskid']).all()
                if q:
                    for tpl in q:
                        if "[" in tpl[1]:
                            val = json.loads(tpl[1])
                        else:
                            val = tpl[1]
                        db_inputs[tpl[0]] = val
                # print db_inputs
                data = Zscale2_PlanData(request.session["ext_dict"]["ext_name"], db_inputs)
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data

        if user_ios == "msp":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            if fabrictype == "sda":
                db_inputs = {}
                print request.session["ext_dict"]["ext_name"]
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                             subtaskid=request.session[
                                                                                                 'subtaskid']).all()
                if q:
                    for tpl in q:
                        if "[" in tpl[1]:
                            val = json.loads(tpl[1])
                        else:
                            val = tpl[1]
                        db_inputs[tpl[0]] = val
                # print db_inputs
                data = MSP_PlanData(request.session["ext_dict"]["ext_name"], db_inputs)
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data

        if user_ios == "application":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            if fabrictype == "sda":
                db_inputs = {}
                print request.session["ext_dict"]["ext_name"]
                forword_dict = {'app_name': request.GET.get('applic_name')}
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                             subtaskid=request.session[
                                                                                                 'subtaskid']).all()
                if q:
                    for tpl in q:
                        if "[" in tpl[1]:
                            val = json.loads(tpl[1])
                        else:
                            val = tpl[1]
                        db_inputs[tpl[0]] = val
                # print db_inputs
                db_inputs.update(forword_dict)
                data = Application_PlanData(request.session["ext_dict"]["ext_name"], db_inputs)
                print "Applikcation "
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data

        if user_ios == "mscale":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            if fabrictype == "sda":
                db_inputs = {}
                print request.session["ext_dict"]["ext_name"]
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                             subtaskid=request.session[
                                                                                                 'subtaskid']).all()
                if q:
                    for tpl in q:
                        if "[" in tpl[1]:
                            val = json.loads(tpl[1])
                        else:
                            val = tpl[1]
                        db_inputs[tpl[0]] = val
                # print db_inputs
                data = mscale_PlanData(request.session["ext_dict"]["ext_name"], db_inputs)
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_ios == "mscale2":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            # fabrictype = request.session["fabrictype"]
            fabrictype = "sda"
            customer_type = []
            for el in request.GET:
                if "[" in el and "CustomerType" in el:
                    customer_type = request.GET.getlist(el)
            if fabrictype == "sda":
                db_inputs = {}
                print request.session["ext_dict"]["ext_name"]
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                             subtaskid=request.session[
                                                                                                 'subtaskid']).all()
                if q:
                    for tpl in q:
                        if "[" in tpl[1]:
                            val = json.loads(tpl[1])
                        else:
                            val = tpl[1]
                        db_inputs[tpl[0]] = val
                # print db_inputs
                data = Mscale2_PlanData(request.session["ext_dict"]["ext_name"], customer_type, db_inputs)
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = Zscale_nonSDA(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_ios == "brownfield":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            fabrictype = request.session["fabrictype"] = "sda"
            if fabrictype == "sda":
                print request.session["ext_dict"]["ext_name"]
                data = BrownFieldCampus_SDA_Data(request.session["ext_dict"]["ext_name"])
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = BrownFieldCampus_NON_SDA_Data(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_ios == "sd_wan":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            fabrictype = request.session["fabrictype"] = "sda"
            if fabrictype == "sda":
                db_inputs = {}
                print request.session["ext_dict"]["ext_name"]
                q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                             subtaskid=request.session[
                                                                                                 'subtaskid'],
                                                                                             customer=request.session[
                                                                                                 'customer']).all()
                if q:
                    for tpl in q:
                        if "[" in tpl[1]:
                            val = json.loads(tpl[1])
                        else:
                            val = tpl[1]
                        db_inputs[tpl[0]] = val
                data = SD_Wan_Deployment_Planning(request.session["ext_dict"]["ext_name"], db_inputs)
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = BrownFieldCampus_NON_SDA_Data(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_ios == "hardware_refresh":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            fabrictype = request.session["fabrictype"] = "sda"
            if fabrictype == "sda":
                print request.session["ext_dict"]["ext_name"]
                data = HardwareRefresh_SDA_Data(request.session["ext_dict"]["ext_name"])
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = BrownFieldCampus_NON_SDA_Data(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_ios == "cisco_ise":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            fabrictype = request.session["fabrictype"] = "sda"
            if fabrictype == "sda":
                print request.session["ext_dict"]["ext_name"]
                data = CiscoISE_PlanData(request.session["ext_dict"]["ext_name"])
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = BrownFieldCampus_NON_SDA_Data(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_ios == "network_assurance":
            request.session['user_tech'] = "na"
            # if user_plat == "Plan":
            fabrictype = request.session["fabrictype"]
            if fabrictype == "sda":
                print request.session["ext_dict"]["ext_name"]
                data = Network_assurance_SDA_data(request.session["ext_dict"]["ext_name"])
                print "SDA"
                return data.get_response_data()
            elif fabrictype == "non_sda":
                data = Network_assurance_NON_SDA_Data(request.session["ext_dict"]["ext_name"])
                print "NON-SDA"
                return data.get_response_data()
            # print response_data
            # return response_data
        if user_plat == "":
            user_plat = 'Any'
        glb_user_type = user_type
        request.session['user_comb'] = CombinationsSubmittedTemplate(request, user_ios, user_plat, user_tech, user_type)
        request.session['user_plat'] = user_plat
        if tp_list.__contains__(user_type) or not user_type.find('Troubleshooting') == -1 or user_ios == 'JUNOS' \
                or user_ios == 'F5' or user_ios == 'CP':
            response_data = request.session['user_comb']
            response_data = get_new_response_data_tp(response_data, current_user, request.session['user_tech'],
                                                     request.session['user_type'], taskid, subtaskid, customer, device)
        elif glb_user_type == "Problem Solving":
            response_data = request.session['user_comb']
            response_data = get_new_response_data_tp_old(response_data, current_user, taskid, subtaskid, customer,
                                                         device)
        elif user_ios == 'Multiple_Devices':
            response_data = request.session['user_comb']
            response_data = get_new_response_data_tp(response_data, current_user, request.session['user_tech'],
                                                     request.session['user_type'], taskid, subtaskid, customer, device)
        elif user_ios == "Enterprise-1":
            response_data = request.session['user_comb']
            response_data = get_new_response_data_tp(response_data, current_user, taskid, subtaskid, customer, device)
        else:
            response_data = request.session['user_comb']
            response_data = get_new_response_data_ts(response_data, current_user, user_sel, taskid, subtaskid, customer,
                                                     device)
        return response_data


# topology_list ['t1': [{'app': ['epg1', 'egp2']}, [{'app': ['epg1', 'egp2']}, ]

def InputsSubmitted(request):
    '''
    Description:
        Store the inputs data to database and load the output template according to option selected.
	Inputs:
		request
	Output:
        Loads the output template according to option selected.

    :param request:
    :return:
    '''
    from mysite.models import template_db
    from mysite.models import CronDB
    from mysite.models import CronDB
    from mysite.models import UserInputValueDb
    import json
    taskid = "00"
    subtaskid = "00"
    current_user = request.user
    customer = current_user.id
    request.session["ts_flag"] = False
    typereq = request.session['service_request_type']
    if request.session.has_key('taskid'):
        taskid = request.session["taskid"]
    if request.session.has_key('subtaskid'):
        subtaskid = request.session["subtaskid"]
    response_data = {}

    for el in request.GET:
        # print el , ">>>><<<<<****&&&&&$$$$###@@@@", request.GET.get(el)
        if request.GET.get(el):
            if "[" in el:
                element_value = request.GET.getlist(el)
                # print element_value,">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                if element_value:
                    new_el = el.split("[]")[0]
                    response_data[new_el] = json.dumps(element_value)
            else:
                response_data[el] = request.GET.get(el)
        else:
            response_data[el] = request.GET.get(el)

    for k, v in response_data.iteritems():
        # print k + " is -- ", v
        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=subtaskid, field_name=k,
                                           customer=request.session['customer']):
            # print ">>>>>> here ", k
            uvid = UserInputValueDb.objects.filter(taskid=taskid, subtaskid=subtaskid, field_name=k,
                                                   customer=request.session['customer']).update(field_value=v)
        else:
            uivd, created = UserInputValueDb.objects.update_or_create(taskid=taskid, subtaskid=subtaskid, field_name=k,
                                                                      field_value=v,
                                                                      customer=request.session['customer'])
        # print ">>>>>>>>>>>>>>>>", uivd, created
    if request.method == "GET" and request.GET.has_key('optionselected'):
        if request.GET.get('optionselected') == "29":
            import sys
            sys.path.append("/home/ubuntu/prepro/mysite/env1/lib/python2.7")
            sys.path.append("/home/ubuntu/prepro/mysite/env1/lib/python2.7/lib-dynload")
            sys.path.append("/home/ubuntu/prepro/mysite/env1/lib/python2.7/lib-old")
            sys.path.append("/home/ubuntu/prepro/mysite/env1/lib/python2.7/lib-tk")
            # return render(request, 'notification.html', {'output_list':  sys.path,'class':'alert-danger'})
            # sys.path

            if request.GET.get('porttype') == "physical":
                file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configure Physical Ports.txt"
            elif request.GET.get('porttype') == "portchannel":
                file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuring Port Channels in Leaf Nodes.txt"
            elif request.GET.get('porttype') == "vpc":
                file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuring Virtual Port Channels in Leaf Nodes.txt"
            out_dict = parse_configuration(file)
            config_list = out_dict['config']
            verify_list = out_dict['precheck'] + out_dict['postcheck']
            activate_config = out_dict["activate_config"]
            rollback = out_dict['rollback']
            appling_config = out_dict['precheck'] + out_dict['config'] + out_dict['postcheck']
            # original values
            newlistconfig = changetohtmltags(request, appling_config)
            newlistactivate = changetohtmltags(request, activate_config)
            newlistverify = changetohtmltags(request, verify_list)
            newlistrollback = changetohtmltags(request, rollback)
            change_variables(request, config_list)
            change_variables(request, appling_config)
            change_variables(request, activate_config)
            change_variables(request, rollback)
            change_variables(request, verify_list)
            write_config_to_file(request, appling_config)
            configlist = get_config_from_file(request)
            print "all good 1"
            write_config_to_file(request, verify_list, 2)
            verify_list = get_config_from_file(request, 2)
            print "all good 2"
            write_config_to_file(request, rollback, 3)
            rollback_list = get_config_from_file(request, 3)
            print "all good 3"
            outputlist = {}
            outputlist["Implementation Plan"] = newlistconfig
            outputlist["Pre & Post Verification"] = newlistverify
            outputlist["Activate Configuration"] = newlistactivate
            outputlist["Roll-back Configuration"] = newlistrollback
            insert_entry(taskid, subtaskid, customer, configlist, rollback_list, activate_config, 4, 2, 1)
            return render(request, 'new_aci_config_tabs.html',
                          {'output_list': outputlist, 'action': "fabric_apply", "id_flag": request.session['id_flag']})
        elif request.GET.get('optionselected') == "31":
            # filtername = request.GET.get('filtername')
            # Upload data
            uploadtype = request.GET.get('upload_type')
            taskid = request.GET.get('taskid')
            subtaskid = request.GET.get('subtaskid')
            ip = request.GET.get('ip')
            config_action = request.GET.get('apply_config')
            return render(request, 'apic_dropzone.html',
                          {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'ip': ip,
                           'config_action': config_action, 'mode': request.GET.get('mode')})
        elif request.GET.get('optionselected') == "33":

            file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configure_bridge_domain.txt"
            out_dict = parse_configuration(file)
            config_list = out_dict['config']
            verify_list = out_dict['precheck'] + out_dict['postcheck']
            rollback = out_dict['rollback']
            appling_config = out_dict['precheck'] + out_dict['config'] + out_dict['postcheck']
            newlistconfig = changetohtmltags(request, appling_config)
            newlistverify = changetohtmltags(request, verify_list)
            newlistrollback = changetohtmltags(request, rollback)
            change_variables(request, config_list)
            change_variables(request, appling_config)
            change_variables(request, rollback)
            change_variables(request, verify_list)
            write_config_to_file(request, appling_config)
            write_config_to_file(request, verify_list, 2)
            write_config_to_file(request, rollback, 3)
            configlist = get_config_from_file(request)
            print "all good 1"
            verify_list = get_config_from_file(request, 2)
            print "all good 2"
            rollback_list = get_config_from_file(request, 3)
            print "all good 3"
            outputlist = {}
            outputlist["Implementation Plan"] = newlistconfig
            outputlist["Pre & Post Verification"] = newlistverify
            outputlist["Roll-back Configuration"] = newlistrollback
            insert_entry(taskid, subtaskid, customer, configlist, rollback_list, [], 4, 2, 1)
            return render(request, 'new_aci_config_tabs.html',
                          {'output_list': outputlist, 'action': "fabric_apply", "id_flag": request.session['id_flag']})
        elif request.GET.get('optionselected') == "36":
            from mysite.fabric_functions import pexpect_healthcheck
            leaf = "leaf " + request.GET.get('leaf[]')
            healthscore = 100
            # healthscore = pexpect_healthcheck(leaf)
            # healthscore = 80
            if healthscore != False:
                file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuration_leaf_switch.txt"
                out_dict = parse_configuration(file)
                config_list = out_dict['config']
                verify_list = out_dict['precheck'] + out_dict['postcheck']
                applying_config = out_dict['precheck'] + out_dict['config'] + out_dict['postcheck']
                rollback = out_dict['rollback']
                newlistconfig = changetohtmltags(request, applying_config)
                newlistverify = changetohtmltags(request, verify_list)
                newlistrollback = changetohtmltags(request, rollback)
                write_config_to_file(request, applying_config)
                write_config_to_file(request, verify_list, 2)
                write_config_to_file(request, rollback, 3)
                configlist = get_config_from_file(request)
                verify_list = get_config_from_file(request, 2)
                rollback_list = get_config_from_file(request, 3)
                print healthscore
                outputlist = {}
                outputlist["Leaf Status/Availability"] = [
                    "<strong>Leaf ID:</strong> <span style='text-transform:capitalize;'>" + "</span>",
                    "<strong>Health Score:</strong> " + str(healthscore), "<strong>Leaf Status:</strong> Available"]
                outputlist["Implementation Plan"] = newlistconfig
                outputlist["Pre & Post Verification"] = newlistverify
                outputlist["Rollback Configuration"] = newlistrollback
                insert_entry(taskid, subtaskid, customer, configlist, rollback, [], 4, 2, 1)
                return render(request, 'new_aci_config_tabs.html', {'output_list': outputlist, 'action': "fabric_apply",
                                                                    "id_flag": request.session['id_flag']})
        elif request.GET.get('optionselected') == "38":

            if request.GET.get('porttype') == "physical":
                file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configure Physical Ports.txt"
            elif request.GET.get('porttype') == "portchannel":
                file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuring Port Channels in Leaf Nodes.txt"
            elif request.GET.get('porttype') == "vpc":
                file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuring Virtual Port Channels in Leaf Nodes.txt"
            vlanid = request.GET.get('vlanid')
            if "," in vlanid:
                vlanid = vlanid.split(",")
            elif "-" in vlanid:
                vlanrange = vlanid.split("-")
                vlanid = []
                for id in range(int(vlanrange[0]), int(vlanrange[1]) + 1):
                    vlanid.append(str(id))
            else:
                vlanid = [vlanid]
            print vlanid
            if get_vlan_id2(vlanid) == False:
                return render(request, 'notification.html',
                              {'output_list': "Vlan Information Not Found", 'class': 'alert-danger'})
            else:
                out_dict = parse_configuration(file)
                config_list = out_dict['config']
                verify_list = out_dict['precheck'] + out_dict['postcheck']
                activate_config = out_dict["activate_config"]
                rollback = out_dict['rollback']
                appling_config = out_dict['precheck'] + out_dict['config'] + out_dict['postcheck']
                newlistconfig = changetohtmltags(request, appling_config)
                newlistactivate = changetohtmltags(request, activate_config)
                newlistverify = changetohtmltags(request, verify_list)
                newlistrollback = changetohtmltags(request, rollback)
                change_variables(request, config_list)
                change_variables(request, appling_config)
                change_variables(request, activate_config)
                change_variables(request, rollback)
                change_variables(request, verify_list)
                write_config_to_file(request, appling_config)
                write_config_to_file(request, verify_list, 2)
                write_config_to_file(request, rollback, 3)
                configlist = get_config_from_file(request)
                verify_list = get_config_from_file(request, 2)
                rollback_list = get_config_from_file(request, 3)
                outputlist = {}
                outputlist["Implementation Plan"] = newlistconfig
                outputlist["Pre & Post Verification"] = newlistverify
                outputlist["Activate Configuration"] = newlistactivate
                outputlist["Roll-back Configuration"] = newlistrollback
                # insert_entry(taskid,subtaskid,customer,configlist,rollback_list,activate_config,4,2,1)
                insert_entry(taskid, subtaskid, customer, configlist, rollback_list, activate_config, 4, 2, 1)
                return render(request, 'new_aci_config_tabs.html', {'output_list': outputlist, 'action': "fabric_apply",
                                                                    "id_flag": request.session['id_flag']})
        elif request.GET.get('optionselected') == "40":
            print "am here"

            file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/configure_tenant_application.txt"
            out_dict = parse_configuration(file)
            config_list = out_dict['config']
            rollback = out_dict['rollback']
            newlistconfig = changetohtmltags(request, config_list)
            newlistrollback = changetohtmltags(request, rollback)
            change_variables(request, config_list)
            change_variables(request, rollback)
            write_config_to_file(request, config_list)
            write_config_to_file(request, rollback, 3)
            configlist = get_config_from_file(request)

            rollback_list = get_config_from_file(request, 3)
            outputlist = {}
            outputlist["Implementation Plan"] = newlistconfig
            outputlist["Roll-back Configuration"] = newlistrollback
            insert_entry(taskid, subtaskid, customer, configlist, rollback_list, [], 4, 2, 1)
            return render(request, 'new_aci_config_tabs.html',
                          {'output_list': outputlist, 'action': "fabric_apply", "id_flag": request.session['id_flag']})
        elif request.GET.get('optionselected') == "41":
            from mysite.models import CronDB

            file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/configure_epg.txt"
            out_dict = parse_configuration(file)
            config_list = out_dict['config']
            rollback = out_dict['rollback']
            appling_config = []
            change_variables(request, config_list)
            change_variables(request, rollback)
            newlistconfig = changetohtmltags(request, config_list)
            newlistrollback = changetohtmltags(request, rollback)
            write_config_to_file(request, config_list)
            write_config_to_file(request, rollback, 3)
            configlist = get_config_from_file(request)
            rollback_list = get_config_from_file(request, 3)
            outputlist = {}
            outputlist["Implementation Plan"] = newlistconfig
            outputlist["Roll-back Configuration"] = newlistrollback
            insert_entry(taskid, subtaskid, customer, configlist, rollback_list, [], 4, 2, 1)
            return render(request, 'new_aci_config_tabs.html',
                          {'output_list': outputlist, 'action': "fabric_apply", "id_flag": request.session['id_flag']})
        elif request.GET.get('optionselected') == "44":

            from .models import CronDB
            import json
            changeid = request.GET.get('changeid')
            ip = request.GET.get('ip')
            print changeid, ip
            entry = CronDB.objects.values_list('command_list').filter(changeid=changeid, ip=ip).last()
            if entry:
                print entry
                configlist = json.loads(entry[0])
            else:
                msg = "Change-ID Not Found"
                return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
            if request.GET.get('apply_config') == "show":
                outputlist = {}
                outputlist["Implementation Plan"] = configlist
                # insert_entry(request,configlist,rollback_list,4,2,1)
                return render(request, 'tabs.html', {'output_list': outputlist, 'action': "fabric_apply"})
            elif request.GET.get('apply_config') == "apply":
                if request.GET.get('mode') == "applymw":
                    # insert_entry(request,configlist,rollback)
                    return render(request, 'apply_now.html',
                                  {'action': "applymw", 'output_list': "Configuration Scheduled.",
                                   'class': 'alert-success'})
                else:
                    return render(request, 'apply_now.html',
                                  {'action': "fabric_apply", 'output_list': "Configuration Scheduled.",
                                   'class': 'alert-success'})
                    insert_entry(taskid, subtaskid, config_list, rollback, [], 0, 0, 1)
                    abc = config_fun(config_list, request)
                    message = abc["message"]
                    class1 = abc["class1"]
                    return render(request, 'config_applied.html',
                                  {'output_list': message, 'changeid': request.GET.get('changeid'),
                                   'ip': request.GET.get('ip'), 'class': class1})
        elif request.GET.get('optionselected') == "45":
            print "i m in Change ID deprovisioning "

            import json
            changeid = request.GET.get('changeid')
            ip = request.GET.get('ip')
            entry = CronDB.objects.values_list('rollback_commands').filter(changeid=changeid, ip=ip).order_by(
                'timestamp').last()
            if entry:
                print entry
                rollback = json.loads(entry[0])
            else:
                msg = "Data not found for ChangeID -" + changeid
                return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
            if request.GET.get('apply_config') == "show":
                outputlist = {}
                outputlist["Roll-back Configuration"] = rollback
                insert_entry(taskid, subtaskid, "", rollback, [], 4, 2, 1)
                return render(request, 'tabs.html', {'output_list': outputlist, 'action': "rollback_apply"})
            elif request.GET.get('apply_config') == "apply":
                return render(request, 'apply_now.html',
                              {'action': "rollback_apply", 'output_list': "Configuration Scheduled.",
                               'class': 'alert-success'})
                abc = config_fun(rollback, request)
                message = abc["message"]
                class1 = abc["class1"]
                return render(request, 'config_applied.html',
                              {'output_list': message, 'changeid': request.GET.get('changeid'),
                               'ip': request.GET.get('ip'), 'class': class1})
        elif request.GET.get('optionselected') == "47":
            print "i m in Acrivate configuration "
            from mysite.models import TenantDB

            import json
            taskid = request.GET.get('taskid')
            # changeid = request.GET.get('changeid')
            ip = request.GET.get('ip')
            subtaskid = request.GET.get('subtaskid')
            activate_cmd = []
            entry = TenantDB.objects.values_list('activate_cmd_list').filter(pcnum__contains=taskid + '_').all()
            if entry:
                for each in entry:
                    print each
                    activate_cmd += json.loads(each[0])
                    activate_cmd += ["!<-- ------------------------------------ -->!"]
            else:
                msg = "No Entries found for TaskID -" + changeid
                return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
            outputlist = {}
            outputlist["Activate Configuration"] = activate_cmd
            insert_entry(taskid, subtaskid, customer, [], [], activate_cmd, 4, 2, 1)
            return render(request, 'new_aci_config_tabs.html',
                          {'output_list': outputlist, 'action': "cmplt_activate_apply",
                           "id_flag": request.session['id_flag']})

    glb_user_ios = ""
    glb_user_plat = ""
    glb_user_tech = ""
    glb_user_type = ""
    if request.session.has_key("user_ios"):
        glb_user_ios = request.session['user_ios']
    if glb_user_ios == 'ASA Firewall':
        glb_user_ios = 'Firewalls'
    if request.session.has_key("user_plat"):
        glb_user_plat = request.session['user_plat']
    if request.session.has_key("user_tech"):
        glb_user_tech = request.session['user_tech']
    if request.session.has_key("user_type"):
        glb_user_type = request.session['user_type']
    current_user = request.user
    customer = request.session['customer']
    device = ""
    if request.session.has_key("taskid"):
        taskid = request.session['taskid']
        subtaskid = request.session['subtaskid']
    else:
        taskid = ""
        subtaskid = ""
    if not request.session.has_key("devices"):
        request.session['devices'] = ""

    tp_list = []
    template_data = template_db.objects.filter(ios=glb_user_ios, plat=glb_user_plat, tech=glb_user_tech).values_list(
        "template", "type").all()
    if template_data:
        for each in template_data:
            if glb_user_ios in ["nx", "ios", "xr"] and str(each[1]) == "2":
                continue
            else:
                tp_list.append(each[0])
    print 'In InputsSubmitted 2017'
    # print '>>>>>>>>', request.GET.has_key('service')
    # print glb_user_ios

    if request.method == 'GET':
        sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech, 'type': glb_user_type,
                    'user_name': current_user, 'customer': customer}
        print 'In InputsSubmitted 2017', sel_para
        input_user_validation_data = user_input_validation(sel_para, request.GET)
        # print request.session["tp_list"]
        if input_user_validation_data:
            # response_data = {"status":"0","inputs":[{"id":"tenant_vlan_num","message":"Please Enter Email Address"}]}
            response_data = {"status": "0", "inputs": input_user_validation_data}
            import json
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.has_key("topolody_query"):
            parameter = request.GET.get("parameter")
            file_name = "/home/ubuntu/prepro/mysite/mysite/data/kaiser_apic_data/apic_data.json"
            if parameter == "tenant":
                op_dict = {}
                tenant_list = get_apic_data().get("tenant")
                for each in tenant_list:
                    op_dict[each] = {}
                return render(request, 'apic_query.html', {'output_list': op_dict, 'parameter': parameter})
            elif parameter == "app":
                op_dict = {}
                tenant = request.GET.get("tenant")
                with open(file_name, 'r') as f:
                    tenant_data = json.load(f)
                    if tenant == "All":
                        all_data = tenant_data.get("10.233.29.21").get("tenant")
                        for k, v in all_data.iteritems():
                            op_dict[k] = {}
                            for keys in v:
                                print keys
                                op_dict[k][keys] = {}
                                # print k,">>>>>>>",v
                    else:
                        all_data = tenant_data.get("10.233.29.21").get("tenant")
                        for key, value in all_data.iteritems():
                            if tenant == key:
                                op_dict[key] = {}
                                for k in value:
                                    op_dict[key][k] = {}
                print op_dict
                return render(request, 'apic_query.html', {'output_list': op_dict, 'parameter': parameter})
            elif parameter == "epg":
                op_dict = {}
                tenant = request.GET.get("tenant")
                with open(file_name, 'r') as f:
                    tenant_data = json.load(f)
                    if tenant == "All":
                        op_dict = tenant_data.get("10.233.29.21").get("tenant")
                    else:
                        for key, value in tenant_data.get("10.233.29.21").get("tenant").iteritems():
                            print key, "....>>", value
                            if tenant == key:
                                op_dict[key] = value
                return render(request, 'apic_query.html', {'output_list': op_dict, 'parameter': parameter})
            elif parameter == "bd":
                op_dict = {}
                tenant = request.GET.get("tenant")
                with open(file_name, 'r') as f:
                    tenant_data = json.load(f)
                    if tenant == "All":
                        op_dict = tenant_data.get("10.233.29.21").get("tenant")
                    else:
                        for key, value in tenant_data.get("10.233.29.21").get("tenant").iteritems():
                            print key, "....>>", value
                            if tenant == key:
                                op_dict[key] = value
                return render(request, 'apic_query.html', {'output_list': op_dict, 'parameter': parameter})
        elif request.GET.has_key("ext_list"):
            request.session["sel_para"] = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                                           'type': glb_user_type}
            ext_list = request.GET.get("ext_list")
            print "extention list ", ext_list.split(",")
            print response_data
            outputlist = {}
            for ext in ext_list.split(","):
                output = inputsSubmitted_Bulk(request, response_data, {"ext_name": ext})
                outputlist[ext.upper()] = output[0][0].get('Implementation Plan').get("line")
                save_to_file(taskid, "", ext.upper(), outputlist[ext.upper()])
            # return render(request, 'temaplate_output_tabs.html',
            #               {'output_list': pres_output, "var_flag": 0,
            #                "id_flag": request.session['id_flag']})
            return render(request, 'tabs_configuration.html',
                          {'output_list': outputlist, 'action': "cmplt_activate_apply", "var_flag": 0})

        elif request.GET.has_key("precheck_access_switch_refresh"):
            import datetime

            conn1 = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
            cursor1 = conn1.cursor()
            today = datetime.datetime.now()
            precheck_switchlist = request.GET.get("precheck_switches")
            if not precheck_switchlist:
                return render(request, 'notification.html',
                              {'output_list': "Please Enter Switch Name/IP Address", 'class': 'alert-danger'})
            if "," in precheck_switchlist:
                precheck_switchlist = precheck_switchlist.split(",")
            else:
                precheck_switchlist = [precheck_switchlist.strip()]

            filtered_mac_dict = {}
            total_mac = 0
            idf = ""
            arp_count_dict = {}
            for switch in precheck_switchlist:
                login_switch = RetriveINFO_Device(switch.strip())
                if login_switch.get_login_status()['flag']:
                    hostname = login_switch.get_hostname()
                    m = re.search(r'-(\S+)-', hostname)
                    if m and not idf:
                        idf = m.group(1)
                    elif idf and m and idf != m.group(1):
                        return render(request, 'notification.html',
                                      {'output_list': "IDF not matched ", 'class': 'alert-danger'})
                    # cursor1.execute("DELETE FROM mysite_hadware_refresh_db WHERE IDF=?", [idf])
                    trunk_ports = []
                    trunk_op = login_switch.get_command_output("show interfaces trunk")
                    for interface in trunk_op:
                        m1 = re.search(r'([G|T|P]\S+)\s.+trunking', interface)
                        if m1:
                            t1 = m1.group(1).replace("Te", "TenGigabitEthernet")
                            trunk_ports.append(t1)
                    # total_mac_op = login_switch.get_command_output("show mac address-table | exclude "+"|".join(trunk_ports))
                    total_mac_op = login_switch.get_command_output("show mac address-table dynamic | exclude Po2")
                    # total_mac_op = login_switch.get_command_output("show mac address-table")
                    for ele in total_mac_op:
                        m1 = re.search(r'(\d+)\s+(\S+)\s.+\s([G|T]\S+)', ele)
                        if m1:
                            vlan = m1.group(1)
                            mac = m1.group(2)
                            port = m1.group(3)
                            vrf = "grn200"
                            if vlan:
                                vrf = get_vrf(vlan)
                            if mac:
                                arp_ip_dict = {'arp_ip': ""}
                                total_mac += 1
                                arp_mac_op = login_switch.get_command_output("show ip  arp vrf " + vrf + " " + mac)
                                for line1 in arp_mac_op:
                                    match = re.search(r'(\d+.\d+.\d+.\d+)\s+\d+\s+(\S+).+\s(Vlan\d+)', line1)
                                    if match:
                                        arp_ip_dict = {'arp_ip': match.group(1)}

                            if vlan not in filtered_mac_dict:
                                filtered_mac_dict[vlan] = [{"mac": mac, "interface": port}]
                            else:
                                filtered_mac_dict[vlan].append({"mac": mac, "interface": port})
                            cursor1.execute("SELECT * FROM mysite_hadware_refresh_db WHERE mac_address=?", [mac])
                            q1 = cursor1.fetchall()
                            if len(q1) != 0:
                                db_vlan = q1[0][6]
                                if vlan in db_vlan:
                                    pass
                                else:
                                    vlan = db_vlan + "," + vlan
                                cursor1.execute(
                                    "UPDATE mysite_hadware_refresh_db SET existingswitch=?,IDF=?,oldinterface=?,vlan=?,Remark=?,timestamp=? WHERE mac_address=?",
                                    [hostname, idf, port, vlan, json.dumps(arp_ip_dict), today, mac])
                            else:
                                cursor1.execute(
                                    "INSERT INTO mysite_hadware_refresh_db('existingswitch','IDF','oldinterface','mac_address','vlan','Remark','timestamp') VALUES(?,?,?,?,?,?,?)",
                                    [hostname, idf, port, mac, vlan, json.dumps(arp_ip_dict), today])

                    vrf_op = login_switch.get_command_output("show vrf")
                    vrf_list = get_vrf_list(vrf_op)
                    for vrf in vrf_list:
                        if "mgt" not in vrf:
                            arp_ip_op = login_switch.get_command_output("show ip arp vrf {} | count ARPA".format(vrf))
                            m2 = re.search(r'=\s+(\d+)', " ".join(arp_ip_op))
                            if m2:
                                arp_count_dict[vrf] = m2.group(1)

            conn1.commit()
            output_list = {}
            output_list["Result"] = []
            output_list["Result"].append("<strong>Total MAC entries</strong> : " + str(total_mac))
            output_list["Result"].append("<strong>Total VLANs</strong> : " + str(len(filtered_mac_dict.keys())))
            for key, value in filtered_mac_dict.iteritems():
                output_list["Result"].append("Total MACs for VL{} : {}".format(key, str(len(value))))
            for k, v in arp_count_dict.iteritems():
                output_list["Result"].append("Total ARP for VRF {} : {}".format(k, str(v)))

            return render(request, 'tabs_configuration.html', {'output_list': output_list, 'var_flag': 4})
            # return render(request, 'notification.html',{'output_list': "Data Saved Successfully  ", 'class': 'alert-success'})

        elif request.GET.has_key("postcheck_access_switch_refresh"):
            if request.GET.has_key("postcheck_access_type") and request.GET.get("postcheck_access_type") == "Upload":
                pre_sw_name = request.GET.get("precheck_switches")
                existing_vlan = ""
                new_vlan = ""
                if request.GET.get("existing_vlan"):
                    if not request.GET.get("new_vlan"):
                        return render(request, 'notification.html',
                                      {'output_list': "Please enter New VLAN ", 'class': 'alert-success'})
                    else:
                        existing_vlan = request.GET.get("existing_vlan")
                        new_vlan = request.GET.get("new_vlan")
                else:
                    pass
                return render(request, 'hw_refresh_dropzone.html',
                              {'type': request.GET.get("postcheck_access_switch_refresh"), 'precheck_sw': pre_sw_name,
                               'existing_vlan': existing_vlan, 'new_vlan': new_vlan})
            else:
                from datetime import datetime
                conn1 = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
                cursor1 = conn1.cursor()
                existing_vlan = ""
                new_vlan = ""
                # Postcheck  Switches
                postcheck_switches = request.GET.get("postcheck_switches")
                if "," in postcheck_switches:
                    postcheck_switches = postcheck_switches.split(",")
                else:
                    postcheck_switches = [postcheck_switches.strip()]
                # precheck Switches
                precheck_switches = request.GET.get("precheck_switches")
                if "," in precheck_switches:
                    precheck_switches = precheck_switches.split(",")
                else:
                    precheck_switches = [precheck_switches.strip()]

                Total_new_mac_dict = {}
                Total_DB_mac_dict = {}
                if request.GET.get("existing_vlan"):
                    if not request.GET.get("new_vlan"):
                        return render(request, 'notification.html',
                                      {'output_list': "Please enter New VLAN ", 'class': 'alert-success'})
                    else:
                        existing_vlan = [x.strip() for x in request.GET.get("existing_vlan").split(',')]
                        new_vlan = [x.strip() for x in request.GET.get("new_vlan").split(',')]
                else:
                    pass

                # Logging to Each Switch Using For loop
                for switch in precheck_switches:
                    cursor1.execute(
                        "SELECT oldinterface,vlan,mac_address,timestamp,existingswitch,Remark FROM mysite_hadware_refresh_db WHERE  existingswitch=?",
                        [switch.strip()])
                    q1 = cursor1.fetchall()
                    if len(q1) != 0:
                        for tpl in q1:
                            old_interface = tpl[0]
                            old_vlan = tpl[1]
                            db_mac = tpl[2]
                            timestamp = tpl[3]
                            device = tpl[4]
                            if tpl[5]:
                                arp_ip_dict = json.loads(tpl[5])
                            else:
                                arp_ip_dict = {}
                            db_mac_dict = {"db_vlan": old_vlan, "interface": old_interface, 'time': timestamp,
                                           'switch': device}
                            db_mac_dict.update(arp_ip_dict)
                            Total_DB_mac_dict[db_mac] = db_mac_dict
                    else:
                        return render(request, 'notification.html',
                                      {'output_list': "Entries not found in DB  ", 'class': 'alert-success'})

                        # return render(request, 'notification.html',
                        #               {'output_list': len(Total_DB_mac_dict.keys()), 'class': 'alert-success'})
                for switch in postcheck_switches:
                    login_switch = RetriveINFO_Device(switch.strip())
                    if login_switch.get_login_status()['flag']:
                        trunk_ports = []
                        trunk_op = login_switch.get_command_output("show interfaces trunk")

                        for interface in trunk_op:
                            m1 = re.search(r'([G|T|P]\S+)\s.+trunking', interface)
                            if m1:
                                t1 = m1.group(1).replace("Te", "TenGigabitEthernet")
                                trunk_ports.append(t1)
                        # total_mac_op = login_switch.get_command_output("show mac address-table | exclude "+"|".join(trunk_ports))
                        total_mac_op = login_switch.get_command_output("show mac address-table dynamic | exclude Po2")
                        # total_mac_op = login_switch.get_command_output("show mac address-table")
                        for ele in total_mac_op:
                            new_mac_dict = {}
                            m1 = re.search(r'(\d+)\s+(\S+)\s.+\s([G|T]\S+)', ele)
                            if m1:
                                vlan = m1.group(1)
                                mac = m1.group(2)
                                port = m1.group(3)

                                if vlan:
                                    vrf = get_vrf(vlan)
                                else:
                                    vrf = "grn200"
                                if mac:
                                    arp_ip_dict = {'arp_ip': ""}
                                    arp_mac_op = login_switch.get_command_output("show ip  arp vrf " + vrf + " " + mac)
                                    # logging.info(arp_mac_op)
                                    for line1 in arp_mac_op:
                                        match = re.search(r'(\d+.\d+.\d+.\d+)\s+\d+\s+(\S+).+\s(Vlan\d+)', line1)
                                        if match:
                                            arp_ip_dict = {'arp_ip': match.group(1)}
                                new_mac_dict = {"vlan": vlan, "interface": port, "new_switch": switch}
                                new_mac_dict.update(arp_ip_dict)
                                Total_new_mac_dict[mac] = new_mac_dict
                Not_found_list = []
                Not_arp_list = []
                err_list = []
                # logging.info(Total_new_mac_dict)
                # logging.info(new_vlan)
                for mac_k, val_d in Total_DB_mac_dict.iteritems():
                    er_dict = {}
                    if val_d and 'arp_ip' in val_d and mac_k in Total_new_mac_dict.keys():
                        if val_d['arp_ip'] and not Total_new_mac_dict[mac_k]['arp_ip']:
                            Not_arp_list.append(mac_k)
                    if mac_k not in Total_new_mac_dict.keys():
                        Not_found_list.append(mac_k)
                    elif mac_k in Total_new_mac_dict.keys() and val_d['db_vlan']:
                        er_dict['mac'] = mac_k
                        # condition For no Exception added
                        if not existing_vlan and Total_new_mac_dict[mac_k]['vlan'] not in val_d['db_vlan']:
                            er_dict['vlan'] = Total_new_mac_dict[mac_k]['vlan']
                            er_dict['hostname'] = Total_new_mac_dict[mac_k]['new_switch']
                            er_dict['port'] = Total_new_mac_dict[mac_k]['interface']
                            er_dict['old_vlan'] = val_d['db_vlan']
                            er_dict['expected_vlan'] = ""
                            err_list.append(er_dict)
                        else:
                            # condition for Exception vlans added
                            for i in range(0, len(existing_vlan)):
                                # Code for matching two precheck vlan correspond to  two postcheck vlan
                                # if "/" in existing_vlan[i]:
                                #     existing_vlan[i] = existing_vlan[i].split("/")
                                #     new_vlan[i] = new_vlan[i].split("/")
                                #     if  val_d['db_vlan'] == existing_vlan[i][0] or val_d['db_vlan'] == existing_vlan[i][1]:
                                #         if Total_new_mac_dict[mac_k]['vlan'] == new_vlan[i][0] or \
                                #                 Total_new_mac_dict[mac_k]['vlan'] == new_vlan[i][1] or \
                                #                 Total_new_mac_dict[mac_k]['vlan'] == existing_vlan[i][0] or \
                                #                 Total_new_mac_dict[mac_k]['vlan'] == existing_vlan[i][1]:
                                #             continue
                                #         else:
                                #             er_dict['vlan'] = Total_new_mac_dict[mac_k]['vlan']
                                #             er_dict['hostname'] = Total_new_mac_dict[mac_k]['new_switch']
                                #             er_dict['port'] = Total_new_mac_dict[mac_k]['interface']
                                #             er_dict['old_vlan'] = val_d['db_vlan']
                                #             er_dict['expected_vlan'] = new_vlan[i]
                                #             logging.info(er_dict)
                                #             err_list.append(er_dict)
                                # End of code for two vlan check -- (11/11/2019)
                                if existing_vlan[i] in val_d['db_vlan']:
                                    if Total_new_mac_dict[mac_k]['vlan'] == new_vlan[i] or \
                                            Total_new_mac_dict[mac_k]['vlan'] == existing_vlan[i]:
                                        continue
                                    else:
                                        er_dict['vlan'] = Total_new_mac_dict[mac_k]['vlan']
                                        er_dict['hostname'] = Total_new_mac_dict[mac_k]['new_switch']
                                        er_dict['port'] = Total_new_mac_dict[mac_k]['interface']
                                        er_dict['old_vlan'] = val_d['db_vlan']
                                        er_dict['expected_vlan'] = new_vlan[i]
                                        logging.info(er_dict)
                                        err_list.append(er_dict)
                # for mac_k, val_d in Total_new_mac_dict.iteritems():
                #     er_dict = {}
                #     if mac_k not in Total_DB_mac_dict.keys():
                #         Not_found_list.append(mac_k)
                #     elif mac_k in Total_DB_mac_dict.keys() and val_d['vlan']!= Total_DB_mac_dict[mac_k]['db_vlan']:
                #         er_dict['mac'] = mac_k
                #         er_dict['old_vlan'] = Total_DB_mac_dict[mac_k]['db_vlan']
                #         er_dict['vlan'] = val_d['vlan']
                #         err_list.append(er_dict)
                total_count = len(Total_DB_mac_dict.keys())
                output_list = {}

                output_list["Result"] = []
                count = len(Not_found_list)

                # output_list["Result"].append("<strong>Missing MAC</strong>: "+str(len(Not_found_list)))
                for mac_adddr in Not_found_list:
                    d1 = {}
                    db_date = datetime.strptime(Total_DB_mac_dict[mac_adddr]['time'], "%Y-%m-%d %H:%M:%S.%f").date()
                    print_date = db_date.strftime('%d/%m/%Y')
                    d1['timestamp'] = db_date.strftime('%d/%m/%Y')
                    # date = Total_DB_mac_dict[mac_adddr]['time']
                    # output_list["Result"].append(mac_adddr+" : " + get_mac_device_type(mac_adddr)+
                    # ", Hostname : "+Total_DB_mac_dict[mac_adddr]['switch']+", Timestamp : "+str(print_date))
                    d1['mac'] = mac_adddr
                    d1['vendor'] = get_mac_device_type(mac_adddr)
                    d1['hostname'] = Total_DB_mac_dict[mac_adddr]['switch']
                    d1['vlan'] = Total_DB_mac_dict[mac_adddr]['db_vlan']
                    output_list["Result"].append(d1)

                arp_output_list = {}
                arp_output_list["Result"] = []
                arp_er_count = len(Not_arp_list)

                # output_list["Result"].append("<strong>Missing MAC</strong>: "+str(len(Not_found_list)))
                for mac_adddr in Not_arp_list:
                    d1 = {}
                    db_date = datetime.strptime(Total_DB_mac_dict[mac_adddr]['time'], "%Y-%m-%d %H:%M:%S.%f").date()
                    print_date = db_date.strftime('%d/%m/%Y')
                    d1['timestamp'] = db_date.strftime('%d/%m/%Y')
                    d1['mac'] = mac_adddr
                    d1['vendor'] = get_mac_device_type(mac_adddr)
                    d1['hostname'] = Total_new_mac_dict[mac_adddr]['new_switch']
                    d1['old_hostname'] = Total_DB_mac_dict[mac_adddr]['switch']
                    d1['vlan'] = Total_DB_mac_dict[mac_adddr]['db_vlan']
                    d1['port'] = Total_new_mac_dict[mac_adddr]['interface']
                    arp_output_list["Result"].append(d1)
                error_list = {}
                error_list["Result"] = err_list
                er_count = len(err_list)
                temp = count + arp_er_count + er_count
                rem_count = total_count - temp
                #
                # output_list["Result"].append("<strong>MAC with wrong VLAN</strong> : " + str(len(err_list)))
                # if len(err_list) >0:
                #     for each_dict in err_list:
                #         output_list["Result"].append("{} : Precheck VLAN {}, Postcheck VLAN {} (Expected VLAN: {})".format(each_dict['mac'], each_dict['old_vlan'], each_dict['vlan'],each_dict['expected_vlan'] ))

                # return render(request, 'notification.html',{'output_list': "work in Progress ", 'class': 'alert-success'})
                return render(request, 'hw_refresh_table.html',
                              {'output_list': output_list, 'error_list': error_list, 'var_flag': 4, 'count': count,
                               'err_count': er_count, 'arp_er_list': arp_output_list, 'arp_error_count': arp_er_count,
                               'total_mac_count': total_count, 'rem_count': rem_count})

        elif request.GET.has_key('service'):
            cucm_service = request.GET.get('service')
            if cucm_service == "add_user":
                response_data = {}
                for el in request.GET:
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            response_data[new_el] = element_value
                    else:
                        response_data[el] = request.GET.get(el)
                ucm_obj = CUCM_AXL()
                op = ucm_obj.add_User(response_data)
                if op == True:
                    return render(request, 'notification.html',
                                  {'output_list': "User {} Added".format(response_data['user_id']),
                                   'class': 'alert-success'})
                else:
                    return render(request, 'notification.html',
                                  {'output_list': op,
                                   'class': 'alert-danger'})
            elif cucm_service == "add_phone":
                response_data = {}
                for el in request.GET:
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            response_data[new_el] = element_value
                    else:
                        response_data[el] = request.GET.get(el)
                print response_data
                ucm_obj = CUCM_AXL()
                op = ucm_obj.add_Phone(response_data)
                if op == True:
                    print op
                    return render(request, 'notification.html',
                                  {'output_list': "Phone {} Added Successfully ".format(response_data['name']),
                                   'class': 'alert-success'})
                else:
                    print "?????????"
                    return render(request, 'notification.html',
                                  {'output_list': op,
                                   'class': 'alert-danger'})
            elif cucm_service == "add_directory_number":
                response_data = {}
                for el in request.GET:
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            response_data[new_el] = element_value
                    else:
                        response_data[el] = request.GET.get(el)
                print response_data
                ucm_obj = CUCM_AXL()
                op = ucm_obj.add_line(response_data)
                if op == True:
                    print op
                    return render(request, 'notification.html',
                                  {'output_list': "Directory {} Added Successfully ".format(response_data['pattern']),
                                   'class': 'alert-success'})
                else:
                    print "?????????"
                    return render(request, 'notification.html',
                                  {'output_list': op,
                                   'class': 'alert-danger'})
            elif cucm_service == "view_user":
                ucm_obj = CUCM_AXL()
                op_list = ucm_obj.list_User({'user_id': request.GET.get('user_id')})
                if not op_list:
                    return render(request, 'notification.html',
                                  {'output_list': "No Matching User-ID Found", 'class': 'alert-danger'})
                else:
                    key_list = op_list[0].keys()
                    print op_list
                    return render(request, 'cucm_users_filter.html',
                                  {'entry_list': op_list, 'class': 'alert-success', 'ftype': '1'})

            elif cucm_service == "view_phone":
                ucm_obj = CUCM_AXL()
                op_list = ucm_obj.list_Phone(request.GET.get('name'))
                if not op_list:
                    return render(request, 'notification.html',
                                  {'output_list': "No Matching Phone Found", 'class': 'alert-danger'})
                else:
                    return render(request, 'cucm_phone_filter.html',
                                  {'entry_list': op_list, 'class': 'alert-success', 'ftype': '1'})

            elif cucm_service == "view_deviceProfile":
                ucm_obj = CUCM_AXL()
                op_list = ucm_obj.get_DeviceProfile(request.GET.get('name'))
                if not op_list:
                    return render(request, 'notification.html',
                                  {'output_list': "No Matching Profile Found", 'class': 'alert-danger'})
                else:
                    return render(request, 'cucm_phone_filter.html',
                                  {'entry_list': op_list, 'class': 'alert-success', 'ftype': '1'})

            elif cucm_service == "add_device_pool":
                response_data = {}
                print request.GET
                for el in request.GET:
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            response_data[new_el] = element_value
                    else:
                        response_data[el] = request.GET.get(el)
                print response_data
                ucm_obj = CUCM_AXL()
                op = ucm_obj.add_DevicePool(response_data)
                if op == True:
                    print op
                    return render(request, 'notification.html',
                                  {'output_list': "Phone {} Added Successfully ".format(response_data['name']),
                                   'class': 'alert-success'})
                else:
                    print "?????????"
                    return render(request, 'notification.html',
                                  {'output_list': op,
                                   'class': 'alert-danger'})

            return render(request, 'notification.html',
                          {'output_list': "Service in progress", 'class': 'alert-danger'})

        elif request.GET.has_key('apic_services'):
            aci_service = request.GET.get('apic_services')
            action = request.GET.get('action')
            port_type = request.GET.get('port_type')
            if aci_service == 'Port Configuration':
                op_list = []
                if action == 'Reservation':

                    response_data = {}
                    for el in request.GET:
                        if "[" in el:
                            element_value = request.GET.getlist(el)
                            if element_value:
                                new_el = el.split("[]")[0]
                                response_data[new_el] = element_value
                        else:
                            response_data[el] = request.GET.get(el)

                    print "------------>>>>>>", response_data
                    if not response_data.has_key('leaf_id'):
                        return render(request, 'notification.html',
                                      {'output_list': "Please Select Leaf ID and Physical Port ",
                                       'class': 'alert-danger'})
                    request.session['apic_data_dict'] = response_data
                    
                    if action == 'Reservation':
                        display_list = Display_Inputs_for_port_resrv(response_data)
                        return render(request, 'confirmation_window.html', {'output_list': display_list})
                    
                if action == 'Provision' and port_type == 'Physical':

                    response_data = {}
                    for el in request.GET:
                        if "[" in el:
                            element_value = request.GET.getlist(el)
                            if element_value:
                                new_el = el.split("[]")[0]
                                response_data[new_el] = element_value
                        else:
                            response_data[el] = request.GET.get(el)

                    print "------------>>>>>>", response_data
                    if not response_data.has_key('leaf_id'):
                        return render(request, 'notification.html',
                                      {'output_list': "Please Select Leaf ID and Physical Port ",
                                       'class': 'alert-danger'})
                    request.session['apic_data_dict'] = response_data
                    
                    if action == 'Reservation':
                        display_list = Display_Inputs_for_port_resrv(response_data)
                        return render(request, 'confirmation_window.html', {'output_list': display_list})
                    if action == 'Provision':
                        # service_now = ServiceNowRequest('admin', 'vqfQxF3KqB7X')
                        # get_state = service_now.get_state(work_order_no)
                        display_list = Display_Inputs_for_port_provision(response_data)
                        return render(request, 'confirmation_window.html', {'output_list': display_list})

                if port_type in ['Port-Channel', 'Virtual Port-Channel'] or action == 'Provision' and port_type in ['Port-Channel', 'Virtual Port-Channel']:

                    response_data = {}
                    for el in request.GET:
                        if "[" in el:
                            element_value = request.GET.getlist(el)
                            if element_value:
                                new_el = el.split("[]")[0]
                                response_data[new_el] = element_value
                        else:
                            response_data[el] = request.GET.get(el)
                    # print "------------>>>>>>",response_data
                    if not response_data.has_key('leaf_id'):
                        return render(request, 'notification.html',
                                      {'output_list': "Please Select Leaf ID and Physical Port ",
                                       'class': 'alert-danger'})
                    request.session['apic_data_dict'] = response_data
                    if action == 'Reservation':
                        display_list = Display_Inputs_for_port_resrv(response_data)
                        return render(request, 'confirmation_window.html', {'output_list': display_list})
                    if action == 'Provision':
                        display_list = Display_Inputs_for_port_provision(response_data)
                        return render(request, 'confirmation_window.html', {'output_list': display_list})

                if action == 'De-Provision':
                    response_data = {}
                    for el in request.GET:

                        if "[" in el:
                            element_value = request.GET.getlist(el)
                            if element_value:
                                new_el = el.split("[]")[0]
                                response_data[new_el] = element_value
                        else:
                            response_data[el] = request.GET.get(el)
                    request.session['apic_data_dict'] = response_data
                    display_list = Display_Inputs_for_deprovision(response_data)
                    return render(request, 'confirmation_window.html', {'output_list': display_list})

                if action == 'Leaf Port Status':
                    outputlist = {}
                    response_data = {}
                    for el in request.GET:
                        if "[" in el:
                            element_value = request.GET.getlist(el)
                            if element_value:
                                new_el = el.split("[]")[0]
                                response_data[new_el] = element_value
                        else:
                            response_data[el] = request.GET.get(el)
                    print response_data, 'Deprrrrrrrrrrrrrrroooooooooooooooo'

                    apic_auth = ACIconfig_by_API(ACI_IP, Username, Password)
                    port_details = apic_auth.leaf_status_details(response_data['leaf_node'], response_data['phy_port'])
                    port_data = []
                    # print port_details,">>>>>>>>>>>>>>>>>>>>//////////"

                    if port_details.has_key('descr'):

                        rex = re.search(r'(CHG.+)', port_details.get('descr'))
                        if rex:
                            print(rex.group(1))

                            port_data.append(
                                "<strong>Work Order No. : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                                rex.group(1) + "</span>")
                    else:
                        port_data.append(
                            "<strong>Description : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")

                    if port_details.has_key('id'):
                        port_data.append(
                            "<strong>Physical Port : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                            port_details['id'] + "</span>")
                    else:
                        port_data.append(
                            "<strong>Physical Port : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                    if port_details.has_key('descr'):
                        port_data.append(
                            "<strong>Description : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                            port_details['descr'] + "</span>")
                    else:
                        port_data.append(
                            "<strong>Description : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                    if port_details.has_key('descr'):

                        rex = re.search(r'(Reservation|Provision)', port_details.get('descr'))
                        if rex:
                            print(rex.group(1))

                            port_data.append(
                                "<strong>State. : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                                rex.group(1) + "</span>")
                    else:
                        port_data.append(
                            "<strong>Description : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")

                    if port_details.has_key('adminSt'):
                        port_data.append(
                            "<strong>Admin State : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                            port_details['adminSt'] + "</span>")
                    else:
                        port_data.append(
                            "<strong>Admin State : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                    if port_details.has_key('mode'):
                        port_data.append(
                            "<strong>Mode : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                            port_details['mode'] + "</span>")
                    else:
                        port_data.append(
                            "<strong>Mode : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                    if port_details.has_key('EPG'):
                        port_data.append(
                            "<strong>EPG : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                            port_details['mode'] + "</span>")
                    else:
                        port_data.append(
                            "<strong>EPG : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")

                    outputlist['Port Details'] = port_data
                    return render(request, 'tabs.html', {'output_list': outputlist})

                return render(request, 'port_provision_res.html',
                              {'output_list': op_list, 'class': 'alert-success'})

            if aci_service == 'Add Or Modify Tenant':

                response_data = {}
                for el in request.GET:
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            response_data[new_el] = element_value
                    else:
                        response_data[el] = request.GET.get(el)
                request.session['apic_data_dict'] = response_data
                display_dict = Display_Inputs_for_policy(response_data)
                return render(request, 'confirmation_window.html', {'output_list': display_dict})

            if aci_service == 'policy_grp':
                response_data = {}
                for el in request.GET:
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            response_data[new_el] = element_value
                    else:
                        response_data[el] = request.GET.get(el)
                request.session['apic_data_dict'] = response_data
                display_dict = Display_Inputs_for_policy(response_data)
                return render(request, 'confirmation_window.html', {'output_list': display_dict})

            if aci_service == 'port_channel_group':
                response_data = {}
                for el in request.GET:
                    if "[" in el:
                        element_value = request.GET.getlist(el)
                        if element_value:
                            new_el = el.split("[]")[0]
                            response_data[new_el] = element_value
                    else:
                        response_data[el] = request.GET.get(el)

                request.session['apic_data_dict'] = response_data
                display_dict = Display_Inputs_for_PCpolicy(response_data)
                return render(request, 'confirmation_window.html', {'output_list': display_dict})

        elif request.GET.has_key('msp_settings'):
            file_name = './mysite/Json_DATA/msp_base_settings.json'

            with open(file_name, 'r') as f:
                msp_data = json.loads(f.read())
                # for k, v in msp_data.iteritems():
                # if  k =="switch_cost":
            msp_data['switches'] = int(request.GET.get('switch_cost'))
            msp_data['router'] = int(request.GET.get('router_cost'))
            msp_data['firewall'] = int(request.GET.get('firewall_cost'))
            msp_data['loadbalancer'] = int(request.GET.get('load_balancer'))
            msp_data['server'] = int(request.GET.get('server_1'))
            msp_data['access_point'] = int(request.GET.get('access_point'))
            msp_data['cost_industry_std'] = int(request.GET.get('industry_statndard'))
            # msp_data['service_label_aggrement'] = int(request.GET.get('service_label_aggrement'))
            msp_data['incident_sla']['p1'] = int(request.GET.get('p1_Incident'))
            msp_data['incident_sla']['p2'] = int(request.GET.get('p2_Incident'))
            msp_data['incident_sla']['p3'] = int(request.GET.get('p3_Incident'))
            msp_data['service_request_sla']['p1'] = int(request.GET.get('p1_service_request'))
            msp_data['service_request_sla']['p2'] = int(request.GET.get('p2_service_request'))
            msp_data['service_request_sla']['p3'] = int(request.GET.get('p3_service_request'))
            msp_data['sr_sal_industry_standard'] = int(request.GET.get('sr_sal_industry_standard'))
            msp_data['inc_sla_industry_std'] = int(request.GET.get('incidentsla_industry_standard'))
            msp_data['Incident Initial Response SLA'] = int(request.GET.get('Incident Initial Response SLA'))
            msp_data['Service Request Response SLA'] = int(request.GET.get('Service Request Response SLA'))

            # and then just write the data back on the file
            with open('./mysite/Json_DATA/msp_base_settings.json', 'w') as f:
                f.write(json.dumps(msp_data, sort_keys=True, indent=4, separators=(',', ': ')))

                # if request.GET.get('switch_cost') in k:

            # aci_service = request.GET.get('switch_cost')
            # if
            # # print aci_service,"???????????????????????????/"
            return render(request, 'notification.html',
                          {'output_list': "Data saved Succefully ", 'class': 'alert-success'})


        elif glb_user_ios == "greenfield":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)

            # with open('/home/ubuntu/prepro/mysite/mysite/Design_json_input_data/'+taskid+'_'+subtaskid+'.json', 'w') as data:
            #     json.dump(response_data, data)
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase in ["Design-1", "Design-2"]:
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            output_dictionary['l_flag'] = True
                            # v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)

                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                # if taskid:
                #     entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                #                                                                               subtaskid=subtaskid,
                #                                                                               customer=customer).last()
                #     # print entry
                #     if entry:
                #         status = entry[2]
                #         if str(status) == "1":
                #             output = 'Service Is Under Process'
                #             # print output
                #             return render(request, 'notification.html',
                #                           {'output_list': output, 'class': 'alert-danger'})
                #         if str(status) == "4" or str(status) == "0":
                #             insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                #                          modified_output, [], [], 4)
                #     else:
                #         insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                #                      [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'class': 'alert-success', 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                # {'output_list': pres_output, "var_flag": 2, "id_flag": request.session['id_flag']})
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "validate":
                return render(request, 'notification.html',
                              {'output_list': "inputs Saved", 'class': 'alert-danger'})

            if phase == "Implimentation":
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)
                print op_list
                return render(request, 'greenfield_tabs_table.html',
                              {'output_list': {"Configuration": []}, 'tablelist': op_list})

        elif glb_user_ios == "zscale":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "Design":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if not v:
                        if type(v) == list:
                            output_dictionary['l_flag'] = True
                            # v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)

                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                if taskid:
                    entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                              subtaskid=subtaskid,
                                                                                              customer=customer).last()
                    # print entry
                    if entry:
                        status = entry[2]
                        if str(status) == "1":
                            output = 'Service Is Under Process'
                            # print output
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        if str(status) == "4" or str(status) == "0":
                            insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                                         modified_output, [], [], 4)
                    else:
                        insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                                     [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'class': 'alert-success', 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                # {'output_list': pres_output, "var_flag": 2, "id_flag": request.session['id_flag']})
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "validate":
                return render(request, 'notification.html',
                              {'output_list': "inputs Saved", 'class': 'alert-danger'})

            if phase == "Implimentation":
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)
                print op_list
                return render(request, 'greenfield_tabs_table.html',
                              {'output_list': {"Configuration": []}, 'tablelist': op_list})

        elif glb_user_ios == "zscale2":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "Design":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if not v:
                        if type(v) == list:
                            output_dictionary['l_flag'] = True
                            # v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)

                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                if taskid:
                    entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                              subtaskid=subtaskid,
                                                                                              customer=customer).last()
                    # print entry
                    if entry:
                        status = entry[2]
                        if str(status) == "1":
                            output = 'Service Is Under Process'
                            # print output
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        if str(status) == "4" or str(status) == "0":
                            insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                                         modified_output, [], [], 4)
                    else:
                        insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                                     [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'class': 'alert-success', 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                # {'output_list': pres_output, "var_flag": 2, "id_flag": request.session['id_flag']})
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "validate":
                return render(request, 'notification.html',
                              {'output_list': "inputs Saved", 'class': 'alert-danger'})

            if phase == "Implimentation":
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)
                print op_list
                return render(request, 'greenfield_tabs_table.html',
                              {'output_list': {"Configuration": []}, 'tablelist': op_list})


        elif glb_user_ios == "msp":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist["Meeting Points"] = modified_output
                operation_op = []
                incident_op = []
                service_op = []
                # COde For Cost and SLA calculation

                chart_para = {}
                f = open('./mysite/Json_DATA/msp_base_settings.json')
                cost_json = json.load(f)
                if response_data['CapEx']:
                    cost_flag = True
                    capex = int(math.ceil(int(response_data['CapEx']) / 12))
                    print capex
                    if response_data['firewall'] and response_data['loadbalancers'] and response_data['switches'] and \
                            response_data['servers']:
                        # if [] in response_data.keys():
                        FW = response_data['firewall']
                        LB = response_data['loadbalancers']
                        SW = response_data['switches']
                        server = response_data['servers']

                        total_cost = (cost_json["firewall"] * int(FW)) + (cost_json["loadbalancer"] * int(LB)) + (
                                cost_json["switches"] * int(SW)) + (cost_json["server"] * int(server))

                        print "Total Cost ", total_cost
                    elif response_data['users']:
                        FW = math.ceil(int(response_data['users']) / 200)
                        LB = math.ceil(int(response_data['users']) / 200)
                        devices = math.ceil(2.5 * int(response_data['users']))
                        SW = math.ceil(int(devices) / 48)
                        ap = math.ceil(int(devices) / 15)
                        total_cost = (cost_json["firewall"] * int(FW)) + (cost_json["loadbalancer"] * int(LB)) + (
                                cost_json["switches"] * int(SW)) + (cost_json["access_point"] * int(ap))

                        print "Total Cost by user", total_cost
                    elif not response_data["users"] and response_data["devices"]:
                        devices = response_data['devices']
                        users = math.ceil(int(response_data['devices']) / 2.5)

                        FW = math.ceil(int(users) / 200)
                        LB = math.ceil(int(users) / 200)
                        SW = math.ceil(int(devices) / 48)
                        ap = math.ceil(int(devices) / 15)
                        total_cost = (cost_json["firewall"] * int(FW)) + (cost_json["loadbalancer"] * int(LB)) + (
                                cost_json["switches"] * int(SW)) + (cost_json["access_point"] * int(ap))
                        print "Total Cost by devices", total_cost, capex
                    else:
                        cost_flag = False
                    if cost_flag:
                        operating_cost_percent = (float(capex - total_cost) / float(capex)) * 100
                        print "Percent ", round(operating_cost_percent, 1)
                        chart_para['op_cost'] = int(math.ceil(operating_cost_percent))
                else:
                    cost_flag = False
                # u'P3 service request SLAs', u'Down_time_incidents', u'P2 service re quest SLAs',u'P1 service request SLAs', u'P2 incident SLAs' u'P1 incident SLAs', u'loadbalancers', u'other', u'P3 incident SLAs',
                if response_data["P1_incident_SLAs"] and response_data["P2_incident_SLAs"] and response_data[
                    "P3_incident_SLAs"] and response_data["initial_incident"]:
                    basic_total_sla = cost_json["incident_sla"]['p1'] + cost_json["incident_sla"]['p2'] + \
                                      cost_json["incident_sla"]['p3']
                    inc_sla_flag = True
                    p1 = int(response_data["P1_incident_SLAs"].strip("hr"))
                    p2 = int(response_data["P2_incident_SLAs"].strip("hr"))
                    p3 = int(response_data["P3_incident_SLAs"].strip("hr"))

                    total_sla = p1 + p2 + p3
                    per_inc_sla = (float(total_sla - basic_total_sla) / float(total_sla)) * 100
                    print "per_inc_sla", round(per_inc_sla, 1)
                    chart_para['inc_sla'] = int(math.ceil(per_inc_sla))

                    # Response SLA
                    base_init = int(cost_json["Incident_Initial_Response_SLA"])
                    user_init = int(response_data["initial_incident"])
                    print user_init, base_init
                    percent_init = (float(user_init - base_init) / float(base_init)) * 100
                    chart_para['inc_init_response'] = int(math.ceil(percent_init))


                else:
                    inc_sla_flag = False
                if response_data["P1_SR_SLAs"] and response_data["P2_SR_SLAs"] and response_data["P3_SR_SLAs"] and \
                        response_data["initial_service_req"]:
                    basic_total_sr_sla = cost_json["service_request_sla"]['p1'] + cost_json["service_request_sla"][
                        'p2'] + cost_json["service_request_sla"]['p3']
                    sr_sla_flag = True
                    p1 = int(response_data["P1_SR_SLAs"].strip("hr"))
                    p2 = int(response_data["P2_SR_SLAs"].strip("hr"))
                    p3 = int(response_data["P3_SR_SLAs"].strip("hr"))

                    total_sr_sla = p1 + p2 + p3
                    per_sr_sla = (float(total_sr_sla - basic_total_sr_sla) / float(total_sr_sla)) * 100
                    print "per_inc_sla", round(per_sr_sla, 1)
                    chart_para['sr_sla'] = int(math.ceil(per_sr_sla))

                    # Response SLA
                    base_init_sr = int(cost_json["Service_Request_Response_SLA"])
                    user_init_sr = int(response_data["initial_service_req"])
                    percent_init_sr = (float(user_init_sr - base_init_sr) / float(base_init_sr)) * 100
                    chart_para['sr_init_response'] = int(math.ceil(percent_init_sr))

                else:
                    sr_sla_flag = False

                if 'inc_sla' in chart_para:
                    chart_para['inc_std'] = int(chart_para['inc_sla']) - cost_json["inc_sla_industry_std"]
                else:
                    chart_para['inc_std'] = cost_json["inc_sla_industry_std"]
                if 'sr_sla' in chart_para:
                    chart_para['sr_std'] = int(chart_para['sr_sla']) - cost_json["sr_sla_industry_std"]
                else:
                    chart_para['sr_std'] = cost_json["sr_sla_industry_std"]
                if 'op_cost' in chart_para:
                    chart_para['cost_std'] = int(chart_para['op_cost']) - cost_json["cost_industry_std"]
                else:
                    chart_para['cost_std'] = cost_json["cost_industry_std"]
                chart_para['sr_sla_flag'] = sr_sla_flag
                chart_para['cost_flag'] = cost_flag
                chart_para['inc_sla_flag'] = inc_sla_flag

                if 'sr_sla' in chart_para and 'op_cost' in chart_para and 'inc_sla' in chart_para:
                    if chart_para['op_cost'] > 0 and chart_para['cost_std'] > 0:
                        operation_op = ["Higher than the Industry standard",
                                        "Potential saving with the "
                                        ]
                        display_operation_op = str(chart_para['cost_std']).strip("-") + "% " + "Potential cost saving "

                    elif chart_para['op_cost'] < 0 and chart_para['cost_std'] > 0:
                        chart_para['op_cost'] = abs(chart_para['op_cost'])
                        operation_op = ["Higher than the Industry standard",
                                        "Lower than the "
                                        ]
                        display_operation_op = str(chart_para['cost_std']).strip("-") + "% " + "Potential cost saving "

                    elif chart_para['op_cost'] < 0 and chart_para['cost_std'] < 0:
                        chart_para['op_cost'] = abs(chart_para['op_cost'])
                        chart_para['cost_std'] = abs(chart_para['cost_std'])
                        operation_op = ["Lower than the Industry standard",
                                        "Lower than the "
                                        ]
                        display_operation_op = str(chart_para['cost_std']).strip("-") + "% " + "Lower cost "

                    print display_operation_op
                    if chart_para['inc_sla'] > 0 and chart_para['inc_std'] > 0:
                        incident_op = ["Better than the Industry standard",
                                       "Better than the "
                                       ]
                        display_incident_op = " " + str(chart_para['inc_sla']).strip("-") + "% " + "Potential reduction"

                    elif chart_para['inc_sla'] < 0 and chart_para['inc_std'] > 0:
                        chart_para['inc_sla'] = abs(chart_para['inc_sla'])
                        incident_op = ["Better than the Industry standard",
                                       "Worse than "
                                       ]
                        display_incident_op = str(chart_para['inc_sla']).strip("-") + "% " + "Potential reduction"

                    elif chart_para['inc_sla'] < 0 and chart_para['inc_std'] < 0:
                        chart_para['inc_sla'] = abs(chart_para['inc_sla'])
                        chart_para['inc_std'] = abs(chart_para['inc_std'])
                        incident_op = ["Worse than the Industry standard",
                                       "Worse than the "
                                       ]
                        display_incident_op = str(chart_para['inc_sla']).strip("-") + "% " + "Potential reduction"

                    print display_incident_op
                    if chart_para['sr_sla'] > 0 and chart_para['sr_std'] > 0:
                        service_op = ["Better than the Industry standard",
                                      "Better than the "
                                      ]
                        display_service_op = str(chart_para['sr_sla']).strip("-") + "% " + "Potential reduction"

                    elif chart_para['sr_sla'] < 0 and chart_para['sr_std'] > 0:
                        chart_para['inc_sla'] = abs(chart_para['inc_sla'])
                        service_op = ["Better than the Industry standard",
                                      "Worse than the "
                                      ]
                        display_service_op = str(chart_para['sr_sla']).strip("-") + "% " + "Potential reduction"

                    elif chart_para['sr_sla'] < 0 and chart_para['sr_std'] < 0:
                        chart_para['sr_sla'] = abs(chart_para['sr_sla'])
                        chart_para['sr_std'] = abs(chart_para['sr_std'])
                        service_op = ["Worse than the Industry standard",
                                      "Worse than the "
                                      ]
                        display_service_op = str(chart_para['sr_sla']).strip("-") + "% " + "Potential reduction"

                    display_op_list = [
                        "Potential Cost saving and SLA improvements from <span style='color:#f4b400'>Aitos<sup style='font-size:0.2em;top: -2.5em;'>TM</sup></span> Managed Services:",
                        "++++Operation Cost Savings#### : " + display_operation_op + "</br>",
                        "++++Incident Response Time#### : " + str(chart_para['inc_init_response']).strip(
                            "-") + "% Potential reduction" + "</br>",
                        "++++Incident Resolution Time#### : " + display_incident_op + "</br>",
                        "++++Service Request Response Time#### : " + str(chart_para['sr_init_response']).strip(
                            "-") + "% Potential reduction" + "</br>",
                        "++++Service Request SLAs#### : " + display_service_op + "</br>",

                    ]
                else:
                    chart_para['sr_sla_flag'] = False
                    chart_para['cost_flag'] = False
                    chart_para['inc_sla_flag'] = False
                    operation_op = ["More than Industry Standard"]
                    incident_op = ["More than Industry Standard"]
                    service_op = ["More than Industry Standard"]
                    display_op_list = [
                        "Operation Cost Savings:", " " + str(chart_para['cost_std']) + "% more than Industry Standard",
                        "Incident SLA Response Time:",
                                                   " " + str(chart_para['inc_std']) + "% more than Industry Standard",
                        "Service Request SLA Response Time:",
                                                   " " + str(chart_para['sr_std']) + "% more than Industry Standard",

                    ]
                outputlist["Meeting Points"] = display_op_list + outputlist["Meeting Points"]
                chart_para['operation_op'] = operation_op
                chart_para['incident_op'] = incident_op
                chart_para['service_op'] = service_op
                print chart_para
                return render(request, 'msp_tabs_chart.html', {'output_list': outputlist, 'chart_para': chart_para})
            if phase in ["Design"]:
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            output_dictionary['l_flag'] = True
                            # v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)

                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                # if taskid:
                #     entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                #                                                                               subtaskid=subtaskid,
                #                                                                               customer=customer).last()
                #     # print entry
                #     if entry:
                #         status = entry[2]
                #         if str(status) == "1":
                #             output = 'Service Is Under Process'
                #             # print output
                #             return render(request, 'notification.html',
                #                           {'output_list': output, 'class': 'alert-danger'})
                #         if str(status) == "4" or str(status) == "0":
                #             insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                #                          modified_output, [], [], 4)
                #     else:
                #         insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                #                      [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'class': 'alert-success', 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                # {'output_list': pres_output, "var_flag": 2, "id_flag": request.session['id_flag']})
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "validate":
                return render(request, 'notification.html',
                              {'output_list': "inputs Saved", 'class': 'alert-danger'})

            if phase == "Implimentation":
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)
                print op_list
                return render(request, 'greenfield_tabs_table.html',
                              {'output_list': {"Configuration": []}, 'tablelist': op_list})

        elif glb_user_ios == "msp-multitab":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Plan":
                outputlist = {}
                outputlist["Meeting Points"] = []
                operation_op = []
                incident_op = []
                service_op = []
                # COde For Cost and SLA calculation

                chart_para = {}
                f = open('./mysite/Json_DATA/msp_base_settings.json')
                cost_json = json.load(f)
                if response_data['CapEx']:
                    cost_flag = True
                    capex = int(math.ceil(int(response_data['CapEx']) / 12))
                    print capex
                    if response_data['firewall'] and response_data['loadbalancers'] and response_data['switches'] and \
                            response_data['servers']:
                        # if [] in response_data.keys():
                        FW = response_data['firewall']
                        LB = response_data['loadbalancers']
                        SW = response_data['switches']
                        server = response_data['servers']

                        total_cost = (cost_json["firewall"] * int(FW)) + (cost_json["loadbalancer"] * int(LB)) + (
                                cost_json["switches"] * int(SW)) + (cost_json["server"] * int(server))

                        print "Total Cost ", total_cost
                    elif response_data['users']:
                        FW = math.ceil(int(response_data['users']) / 200)
                        LB = math.ceil(int(response_data['users']) / 200)
                        devices = math.ceil(2.5 * int(response_data['users']))
                        SW = math.ceil(int(devices) / 48)
                        ap = math.ceil(int(devices) / 15)
                        total_cost = (cost_json["firewall"] * int(FW)) + (cost_json["loadbalancer"] * int(LB)) + (
                                cost_json["switches"] * int(SW)) + (cost_json["access_point"] * int(ap))

                        print "Total Cost by user", total_cost
                    elif not response_data["users"] and response_data["devices"]:
                        devices = response_data['devices']
                        users = math.ceil(int(response_data['devices']) / 2.5)

                        FW = math.ceil(int(users) / 200)
                        LB = math.ceil(int(users) / 200)
                        SW = math.ceil(int(devices) / 48)
                        ap = math.ceil(int(devices) / 15)
                        total_cost = (cost_json["firewall"] * int(FW)) + (cost_json["loadbalancer"] * int(LB)) + (
                                cost_json["switches"] * int(SW)) + (cost_json["access_point"] * int(ap))
                        print "Total Cost by devices", total_cost, capex
                    else:
                        cost_flag = False
                    if cost_flag:
                        operating_cost_percent = (float(capex - total_cost) / float(capex)) * 100
                        print "Percent ", round(operating_cost_percent, 1)
                        chart_para['op_cost'] = int(math.ceil(operating_cost_percent))
                else:
                    cost_flag = False
                # u'P3 service request SLAs', u'Down_time_incidents', u'P2 service re quest SLAs',u'P1 service request SLAs', u'P2 incident SLAs' u'P1 incident SLAs', u'loadbalancers', u'other', u'P3 incident SLAs',
                if response_data["P1_incident_SLAs"] and response_data["P2_incident_SLAs"] and response_data[
                    "P3_incident_SLAs"] and response_data["initial_incident"]:
                    basic_total_sla = cost_json["incident_sla"]['p1'] + cost_json["incident_sla"]['p2'] + \
                                      cost_json["incident_sla"]['p3']
                    inc_sla_flag = True
                    p1 = int(response_data["P1_incident_SLAs"].strip("hr"))
                    p2 = int(response_data["P2_incident_SLAs"].strip("hr"))
                    p3 = int(response_data["P3_incident_SLAs"].strip("hr"))

                    total_sla = p1 + p2 + p3
                    per_inc_sla = (float(total_sla - basic_total_sla) / float(total_sla)) * 100
                    print "per_inc_sla", round(per_inc_sla, 1)
                    chart_para['inc_sla'] = int(math.ceil(per_inc_sla))

                    # Response SLA
                    base_init = int(cost_json["Incident_Initial_Response_SLA"])
                    user_init = int(response_data["initial_incident"])
                    print user_init, base_init
                    percent_init = (float(user_init - base_init) / float(base_init)) * 100
                    chart_para['inc_init_response'] = int(math.ceil(percent_init))


                else:
                    inc_sla_flag = False
                if response_data["P1_SR_SLAs"] and response_data["P2_SR_SLAs"] and response_data["P3_SR_SLAs"] and \
                        response_data["initial_service_req"]:
                    basic_total_sr_sla = cost_json["service_request_sla"]['p1'] + cost_json["service_request_sla"][
                        'p2'] + cost_json["service_request_sla"]['p3']
                    sr_sla_flag = True
                    p1 = int(response_data["P1_SR_SLAs"].strip("hr"))
                    p2 = int(response_data["P2_SR_SLAs"].strip("hr"))
                    p3 = int(response_data["P3_SR_SLAs"].strip("hr"))

                    total_sr_sla = p1 + p2 + p3
                    per_sr_sla = (float(total_sr_sla - basic_total_sr_sla) / float(total_sr_sla)) * 100
                    print "per_inc_sla", round(per_sr_sla, 1)
                    chart_para['sr_sla'] = int(math.ceil(per_sr_sla))

                    # Response SLA
                    base_init_sr = int(cost_json["Service_Request_Response_SLA"])
                    user_init_sr = int(response_data["initial_service_req"])
                    percent_init_sr = (float(user_init_sr - base_init_sr) / float(base_init_sr)) * 100
                    chart_para['sr_init_response'] = int(math.ceil(percent_init_sr))

                else:
                    sr_sla_flag = False

                if 'inc_sla' in chart_para:
                    chart_para['inc_std'] = int(chart_para['inc_sla']) - cost_json["inc_sla_industry_std"]
                else:
                    chart_para['inc_std'] = cost_json["inc_sla_industry_std"]
                if 'sr_sla' in chart_para:
                    chart_para['sr_std'] = int(chart_para['sr_sla']) - cost_json["sr_sla_industry_std"]
                else:
                    chart_para['sr_std'] = cost_json["sr_sla_industry_std"]
                if 'op_cost' in chart_para:
                    chart_para['cost_std'] = int(chart_para['op_cost']) - cost_json["cost_industry_std"]
                else:
                    chart_para['cost_std'] = cost_json["cost_industry_std"]
                chart_para['sr_sla_flag'] = sr_sla_flag
                chart_para['cost_flag'] = cost_flag
                chart_para['inc_sla_flag'] = inc_sla_flag

                if 'sr_sla' in chart_para and 'op_cost' in chart_para and 'inc_sla' in chart_para:
                    if chart_para['op_cost'] > 0 and chart_para['cost_std'] > 0:
                        operation_op = ["Higher than the Industry standard",
                                        "Potential saving with the "
                                        ]
                        display_operation_op = str(chart_para['cost_std']).strip("-") + "% " + "Potential cost saving "

                    elif chart_para['op_cost'] < 0 and chart_para['cost_std'] > 0:
                        chart_para['op_cost'] = abs(chart_para['op_cost'])
                        operation_op = ["Higher than the Industry standard",
                                        "Lower than the "
                                        ]
                        display_operation_op = str(chart_para['cost_std']).strip("-") + "% " + "Potential cost saving "

                    elif chart_para['op_cost'] < 0 and chart_para['cost_std'] < 0:
                        chart_para['op_cost'] = abs(chart_para['op_cost'])
                        chart_para['cost_std'] = abs(chart_para['cost_std'])
                        operation_op = ["Lower than the Industry standard",
                                        "Lower than the "
                                        ]
                        display_operation_op = str(chart_para['cost_std']).strip("-") + "% " + "Lower cost "

                    print display_operation_op
                    if chart_para['inc_sla'] > 0 and chart_para['inc_std'] > 0:
                        incident_op = ["Better than the Industry standard",
                                       "Better than the "
                                       ]
                        display_incident_op = " " + str(chart_para['inc_sla']).strip("-") + "% " + "Potential reduction"

                    elif chart_para['inc_sla'] < 0 and chart_para['inc_std'] > 0:
                        chart_para['inc_sla'] = abs(chart_para['inc_sla'])
                        incident_op = ["Better than the Industry standard",
                                       "Worse than "
                                       ]
                        display_incident_op = str(chart_para['inc_sla']).strip("-") + "% " + "Potential reduction"

                    elif chart_para['inc_sla'] < 0 and chart_para['inc_std'] < 0:
                        chart_para['inc_sla'] = abs(chart_para['inc_sla'])
                        chart_para['inc_std'] = abs(chart_para['inc_std'])
                        incident_op = ["Worse than the Industry standard",
                                       "Worse than the "
                                       ]
                        display_incident_op = str(chart_para['inc_sla']).strip("-") + "% " + "Potential reduction"

                    print display_incident_op
                    if chart_para['sr_sla'] > 0 and chart_para['sr_std'] > 0:
                        service_op = ["Better than the Industry standard",
                                      "Better than the "
                                      ]
                        display_service_op = str(chart_para['sr_sla']).strip("-") + "% " + "Potential reduction"

                    elif chart_para['sr_sla'] < 0 and chart_para['sr_std'] > 0:
                        chart_para['inc_sla'] = abs(chart_para['inc_sla'])
                        service_op = ["Better than the Industry standard",
                                      "Worse than the "
                                      ]
                        display_service_op = str(chart_para['sr_sla']).strip("-") + "% " + "Potential reduction"

                    elif chart_para['sr_sla'] < 0 and chart_para['sr_std'] < 0:
                        chart_para['sr_sla'] = abs(chart_para['sr_sla'])
                        chart_para['sr_std'] = abs(chart_para['sr_std'])
                        service_op = ["Worse than the Industry standard",
                                      "Worse than the "
                                      ]
                        display_service_op = str(chart_para['sr_sla']).strip("-") + "% " + "Potential reduction"

                    display_op_list = [
                        "Potential Cost saving and SLA improvements from <span style='color:#f4b400'>Aitos<sup style='font-size:0.2em;top: -2.5em;'>TM</sup></span> Managed Services:",
                        "++++Operation Cost Savings#### : " + display_operation_op + "</br>",
                        "++++Incident Response Time#### : " + str(chart_para['inc_init_response']).strip(
                            "-") + "% Potential reduction" + "</br>",
                        "++++Incident Resolution Time#### : " + display_incident_op + "</br>",
                        "++++Service Request Response Time#### : " + str(chart_para['sr_init_response']).strip(
                            "-") + "% Potential reduction" + "</br>",
                        "++++Service Request SLAs#### : " + display_service_op + "</br>",

                        ]
                else:
                    chart_para['sr_sla_flag'] = False
                    chart_para['cost_flag'] = False
                    chart_para['inc_sla_flag'] = False
                    operation_op = ["More than Industry Standard"]
                    incident_op = ["More than Industry Standard"]
                    service_op = ["More than Industry Standard"]
                    display_op_list = [
                        "Operation Cost Savings:", " " + str(chart_para['cost_std']) + "% more than Industry Standard",
                        "Incident SLA Response Time:",
                                                   " " + str(chart_para['inc_std']) + "% more than Industry Standard",
                        "Service Request SLA Response Time:",
                                                   " " + str(chart_para['sr_std']) + "% more than Industry Standard",

                                                   ]
                outputlist["Meeting Points"] = display_op_list + outputlist["Meeting Points"]
                chart_para['operation_op'] = operation_op
                chart_para['incident_op'] = incident_op
                chart_para['service_op'] = service_op
                return render(request, 'msp_multitabs.html', {'output_list': outputlist, "chart_para":chart_para})

        elif glb_user_ios == "application":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]

            for el in request.GET:
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)

            # print response_data
            if phase == "Plan":
                # test_flag = True
                # if test_flag:
                #     set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                #     result = set_inputs_to_db.overwriteTlDb()
                # data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                # inputs = data.getInputsFromDb()
                # input_list = inputs.split(' ')
                # user_data = {}
                # # print "###", input_list
                # for el in input_list:
                #     # print el,"got it>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>."
                #     if response_data.get(el):
                #         # print ">>", response_data.get(el)
                #         temp_str = response_data.get(el)
                #         if type(temp_str) == list:
                #             temp_str = ','.join(temp_str)
                #         else:
                #             temp_str = ' '.join(temp_str.split())
                #         temp_str = re.sub(r"\s+$", ' ', temp_str)
                #         user_data[el] = temp_str
                #     else:
                #         value = "<%s>" % el
                #         user_data[el] = value
                # # print user_data
                # new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # # print "+=======", new_user_dict
                # modified_output = data.convet_template_to_config(request, new_user_dict)
                # glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                # questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                # questionnaire_output = modified_output + questionnaire_output
                # pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                # pres_output = pres.getModTemplateOutput()
                # outputlist = {}
                # print outputlist
                # print response_data,"In Plan"
                # outputlist[phase] = modified_output

                # Apllication Json File
                f = open('./mysite/Json_DATA/application_option.json')
                application_json_data = json.load(f)
                if response_data.has_key("new_application_name"):
                    new_app_dict = {response_data.get("new_application_name"): {}}
                    if response_data.has_key('main_components'):
                        new_app_dict[response_data.get("new_application_name")]["main_components"] = response_data.get(
                            'main_components')
                    if response_data.has_key('requirements'):
                        new_app_dict[response_data.get("new_application_name")]["requirements"] = response_data.get(
                            'requirements')
                    if response_data.has_key('server_requirements'):
                        new_app_dict[response_data.get("new_application_name")][
                            "server_requirements"] = response_data.get('server_requirements')
                    if response_data.has_key('security_requirements'):
                        new_app_dict[response_data.get("new_application_name")][
                            "security_requirements"] = response_data.get('security_requirements')
                    if response_data.has_key('client_requirements'):
                        new_app_dict[response_data.get("new_application_name")][
                            "client_requirements"] = response_data.get('client_requirements')

                    application_json_data.update(new_app_dict)

                with open('./mysite/Json_DATA/application_option.json',
                          'w') as json_data:
                    json.dump(application_json_data, json_data)

                # outputlist["Plan"] = ""
                # outputlist["Configuration"] = ""
                # for index, item in enumerate(pres_output):
                #     if index == 0:
                #         pres_output[index] = outputlist
                # return render(request, 'tabs.html', {'output_list': outputlist})
                # request.session["ext_dict"]["ext_name"]="Plan"
                return render(request, 'notification.html',
                              {'output_list': "Data saved Succefully ", 'class': 'alert-success'})
            if phase in ["Design"]:
                outputlist = collections.OrderedDict()
                request.session["ext_dict"]["ext_name"] = "Design"
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                # for design template
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output

                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print '>>>>>>>>>>>',pres_output
                # print "SSSSSSSSSSS",questionnaire_output
                op_list = []

                # return render(request, 'tabstest.html', {'output_list': outputlist, 'var_flag': 2})

                # print "{.........", modified_output

                # outputlist[phase] = pres_output
                outputlist["Design"] = modified_output
                outputlist["Diagram"] = ""
                # Network COnfig Template call
                request.session["ext_dict"]["ext_name"] = "Network Config"
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                for el in input_list:
                    if response_data.get(el):
                        print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict

                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output

                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print '>>>>>>>>>>>',pres_output
                # print modified_output
                outputlist["Network Config"] = pres_output[0]['Implementation Plan']['line']
                # print outputlist
                print "firewall Policies Tables"
                name = "./mysite/Application_Static_Data/Firewall_polices.csv"
                response_csv = get_info_dict(name)
                # print response_csv
                src_ip = ""
                des_ip = ""
                for entry_dict in response_csv:
                    if entry_dict['ports']:
                        entry_dict['ports'] = entry_dict['ports'].replace(" ", ",").strip('"')
                    if "destination_mask" in entry_dict:
                        del entry_dict["destination_mask"]
                    if "source_mask" in entry_dict:
                        del entry_dict["source_mask"]
                    if "service_required" in entry_dict:
                        del entry_dict["service_required"]

                for key, value in response_data.iteritems():
                    if key == "DB_Server_IP":
                        if "," in value:
                            des_ip = value.split(",")
                        else:
                            des_ip = [value]
                    if key == "APP_Server_VIP_IP":
                        if "," in value:
                            src_ip = value.split(",")
                        else:
                            src_ip = [value]

                if len(src_ip) > 1 and len(des_ip) > 1:
                    for i in range(len(src_ip)):
                        for j in range(len(des_ip)):
                            response_csv.append(
                                {'source_mask': '', 'protocol': 'TCP', 'nat_ip': '', 'service_required': '',
                                 'source_ip_address': src_ip[i], 'destination_ip_address': des_ip[j],
                                 'line': int(response_csv[len(response_csv) - 1]["line"]) + 1, 'destination_mask': '',
                                 'ports': '433'})
                elif len(src_ip) > 1 and len(des_ip) == 1:
                    for i in range(len(src_ip)):
                        response_csv.append({'source_mask': '', 'protocol': 'TCP', 'nat_ip': '', 'service_required': '',
                                             'source_ip_address': src_ip[i], 'destination_ip_address': des_ip[0],
                                             'line': int(response_csv[len(response_csv) - 1]["line"]) + 1,
                                             'destination_mask': '', 'ports': '433'})
                elif len(src_ip) != 0 and len(des_ip) != 0:
                    response_csv.append({'source_mask': '', 'protocol': 'TCP', 'nat_ip': '', 'service_required': '',
                                         'source_ip_address': src_ip[0], 'destination_ip_address': des_ip[0],
                                         'line': int(response_csv[len(response_csv) - 1]["line"]) + 1,
                                         'destination_mask': '', 'ports': '433'})
                # print sorted(outputlist)

                #     for key, value in each_dict.iteritems():
                #         print key, value
                #
                #     break
                # outputlist["Firewall Policies"] = response_csv
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                request.session["ext_dict"]["ext_name"] = "Design"
                return render(request, 'tabstest.html',
                              {'output_list': outputlist, 'var_flag': 2, 'result': response_csv})
                # return render(request, 'greenfield_filter.html',
                #               {'entry': op_list, 'class': 'alert-success', 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                # {'output_list': pres_output, "var_flag": 2, "id_flag": request.session['id_flag']})
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})

            # if phase == "Verification":
            #     outputlist = []
            #     table_data = {
            #         "data_center": {"App Server": {"ip_add": "10.100.100.1", "status": "Passed"},
            #                         "Database Server": {"ip_add": "10.100.100.1", "status": "Passed"},
            #                         "VoIP Server": {"ip_add": "10.100.100.1", "status": "Failed"}},
            #         "core_network": {"Clinical Devices": {"ip_add": "10.100.125.1", "status": "Passed"},
            #                          "Nursing Stations": {"ip_add": "10.100.100.1", "status": "Passed"},
            #                          "Nursing Users": {"ip_add": "10.100.100.1", "status": "Passed"}},
            #         "application_flow": {"Nursing Station": {"ip_add": "10.100.100.1", "status": "Passed"},
            #                              "Database Server": {"ip_add": "10.100.100.1", "status": "Passed"},
            #                              "VoIP Server": {"ip_add": "10.100.100.1", "status": "Failed"}}
            #     }
            #
            #     return render(request, 'application_verification.html',
            #                   {'output_list': outputlist, "table_data": table_data})
            if phase == "validate":
                return render(request, 'notification.html',
                              {'output_list': "inputs Saved", 'class': 'alert-danger'})

            if phase == "Implimentation":
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)
                print op_list
                return render(request, 'greenfield_tabs_table.html',
                              {'output_list': {"Configuration": []}, 'tablelist': op_list})

        elif glb_user_ios == "mscale2":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)

            with open('/home/ubuntu/prepro/mysite/mysite/Design_json_input_data/' + taskid + '_' + subtaskid + '.json',
                      'w') as data:
                json.dump(response_data, data)
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "Design":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if not v:
                        if type(v) == list:
                            output_dictionary['l_flag'] = True
                            # v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)

                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                if taskid:
                    entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                              subtaskid=subtaskid,
                                                                                              customer=customer).last()
                    # print entry
                    if entry:
                        status = entry[2]
                        if str(status) == "1":
                            output = 'Service Is Under Process'
                            # print output
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        if str(status) == "4" or str(status) == "0":
                            insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                                         modified_output, [], [], 4)
                    else:
                        insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                                     [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'class': 'alert-success', 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                # {'output_list': pres_output, "var_flag": 2, "id_flag": request.session['id_flag']})
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "validate":
                return render(request, 'notification.html',
                              {'output_list': "inputs Saved", 'class': 'alert-danger'})

            if phase == "Implimentation":
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)
                print op_list
                return render(request, 'greenfield_tabs_table.html',
                              {'output_list': {"Configuration": []}, 'tablelist': op_list})

        elif glb_user_ios == "mscale":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "Design":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if not v:
                        if type(v) == list:
                            output_dictionary['l_flag'] = True
                            # v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)

                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                if taskid:
                    entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                              subtaskid=subtaskid,
                                                                                              customer=customer).last()
                    # print entry
                    if entry:
                        status = entry[2]
                        if str(status) == "1":
                            output = 'Service Is Under Process'
                            # print output
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        if str(status) == "4" or str(status) == "0":
                            insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                                         modified_output, [], [], 4)
                    else:
                        insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                                     [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'class': 'alert-success', 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                # {'output_list': pres_output, "var_flag": 2, "id_flag": request.session['id_flag']})
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "validate":
                return render(request, 'notification.html',
                              {'output_list': "inputs Saved", 'class': 'alert-danger'})

            if phase == "Implimentation":
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)
                print op_list
                return render(request, 'greenfield_tabs_table.html',
                              {'output_list': {"Configuration": []}, 'tablelist': op_list})

        elif glb_user_ios == "brownfield":
            print "Brown Field"
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                print "user_data>>>>>>"
                print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                cost = calculate_cost(response_data)

                cost = {'total_sr': int(cost[0]) / 60, 'total_jr': int(cost[1]) / 60}
                # print " Cost >>>>>>", cost
                for k, v in response_data.iteritems():
                    output_dictionary = {}
                    if v:
                        if type(v) == list:
                            # v = ','.join(v)
                            output_dictionary["l_flag"] = True
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v

                        op_list.append(output_dictionary)
                    # print op_list
                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                if taskid:
                    entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                              subtaskid=subtaskid,
                                                                                              customer=customer).last()
                    # print entry
                    if entry:
                        status = entry[2]
                        if str(status) == "1":
                            output = 'Service Is Under Process'
                            # print output
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        if str(status) == "4" or str(status) == "0":
                            insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                                         modified_output, [], [], 4)
                    else:
                        insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                                     [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'class': 'alert-success', 'ftype': '1', 'cost': cost})
            if phase == "Design":
                return render(request, 'brownfield_design_dropzone.html',
                              {'type': "", 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': ""})
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "Discovery":
                overwrite_flag = request.GET.get('overwrite')
                return render(request, 'brownfield_design_dropzone.html',
                              {'taskid': taskid, 'subtaskid': subtaskid, 'customer': request.session["customer"],
                               'type': phase, "overwrite": overwrite_flag})
            if phase == "Verification":
                old_switch = request.GET.get('old_switch')
                vlan_change = request.GET.get('vlan_change')
                old_vlans = ""
                new_vlan = ""
                if request.GET.has_key("old_vlans") and request.GET.has_key("new_vlan"):
                    old_vlans = request.GET.get('old_vlans')
                    new_vlan = request.GET.get('new_vlan')
                request.session["old_data"] = {'old_switch': old_switch, 'vlan_change': vlan_change,
                                               'old_vlans': old_vlans, 'new_vlan': new_vlan}
                return render(request, 'brownfield_design_dropzone.html',
                              {'taskid': taskid, 'subtaskid': subtaskid, 'customer': request.session["customer"],
                               'type': phase})

        elif glb_user_ios == "network_assurance":
            print "Network Assurance"
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                for k, v in response_data.iteritems():
                    output_dictionary = {}
                    if type(v) == list:
                        v = ','.join(v)
                    print k.replace("_", " ").title(), ": " + v
                    output_dictionary["key"] = k.replace("_", " ").title()
                    output_dictionary["value"] = v
                    op_list.append(output_dictionary)

                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                if taskid:
                    entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                              subtaskid=subtaskid,
                                                                                              customer=customer).last()
                    # print entry
                    if entry:
                        status = entry[2]
                        if str(status) == "1":
                            output = 'Service Is Under Process'
                            # print output
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        if str(status) == "4" or str(status) == "0":
                            insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                                         modified_output, [], [], 4)
                    else:
                        insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                                     [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'class': 'alert-success', 'ftype': '1'})
            if phase == "Design":
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if type(v) == list:
                        v = ','.join(v)
                    output_dictionary["key"] = k
                    output_dictionary["title"] = k.replace("_", " ").title()
                    output_dictionary["ex_value"] = ""
                    output_dictionary["value"] = v
                    op_list.append(output_dictionary)
                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=taskid,
                                                                               subtaskid=00,
                                                                               field_name='hostname').last()
                if q:
                    hostname = q[0]
                    with open('/home/ubuntu/prepro/mysite/mysite/Json_DATA/Devices.json') as device_json_data:
                        device_data = json.load(device_json_data)
                        existing_dict = device_data[hostname]
                    for dict_x in op_list:
                        indx = op_list.index(dict_x)
                        if dict_x['key'] in existing_dict:
                            if type(existing_dict[dict_x['key']]) == list:
                                existing_dict[dict_x['key']] = ','.join(existing_dict[dict_x['key']])
                            dict_x['ex_value'] = existing_dict[dict_x['key']]
                        op_list[indx] = dict_x
                return render(request, 'new_greenfield_filter.html',
                              {'new_dict': op_list, 'class': 'alert-success', 'ftype': '1'})
            if phase == "Discovery":
                overwrite_flag = request.GET.get('overwrite')
                return render(request, 'brownfield_design_dropzone.html',
                              {'taskid': taskid, 'subtaskid': subtaskid, 'customer': request.session["customer"],
                               'type': phase, "overwrite": overwrite_flag})
            if phase == "Verification":
                old_switch = request.GET.get('old_switch')
                vlan_change = request.GET.get('vlan_change')
                old_vlans = ""
                new_vlan = ""
                if request.GET.has_key("old_vlans") and request.GET.has_key("new_vlan"):
                    old_vlans = request.GET.get('old_vlans')
                    new_vlan = request.GET.get('new_vlan')
                request.session["old_data"] = {'old_switch': old_switch, 'vlan_change': vlan_change,
                                               'old_vlans': old_vlans, 'new_vlan': new_vlan}
                return render(request, 'brownfield_design_dropzone.html',
                              {'taskid': taskid, 'subtaskid': subtaskid, 'customer': request.session["customer"],
                               'type': phase})

        elif glb_user_ios == "sd_wan":
            response_data = {}
            if "_" in request.session["ext_dict"]["ext_name"]:
                request.session["ext_dict"]["ext_name"] = request.session["ext_dict"]["ext_name"].split("_")[0]
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer,
                                                      request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "Plan":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer,
                                                      request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                # outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                outputlist["Reference Design"] = ""
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs_sdwanPlan.html', {'output_list': outputlist})
            if phase == "Implimentation":
                print "???>>>>>>"
                # op_dict = generate_sdwan_inputs(response_data)
                # op_list = []
                # for k, v in op_dict.iteritems():
                #     # print k, v
                #     output_dictionary = {}
                #     if type(v) == list:
                #         v = ','.join(v)
                #     output_dictionary["key"] = k
                #     output_dictionary["title"] = k.replace("_", " ").title()
                #     output_dictionary["ex_value"] = ""
                #     output_dictionary["value"] = v
                #     op_list.append(output_dictionary)

                sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                            'tech': request.session['user_tech'], 'type': request.session['user_type'],
                            'user_name': "", 'customer': customer}
                if request.GET.get("site_type") == "1":
                    request.session["ext_dict"]["ext_name"] = request.session["ext_dict"]["ext_name"] + "_dc"
                elif request.GET.get("site_type") == "2":
                    request.session["ext_dict"]["ext_name"] = request.session["ext_dict"]["ext_name"] + "_large"
                elif request.GET.get("site_type") == "3":
                    request.session["ext_dict"]["ext_name"] = request.session["ext_dict"]["ext_name"] + "_medium"
                elif request.GET.get("site_type") == "4":
                    request.session["ext_dict"]["ext_name"] = request.session["ext_dict"]["ext_name"] + "_small"

                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                      request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                      request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if isinstance(temp_str, list):
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = sorted(pres.getModTemplateOutput())
                for e_press_dict in pres_output:
                    if "Implementation Plan" in e_press_dict:
                        pres_output.remove(e_press_dict)
                # print pres_output
                # return render(request, 'temaplate_output_tabs.html',
                #               {'output_list': pres_output, "var_flag": "1"})

                # return render(request, 'greenfield_filter.html',
                #               {'entry': op_list, 'ftype': '1'})
                return render(request, 'temaplate_output_tabs.html',
                              {'output_list': pres_output, "var_flag": "1"})
                # return render(request, 'greenfield_tabs_table.html',
                #               {'output_list': pres_output, 'tablelist': op_list})
            if phase == "Design":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                # print pres_output
                op_list = []
                for k, v in response_data.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if not v:
                        if type(v) == list:
                            output_dictionary['l_flag'] = True
                            # v = ','.join(v)
                        # print k.replace("_", " ").title(), ": " + v
                        output_dictionary["key"] = k.replace("_", " ").title()
                        output_dictionary["value"] = v
                        op_list.append(output_dictionary)

                # print "{.........", modified_output
                outputlist = {}
                outputlist[phase] = modified_output
                outputlist["Reference Design"] = ""
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                if taskid:
                    entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                              subtaskid=subtaskid,
                                                                                              customer=customer).last()
                    # print entry
                    if entry:
                        status = entry[2]
                        if str(status) == "1":
                            output = 'Service Is Under Process'
                            # print output
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        if str(status) == "4" or str(status) == "0":
                            insert_entry(taskid, subtaskid, customer, new_user_dict, "",
                                         modified_output, [], [], 4)
                    else:
                        insert_entry(taskid, subtaskid, customer, new_user_dict, "", modified_output,
                                     [], [], 4)
                # return render(request, 'tabs_configuration.html', {'output_list': outputlist, 'var_flag': 2})
                return render(request, 'tabs_sdwanDesign.html',
                              {'output_list': outputlist, 'class': 'alert-success', 'ftype': '1'})
                # op_dict = generate_sdwan_inputs(response_data)
                # op_list = []
                # for k, v in op_dict.iteritems():
                #     # print k, v
                #     output_dictionary = {}
                #     if type(v) == list:
                #         v = ','.join(v)
                #     output_dictionary["key"] = k
                #     output_dictionary["title"] = k.replace("_", " ").title()
                #     output_dictionary["ex_value"] = ""
                #     output_dictionary["value"] = v
                #     op_list.append(output_dictionary)
                #
                # return render(request, 'greenfield_filter.html',
                #               {'entry': op_list, 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                #               {'output_list': pres_output, "var_flag": "1"})
                # return render(request, 'greenfield_tabs_table.html',
                #               {'output_list': pres_output, 'tablelist': op_list})
            if phase == "Design_VN":
                op_dict = generate_sdwan_inputs(response_data)
                op_list = []
                for k, v in op_dict.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if type(v) == list:
                        v = ','.join(v)
                    output_dictionary["key"] = k
                    output_dictionary["title"] = k.replace("_", " ").title()
                    output_dictionary["ex_value"] = ""
                    output_dictionary["value"] = v
                    op_list.append(output_dictionary)

                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                #               {'output_list': pres_output, "var_flag": "1"})
                # return render(request, 'greenfield_tabs_table.html',
                #               {'output_list': pres_output, 'tablelist': op_list})
            if phase == "validate":
                op_dict = generate_sdwan_inputs(response_data)
                op_list = []
                for k, v in op_dict.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if type(v) == list:
                        v = ','.join(v)
                    output_dictionary["key"] = k
                    output_dictionary["title"] = k.replace("_", " ").title()
                    output_dictionary["ex_value"] = ""
                    output_dictionary["value"] = v
                    op_list.append(output_dictionary)

                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                #               {'output_list': pres_output, "var_flag": "1"})
                # return render(request, 'greenfield_tabs_table.html',
                #               {'output_list': pres_output, 'tablelist': op_list})

        elif glb_user_ios == "cisco_ise":
            response_data = {}
            phase = request.session["ext_dict"]["ext_name"]
            for el in request.GET:
                print el
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            if phase == "Checklist":
                test_flag = True
                if test_flag:
                    set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer,
                                                      request.session["ext_dict"])
                    result = set_inputs_to_db.overwriteTlDb()
                data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
                inputs = data.getInputsFromDb()
                input_list = inputs.split(' ')
                user_data = {}
                # print "###", input_list
                for el in input_list:
                    # print el
                    if response_data.get(el):
                        # print ">>", response_data.get(el)
                        temp_str = response_data.get(el)
                        if type(temp_str) == list:
                            temp_str = ','.join(temp_str)
                        else:
                            temp_str = ' '.join(temp_str.split())
                        temp_str = re.sub(r"\s+$", ' ', temp_str)
                        user_data[el] = temp_str
                    else:
                        value = "<%s>" % el
                        user_data[el] = value
                # print user_data
                new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
                # print "+=======", new_user_dict
                modified_output = data.convet_template_to_config(request, new_user_dict)
                glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                questionnaire_output = modified_output + questionnaire_output
                pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                pres_output = pres.getModTemplateOutput()
                outputlist = {}
                outputlist['Configuration'] = {}
                outputlist[phase] = modified_output
                for index, item in enumerate(pres_output):
                    if index == 0:
                        pres_output[index] = outputlist
                return render(request, 'tabs.html', {'output_list': outputlist})
            if phase == "Plan":
                op_dict = generate_sdwan_inputs(response_data)
                op_list = []
                for k, v in op_dict.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if type(v) == list:
                        v = ','.join(v)
                    output_dictionary["key"] = k
                    output_dictionary["title"] = k.replace("_", " ").title()
                    output_dictionary["ex_value"] = ""
                    output_dictionary["value"] = v
                    op_list.append(output_dictionary)

                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                #               {'output_list': pres_output, "var_flag": "1"})
                # return render(request, 'greenfield_tabs_table.html',
                #               {'output_list': pres_output, 'tablelist': op_list})
            if phase == "Design":
                op_dict = generate_sdwan_inputs(response_data)
                op_list = []
                for k, v in op_dict.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if type(v) == list:
                        v = ','.join(v)
                    output_dictionary["key"] = k
                    output_dictionary["title"] = k.replace("_", " ").title()
                    output_dictionary["ex_value"] = ""
                    output_dictionary["value"] = v
                    op_list.append(output_dictionary)

                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                #               {'output_list': pres_output, "var_flag": "1"})
                # return render(request, 'greenfield_tabs_table.html',
                #               {'output_list': pres_output, 'tablelist': op_list})
            if phase == "Implimentation":
                op_dict = generate_sdwan_inputs(response_data)
                op_list = []
                for k, v in op_dict.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if type(v) == list:
                        v = ','.join(v)
                    output_dictionary["key"] = k
                    output_dictionary["title"] = k.replace("_", " ").title()
                    output_dictionary["ex_value"] = ""
                    output_dictionary["value"] = v
                    op_list.append(output_dictionary)

                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                #               {'output_list': pres_output, "var_flag": "1"})
                # return render(request, 'greenfield_tabs_table.html',
                #               {'output_list': pres_output, 'tablelist': op_list})
            if phase == "validate":
                op_dict = generate_sdwan_inputs(response_data)
                op_list = []
                for k, v in op_dict.iteritems():
                    # print k, v
                    output_dictionary = {}
                    if type(v) == list:
                        v = ','.join(v)
                    output_dictionary["key"] = k
                    output_dictionary["title"] = k.replace("_", " ").title()
                    output_dictionary["ex_value"] = ""
                    output_dictionary["value"] = v
                    op_list.append(output_dictionary)

                return render(request, 'greenfield_filter.html',
                              {'entry': op_list, 'ftype': '1'})
                # return render(request, 'temaplate_output_tabs.html',
                #               {'output_list': pres_output, "var_flag": "1"})
                # return render(request, 'greenfield_tabs_table.html',
                #               {'output_list': pres_output, 'tablelist': op_list})

        elif glb_user_type == "Add New Template":
            if request.GET.get('template_name'):
                template_name = request.GET.get('template_name') + '_Template'
                # verify same template does not exists already
                db = ConvertUserToDbVar(glb_user_ios, glb_user_plat, glb_user_tech, "")
                entry = template_db.objects.filter(customer__icontains=customer,
                                                   template=request.GET.get('template_name')).last()
                if not entry:
                    # if db.is_it_new_type(template_name):
                    db.updateTpToTypeList(template_name)
                    output_list = "Template '%s' Added Successfully" % template_name
                    com_dict = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech}
                    temp_output = request.GET.get('template_text')
                    para = ParseNewTemplate(com_dict, customer, template_name, temp_output)
                    val = para.overwriteTemplateParaToDb()
                    return render(request, 'notification.html', {'output_list': output_list, 'class': 'alert-success'})
                else:
                    # Existing Tempalate
                    output_str = "%s already exists" % template_name
                    output_list = output_str
                    return render(request, 'notification.html', {'output_list': output_list, 'class': 'alert-danger'})
        elif glb_user_type == "Modify Existing Template":
            if request.GET.get('template_name'):
                from mysite.models import template_db
                template_name = request.GET.get('template_name') + '_Template'
                # verify same template does not exists already
                db = ConvertUserToDbVar(glb_user_ios, glb_user_plat, glb_user_tech, "")
                entry = template_db.objects.filter(customer__icontains=customer,
                                                   template=request.GET.get('template_name')).last()
                if entry:
                    db.updateTpToTypeList(template_name)
                    output_list = "Template '%s' Modified Successfully" % template_name
                    com_dict = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech}
                    temp_output = request.GET.get('template_text')
                    para = ParseNewTemplate(com_dict, customer, template_name, temp_output, request.session["ext"])
                    # val = para.overwriteTemplateParaToDb()
                    return render(request, 'notification.html', {'output_list': output_list, 'class': 'alert-success'})
                else:
                    # Existing Tempalate
                    output_str = "%s already exists" % template_name
                    output_list = output_str
                    return render(request, 'notification.html', {'output_list': output_list, 'class': 'alert-danger'})
        elif glb_user_type == "Delete Existing Template":
            print " In Delete Existing Template"
            # sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech}

            if request.GET.get('template_name'):
                template_db = ConvertUserToDbVar(glb_user_ios, glb_user_plat, glb_user_tech, "")
                before_tp_list = template_db.getTpList()
                result = template_db.deleteTpFromDb(request.GET.get('template_name'), customer)
                after_tp_list = template_db.getTpList()
                output = result
                return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                # return render(request, 'added_template.html',{'output_list': output_list})
        # reading the existing template
        elif glb_user_type == 'New Object Groups' and glb_user_ios == 'Enterprise_Firewalls':
            print 'I am in Enterprise_Firewalls 2017'
            import datetime
            # need to save these values to the database for fetching the values.
            save_file_flag = False
            # sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech, 'type': glb_user_type,
            #             'user_name': current_user}
            user_data_device_1 = {}
            user_data_device_2 = {}
            user_data_device_3 = {}
            file_list = request.session['file_list']
            device_list = request.session['device_list']

            device_num_list = request.session['device_num_list']
            # input_list = request.session['input_list'] + request.session['feature_input_list']
            # input_list = request.session['input_list']
            input_list = []
            feature_combination_list = []

            for el, value in request.GET.iteritems():
                input_list.append(el)

            for el in input_list:
                if request.GET.get(el):
                    temp_str1 = request.GET.get(el)
                    temp_str1 = ' '.join(temp_str1.split())
                if re.search("_1$", el):
                    key = re.sub('_1$', '', el)
                    if request.GET.get(el):
                        temp_str = request.GET.get(el)
                        temp_str = ' '.join(temp_str.split())
                        user_data_device_1[key] = re.sub(r"\s+$", '', temp_str)
                    else:
                        user_data_device_1[key] = "<%s>" % key
                elif re.search("_2$", el):
                    key = re.sub('_2$', '', el)
                    if request.GET.get(el):
                        temp_str = request.GET.get(el)
                        temp_str = ' '.join(temp_str.split())
                        user_data_device_2[key] = re.sub(r"\s+$", '', temp_str)
                    else:
                        user_data_device_2[key] = "<%s>" % key
                elif re.search("_3$", el):
                    key = re.sub('_3$', '', el)
                    if request.GET.get(el):
                        temp_str = request.GET.get(el)
                        temp_str = ' '.join(temp_str.split())
                        user_data_device_3[key] = re.sub(r"\s+$", '', temp_str)
                    else:
                        user_data_device_3[key] = "<%s>" % key
                else:
                    # common parameters
                    if request.GET.get(el):
                        temp_str = request.GET.get(el)
                        temp_str = ' '.join(temp_str.split())
                        user_data_device_1[el] = re.sub(r"\s+$", '', temp_str)
                        user_data_device_2[el] = re.sub(r"\s+$", '', temp_str)
                        user_data_device_3[el] = re.sub(r"\s+$", '', temp_str)
                    else:
                        user_data_device_1[el] = "<%s>" % el
                        user_data_device_2[el] = "<%s>" % el
                        user_data_device_3[el] = "<%s>" % el

            now = datetime.datetime.now()
            timestamp = now.strftime("%Y-%m-%d")
            modified_output_list = []
            # user_data_device_1['user_id'] = request.user()
            user_data_device_1['user_id'] = 'jkulkarni'
            user_data_device_1['time_stamp'] = now.strftime("%Y-%m-%d")
            new_user_dict_device_1 = convert_fw_inputs_to_new_dict(user_data_device_1)
            device_name_1 = device_list[0]
            feature_combination_list = ['src_object', 'dst_object', 'service_object']
            for key in new_user_dict_device_1:
                if key == 'protocol':
                    if new_user_dict_device_1.get(key) == [u'ip']:
                        feature_combination_list.__delitem__(2)
                elif key == 'dst_object':
                    if new_user_dict_device_1.get(key) == [u'<dst_object>']:
                        feature_combination_list.__delitem__(1)
                elif key == 'src_object':
                    if new_user_dict_device_1.get(key) == [u'<src_object>']:
                        feature_combination_list.__delitem__(0)
                        # if firewall_name == 'STNNC-420-RS01':
                        #     name = 'STNNC-420-RS01 and STNMC-WECH-RS01'
                        # elif firewall_name == 'STNMC-WECH-RS01':
                        #     continue
                        # elif firewall_name == 'STNFOR-L32-FW01':
                        #     name = 'STNFOR-L32-FW01 and STNNC-BDD-FW01'
                        # elif firewall_name == 'STNNC-BDD-FW01':
            for key in new_user_dict_device_1:
                if key == 'src_2_object' or key == 'dst_2_object' or key == 'service_2_object':
                    feature_combination_list.append(key)
                elif key == 'new_rule':
                    if new_user_dict_device_1.get(key) == [u'yes']:
                        feature_combination_list.append(key)

            modified_output_device_1 = convert_firewall_template_to_config(user_data_device_1, new_user_dict_device_1,
                                                                           feature_combination_list, file_list[0])
            modified_output_list.append({device_name_1 + ' ' + 'Configuration': multi_device_template_output(sel_para,
                                                                                                             modified_output_device_1)})
            if device_name_1 == 'STNNC-420-RS01':
                modified_output_list.append({'STNMC-WECH-RS01' + ' ' + 'Configuration': multi_device_template_output(
                    sel_para, modified_output_device_1)})
            elif device_name_1 == 'STNFOR-L32-FW01':
                modified_output_list.append({'STNNC-BDD-FW01' + ' ' + 'Configuration': multi_device_template_output(
                    sel_para, modified_output_device_1)})
            if len(device_list) > 1:
                device_name_2 = device_list[1]
                user_data_device_2['user_id'] = 'sch1'
                # user_data_device_2['user_id'] = request.user
                user_data_device_2['time_stamp'] = now.strftime("%Y-%m-%d")
                new_user_dict_device_2 = convert_fw_inputs_to_new_dict(user_data_device_2)
                modified_output_device_2 = convert_firewall_template_to_config(user_data_device_2,
                                                                               new_user_dict_device_2,
                                                                               feature_combination_list, file_list[1])
                modified_output_list.append({device_name_2 + ' ' + 'Configuration': multi_device_template_output(
                    sel_para, modified_output_device_2)})
                if device_name_2 == 'STNNC-420-RS01':
                    modified_output_list.append({
                        'STNMC-WECH-RS01' + ' ' + 'Configuration': multi_device_template_output(
                            sel_para, modified_output_device_2)})
                elif device_name_2 == 'STNFOR-L32-FW01':
                    modified_output_list.append({'STNNC-BDD-FW01' + ' ' + 'Configuration': multi_device_template_output(
                        sel_para, modified_output_device_2)})

            if len(device_list) > 2:
                device_name_3 = device_list[2]
                user_data_device_3['user_id'] = 'sch1'
                # user_data_device_3['user_id'] = request.user
                user_data_device_3['time_stamp'] = now.strftime("%Y-%m-%d")
                new_user_dict_device_3 = convert_fw_inputs_to_new_dict(user_data_device_3)
                modified_output_device_3 = convert_firewall_template_to_config(user_data_device_3,
                                                                               new_user_dict_device_3,
                                                                               feature_combination_list, file_list[0])
                modified_output_list.append({device_name_3 + ' ' + 'Configuration': multi_device_template_output(
                    sel_para, modified_output_device_3)})
            request.session['devices'] = []
            taskid = request.session['taskid']
            subtaskid = request.session['subtaskid']
            customer = request.session['customer']
            if taskid != "":
                print taskid
                config_list = []
                for i in modified_output_list:
                    for k, v in i.iteritems():
                        request.session['devices'].append(k.strip(" Configuration"))
                        output_dict = parse_configuration_2(v)
                    config_list = output_dict["precheck"] + output_dict["config"] + output_dict["postcheck"]
                # output= {'config':[], 'precheck':[],'postcheck':[], 'rollback':[], 'activate_config':[]}

                rollback_list = []
                activate_cmd = []
                entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                          subtaskid=subtaskid,
                                                                                          customer=customer).last()
                print entry
                if entry:
                    status = entry[2]
                    if str(status) == "1":
                        output = 'Service Is Under Process'
                        print output
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                    if str(status) == "4" or str(status) == "0":
                        insert_entry(taskid, subtaskid, customer, input_list, request.session['devices'], config_list,
                                     rollback_list, activate_cmd, 4)
                else:
                    insert_entry(taskid, subtaskid, customer, input_list, request.session['devices'], config_list,
                                 rollback_list, activate_cmd, 4)
            # glb_CombinationsSubmitted = request.session['user_comb']['inputs']
            return render(request, 'template_multi_fw.html', {'output_list': modified_output_list})
        elif glb_user_ios == 'Multiple_Devices' or glb_user_ios == 'Multiple Devices':
            print 'I am in Multiple_Devices 2017 =================='
            # need to save these values to the database for fetching the values.
            save_file_flag = False
            # sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech, 'type': glb_user_type,
            #             'user_name': current_user}
            user_data_device_1 = {}
            user_data_device_2 = {}
            file_list = request.session['file_list']
            # device_list = request.session['device_list']
            # device_num_list = request.session['device_num_list']
            # feature_inputs_list = request.session['feature_input_list']
            input_list = request.session['input_list']
            # input_list = request.session['input_list'] + request.session['feature_input_list']
            feature_list = []
            # feature_list = request.session['feature_list']
            feature_combination_list = []
            device_name_1 = 'Device-1'
            device_name_2 = 'Device-2'
            feature_combination_list_1 = []
            feature_combination_list_2 = []
            user_dict_new = {}

            for key, value in request.GET.iteritems():
                user_dict_new[key] = value
                if value and key == 'device_1_name':
                    device_name_1 = value
                if value and key == 'device_2_name':
                    device_name_2 = value
                if value and not input_list.__contains__(key):
                    input_list.append(key)
                elif key == 'vrf_option':
                    input_list.append('vrf_option')
                if "features[" in key:
                    if request.GET.getlist(key):
                        feature_combination_list += request.GET.getlist(key)
                elif "[" in key:
                    parent_feature = key.split("[]")[0]
                    if request.GET.getlist(key):
                        for child_feature in request.GET.getlist(key):
                            feature_combination = parent_feature + ":" + child_feature
                            feature_combination_list.append(feature_combination)
                elif feature_list.__contains__(key):
                    feature_combination_list.append(key + ':' + value)
            vlan_id_1 = ''
            vlan_id_2 = ''
            for el in input_list:
                if request.GET.get(el):
                    temp_str1 = request.GET.get(el)
                    temp_str1 = ' '.join(temp_str1.split())
                if re.search("_1$", el):
                    key = re.sub('_1$', '', el)
                    if request.GET.get(el):
                        if el == 'interface_1':
                            if get_new2_interface_type('ios', request.GET.get(el)) == 'svi':
                                match = re.search(r"(\d+)", request.GET.get(el))
                                if match:
                                    vlan_id_1 = match.group()
                                    feature_combination_list_1.append('vlan_id')
                        temp_str = request.GET.get(el)
                        temp_str = ' '.join(temp_str.split())
                        user_data_device_1[key] = re.sub(r"\s+$", '', temp_str)
                    else:
                        if key != 'vrf_name':
                            user_data_device_1[key] = "<%s>" % key
                elif re.search("_2$", el):
                    key = re.sub('_2$', '', el)
                    if request.GET.get(el):
                        if el == 'interface_2':
                            if get_new2_interface_type('ios', request.GET.get(el)) == 'svi':
                                match = re.search(r"(\d+)", request.GET.get(el))
                                if match:
                                    vlan_id_2 = match.group()
                                    feature_combination_list_2.append('vlan_id')
                            elif get_new2_interface_type('ios', request.GET.get(el)) == 'subinterface':
                                feature_combination_list_2.append('subinterface')

                        temp_str = request.GET.get(el)
                        temp_str = ' '.join(temp_str.split())
                        user_data_device_2[key] = re.sub(r"\s+$", '', temp_str)
                    else:
                        user_data_device_2[key] = "<%s>" % key
                else:
                    # common parameters
                    if request.GET.get(el):
                        temp_str = request.GET.get(el)
                        temp_str = ' '.join(temp_str.split())
                        user_data_device_1[el] = re.sub(r"\s+$", '', temp_str)
                        user_data_device_2[el] = re.sub(r"\s+$", '', temp_str)
                    else:
                        user_data_device_1[el] = "<%s>" % el
                        user_data_device_2[el] = "<%s>" % el
            new_user_dict_device_1 = convert_inputs_to_new_dict(user_data_device_1)
            new_user_dict_device_2 = convert_inputs_to_new_dict(user_data_device_2)
            if vlan_id_1:
                new_user_dict_device_1['vlan_id'] = [vlan_id_1]
            if vlan_id_2:
                new_user_dict_device_2['vlan_id'] = [vlan_id_2]

            # save the data database

            update_user_input_data = update_user_input_in_db(user_dict_new, current_user, taskid, subtaskid, customer,
                                                             device)
            dict_device_2 = {}

            rd_1 = '200'
            dict_device_1 = {}
            for key in new_user_dict_device_1:
                dict_device_1[key] = new_user_dict_device_1.get(key)
                if key == 'vlan_tag':
                    if request.GET.get(key):
                        feature_combination_list_1.append('subinterface')
                elif key == 'vrf_name':
                    if request.GET.get('vrf_name' + '_1'):
                        feature_combination_list_1.append('vrf')
                        match = re.search(r"(\d+)", request.GET.get('vrf_name' + '_1'))
                        if match:
                            rd_1 = match.group()
                        if request.GET.get('vrf_name' + '_1') == 'blu300':
                            rd_1 = '300'
                elif key == 'interface':
                    dict_device_2['remote_interface'] = new_user_dict_device_1.get(key)
                elif key == 'device_1_name':
                    dict_device_2['remote_device'] = [request.GET.get(key)]
                elif key == 'bgp_as':
                    if request.GET.get('bgp_as_1'):
                        dict_device_2['remote_as'] = [request.GET.get('bgp_as_1')]
                    if request.GET.get('ip_address_2'):
                        dict_device_1['bgp_peer'] = [request.GET.get('ip_address_2')]
            rd_2 = '200'
            for key in new_user_dict_device_2:
                dict_device_2[key] = new_user_dict_device_2.get(key)
                if key == 'vrf_name':
                    if request.GET.get('vrf_name' + '_2'):
                        feature_combination_list_2.append('vrf')
                        match = re.search(r"(\d+)", request.GET.get('vrf_name' + '_2'))
                        if match:
                            rd_2 = match.group()
                elif key == 'interface':
                    dict_device_1['remote_interface'] = new_user_dict_device_2.get(key)
                elif key == 'device_2_name':
                    dict_device_1['remote_device'] = [request.GET.get(key)]
                elif key == 'bgp_as':
                    if request.GET.get('bgp_as_2'):
                        dict_device_1['remote_as'] = [request.GET.get('bgp_as_2')]
                    if request.GET.get('ip_address_1'):
                        dict_device_2['bgp_peer'] = [request.GET.get('ip_address_1')]

            new_user_dict_device_1 = dict_device_1
            new_user_dict_device_2 = dict_device_2
            new_user_dict_device_1['rd'] = [rd_1]
            new_user_dict_device_2['rd'] = [rd_2]
            for el in feature_combination_list:
                feature_combination_list_1.append(el)
                feature_combination_list_2.append(el)
            modified_output_device_1 = convet_template_to_config(user_data_device_1, new_user_dict_device_1,
                                                                 feature_combination_list_1, file_list[0])
            modified_output_device_2 = convet_template_to_config(user_data_device_2, new_user_dict_device_2,
                                                                 feature_combination_list_2, file_list[1])
            # modified_output = modified_output_device_1 + modified_output_device_2
            glb_CombinationsSubmitted = request.session['user_comb']['inputs']
            modified_output_list = []
            modified_output_list.append({device_name_1 + ' ' + 'Configuration': multi_device_template_output(sel_para,
                                                                                                             modified_output_device_1)})
            modified_output_list.append({device_name_2 + ' ' + 'Configuration': multi_device_template_output(sel_para,
                                                                                                             modified_output_device_2)})
            return render(request, 'template_multi_device.html', {'output_list': modified_output_list, 'var_flag': 0})
        elif tp_list.__contains__(glb_user_type) or (
                request.session.has_key("tp_list") and request.session["tp_list"].__contains__(
            glb_user_type)) or not glb_user_type.find('Troubleshooting') == -1 or glb_user_ios == 'JUNOS' \
                or glb_user_ios == 'F5' or glb_user_ios == 'CP':
            print " In Configuration "
            # if glb_user_type == "ACI Bulk Provision Leaf Ports" or glb_user_type == "ACI Bulk Leaf Provisioning" or glb_user_type == "Bulk Port Provisioning":
            if re.search(r'Bulk', glb_user_type):
                response_data = {}
                for el in request.GET:
                    if request.GET.get(el):
                        response_data[el] = request.GET.get(el)
                request.session['action_selected'] = response_data
                uploadtype = ""
                config_action = request.session.get('config_action')
                request.session['sel_para'] = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                                               'type': glb_user_type, 'customer': customer}
                return render(request, 'aci_new_dropzone.html',
                              {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': config_action})
            elif glb_user_type == "Migration C3850 to C9300":
                conversion_method = request.GET.get('conversion_method')
                new_platform = request.GET.get('new_platform')
                config_display = request.GET.get('config_display')
                uplink_module = request.GET.get('uplink_modules')
                if conversion_method == "upload_file":

                    uploadtype = "migration"
                    config_action = ""
                    input_values = {'uplink_module': uplink_module, 'new_platform': new_platform,
                                    'config_display': config_display}
                    return render(request, 'new_file_dropzone.html',
                                  {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                                   'config_action': config_action, 'input_values': json.dumps(input_values)})
                elif conversion_method == "ssh":
                    # Add SSH code an
                    outputlist = {}
                    device_ip = request.session['devices']
                    login = Provision(taskid, subtaskid, device_ip, "netadmin", "C1sco12345", {})
                    # print login.get_login_status()
                    if login.get_login_status()['login_flag']:
                        print "Login Success"
                        complte_op = login.get_show_run_op()
                        print complte_op
                        converted_output = conversion_function(complte_op, new_platform, uplink_module)
                        outputlist["Configuration"] = complte_op
                        var_flag = get_variable_flag(complte_op)
                        # txt_download = 1
                        return render(request, 'tabs_configuration.html',
                                      {'output_list': outputlist, "var_flag": var_flag, "txt_download": 1})

                    return render(request, 'notification.html',
                                  {'output_list': "Work In progress", 'class': 'alert-danger'})
            elif glb_user_type == "Cisco to Juniper":
                uploadtype = "cisco_to_juniper"
                config_action = ""
                skip_interface = request.GET.get("int_to_skip")
                return render(request, 'new_file_dropzone.html',
                              {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': config_action, 'skip_int': skip_interface})
            elif glb_user_type == "Upload Switch Info":
                uploadtype = "upload_sw_info"
                config_action = ""
                store_no = request.GET.get("store_no")
                return render(request, 'patching_mat_newupload_dropzone.html',
                              {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': config_action, 'store_no': store_no})
            elif glb_user_type == "Cisco to Juniper (With VLAN Interface Assignment)":
                uploadtype = "cisco_to_juniper_by_vlan"
                config_action = ""
                skip_interface = request.GET.get("int_to_skip")
                return render(request, 'new_file_dropzone.html',
                              {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': config_action, 'skip_int': skip_interface})
            elif glb_user_type == "Juniper Configuration - Find Duplicate Interfaces":
                uploadtype = "juniper_duplicates"
                config_action = ""
                return render(request, 'new_file_dropzone.html',
                              {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': config_action})
            elif glb_user_type == "Get YML Information from Routers":
                uploadtype = "yml_info"
                config_action = ""
                return render(request, 'new_file_dropzone.html',
                              {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': config_action})
            elif glb_user_type == "Port Mapping Validation":
                print "We R IN Port Mapping"
                uploadtype = "port_valdation"
                config_action = ""
                store_no = request.GET.get('store_name')
                if len(store_no) == 0:
                    return render(request, 'notification.html',
                                  {'output_list': "Enter Store no.", 'class': 'alert-danger'})
                return render(request, 'port_validation_dropzone.html',
                              {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': config_action, "storeno": store_no})
            elif glb_user_type == "ACI Port Provisioning" and request.session["ext_dict"][
                'action'] == "leaf_port_status":
                # print "We R IN Port Provisioning Leaf Status "
                config_action = ""
                print request.user
                leaf = request.GET.get('leaf_id')
                if leaf == "101":
                    leaf_name = "LCAWDCP-01-01-01"
                elif leaf == "102":
                    leaf_name = "LCAWDCP-01-01-02"
                leaf_dict = {"leaf_id": leaf_name, 'leaf_ports': []}
                prereserved_ports = ['Eth 1/45', 'Eth 1/46', 'Eth 1/47', 'Eth 1/48']
                e1 = ACIInterfaceStatusDB.objects.filter(leaf_id=leaf).values('work_order_no', 'physical_port', 'owner',
                                                                              'timestamp', 'status').all()
                available_count = 48
                if e1:
                    for i in range(1, 49):
                        port = "Eth 1/" + str(i)
                        d1 = {'port': port, 'owner': '-', 'status': 'Available', 'time': '-', 'work_order_no': '-'}
                        for each in e1:
                            # print each
                            for key, val in each.iteritems():
                                if key == 'physical_port' and val == port.lower():
                                    d1 = {'port': port, 'owner': each['owner'].title(),
                                          'status': each['status'].replace("_", " ").title(), 'time': each['timestamp'],
                                          'work_order_no': each['work_order_no']}
                                    available_count -= 1
                                    # leaf_dict["leaf_ports"].append(d1)
                                    continue
                                elif port in prereserved_ports:
                                    d1 = {'port': port, 'owner': "NA",
                                          'status': "Special Port", 'time': "NA",
                                          'work_order_no': "NA"}
                                    continue
                            continue

                        # available_count+=1
                        leaf_dict["leaf_ports"].append(d1)
                leaf_dict['avialable_count'] = available_count
                # return render(request, 'notification.html',
                #               {'output_list': "Port Provisioning Leaf Status ", 'class': 'alert-danger'})
                return render(request, 'leaf_status_filter.html',
                              {'entry': leaf_dict, 'class': 'alert-danger'})
                # return render(request, 'port_validation_dropzone.html',
                #               {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                #                'config_action': config_action, "storeno": store_no})
            save_file_flag = False
            test_flag = True
            # sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech, 'type': glb_user_type,
            #             'user_name': current_user}
            if test_flag:
                set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, request.session["ext_dict"])
                result = set_inputs_to_db.overwriteTlDb()
            data = ReadTemplateDb(sel_para, glb_user_type, customer, request.session["ext_dict"])
            inputs = data.getInputsFromDb()
            input_list = inputs.split(' ')
            user_data = {}
            feature_inputs_list = set_inputs_to_db.feature_intput_list
            feature_list = set_inputs_to_db.get_feature_list()
            if feature_inputs_list:
                input_list = input_list + feature_inputs_list
            feature_combination_list = []
            for key, value in request.GET.iteritems():
                if key == 'vrf_option':
                    input_list.append('vrf_option')
                elif "features[" in key:
                    if request.GET.getlist(key):
                        feature_combination_list += request.GET.getlist(key)
                elif "[" in key:
                    # print "feature %s" % key
                    # print request.GET.getlist(key)
                    parent_feature = key.split("[]")[0]
                    if request.GET.getlist(key):
                        for child_feature in request.GET.getlist(key):
                            feature_combination = parent_feature + ":" + child_feature
                            feature_combination_list.append(feature_combination)
                elif feature_list.__contains__(key):
                    feature_combination_list.append(key + ':' + value)
            # feature_combination_list = set_inputs_to_db.feature_combination_list
            # print "-----<<", input_list
            for el in request.GET:
                # if request.GET.get(el):
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            # print response_data
            for el in input_list:
                if response_data.get(el):
                    # print ">>", response_data.get(el)
                    temp_str = response_data.get(el)
                    if type(temp_str) == list:
                        temp_str = ','.join(temp_str)
                    else:
                        temp_str = ' '.join(temp_str.split())
                    temp_str = re.sub(r"\s+$", ' ', temp_str)
                    user_data[el] = temp_str
                else:
                    value = "<%s>" % el
                    user_data[el] = value
            print ">>>>>>>>>>User Data"
            print user_data
            for el in input_list:
                if el == 'hostname':
                    if request.GET.get(el) != '<hostname>':
                        save_file_flag = request.GET.get(el)
            update_user_input_data = data.update_user_input_value(user_data, taskid, subtaskid)
            new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
            print "+=======", new_user_dict
            # if "ACI " in glb_user_type and  new_user_dict.has_key("vlan_id"):
            # vlan_id = new_user_dict.get("vlan_id")[0]
            # q1 = ACI_EPG_Mapping.objects.filter(location=request.session["acilocation"], vlan=vlan_id, customer=request.session["customer"]).last()
            # if not q1 and not vlan_id == "<vlan_id>":
            # output = "Please verify the Vlan ID . Information does Not exist "
            # return render(request, 'notification.html', {'output_list': output,'class':'alert-danger'})
            modified_output = data.convet_template_to_config(request, new_user_dict, feature_combination_list,
                                                             request.session['input_optional_list'])
            topology_output = DrawTopology(sel_para, request.GET)
            # print topology_output.topology_data
            topo_info = GetTopology(sel_para, topology_output.topology_data)
            # topo_info = GetTopology(input_para)
            topo_output = topo_info.get_topology_output()
            modified_output = modified_output + topo_output
            glb_CombinationsSubmitted = request.session['user_comb']['inputs']
            questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
            modified_output = modified_output + questionnaire_output
            if not glb_user_type.find(
                    'Troubleshooting') == -1 or glb_user_type == 'Forwarding' or glb_user_type == 'Traffic Latency' or "Verification" in glb_user_type:
                pres = PresTroubleshootingOutput(sel_para, modified_output, save_file_flag)
            else:
                pres = PresTemplateOutput(sel_para, modified_output, save_file_flag)
            pres_output = pres.getModTemplateOutput()
            # new imp error handling
            # // new code
            user_input_data = change_dict(user_data)
            if glb_user_type == "ACI Port Provisioning":
                ticket_desc = ""
                physical_port1 = ""
                if "," in user_input_data["leaf_id"]:
                    leaf_id = user_input_data["leaf_id"].split(",")
                else:
                    leaf_id = [user_input_data["leaf_id"]]
                if user_input_data.has_key("physical_port1"):
                    if "," in user_input_data["physical_port1"]:
                        physical_port1 = user_input_data["physical_port1"].split(",")
                    else:
                        physical_port1 = [user_input_data["physical_port1"]]
                if user_input_data.has_key("physical_port2"):
                    if "," in user_input_data["physical_port2"]:
                        physical_port2 = user_input_data["physical_port2"].split(",")
                    else:
                        physical_port2 = [user_input_data["physical_port2"]]
                if request.session["config_action"] == "reserve":
                    ticket_desc = ticket_desc + "Following Ports have been reserved for Work Order " + user_input_data[
                        "work_order_no"] + " by user " + str(request.user) + "\n\nFabric: " + request.session[
                                      'devices'] + "\n"
                elif request.session["config_action"] == "deprovision_reservation":
                    ticket_desc = ticket_desc + "Following Ports have been reserved for deprovision for Work Order " + \
                                  user_input_data[
                                      "work_order_no"] + " by user " + customer + "\n\nFabric: " + request.session[
                                      'devices'] + "\n"
                else:
                    ticket_desc = ticket_desc + "Following Ports have been reserved for Work Order " + user_input_data[
                        "work_order_no"] + " by user " + customer + "\n\nFabric: " + request.session['devices'] + "\n"
                if len(leaf_id) >= 1:
                    for leaf in leaf_id:
                        ticket_desc = ticket_desc + "\nLeaf: " + leaf + "\n"
                        indx = leaf_id.index(leaf)
                        if indx == 0:
                            physical_port = physical_port1
                        if indx == 1 and user_input_data.has_key("physical_port2"):
                            physical_port = physical_port2
                        ticket_desc = ticket_desc + "Ports: "
                        for ports in physical_port:
                            ticket_desc = ticket_desc + ports + " "
                            # if request.session["config_action"] and ACIInterfaceStatusDB.objects.filter(work_order_no=user_input_data["work_order_no"],
                            #                           leaf_id=leaf,physical_port=ports).last():
                            #     q1 = ACIInterfaceStatusDB.objects.filter(work_order_no=user_input_data["work_order_no"],
                            #                           leaf_id=leaf,physical_port=ports).last()
                            #     q1.delete()
                            if ACIInterfaceStatusDB.objects.filter(work_order_no=user_input_data["work_order_no"],
                                                                   leaf_id=leaf, physical_port=ports).last():
                                q = ACIInterfaceStatusDB.objects.filter(work_order_no=user_input_data["work_order_no"],
                                                                        leaf_id=leaf, physical_port=ports).update(
                                    taskid=taskid, owner=customer, status=request.session["config_action"])
                            else:
                                q1 = ACIInterfaceStatusDB(taskid=taskid, work_order_no=user_input_data["work_order_no"],
                                                          owner=request.user,
                                                          leaf_id=leaf, physical_port=ports,
                                                          status=request.session["config_action"])
                                q1.save()
                # if request.session["config_action"] in ["reserve", "deprovision_reservation"]:
                #     # service now ticket creation code added 11-01-2019
                #     username = "admin"
                #     password = "qg7RwgPG8XtI"
                #     short_description = ticket_desc  # concatinate work order here
                #     digit = user_input_data["work_order_no"]  # take wordk order no here
                #     caller = 'System Administrator'
                #     short_description = 'ACI Port Reservation for Work Order ' + user_input_data["work_order_no"]
                #     comments = '[{"status": "1", "message": "successful"}]'
                #     # i = datetime.now()
                #     # cur_time = i.strftime('%Y-%m-%d %H:%M:%S')
                #     print "incidence data here"
                #     try:
                #         checkinc = incident_check(username, password, digit)
                #
                #         if checkinc:
                #             print "Here checkinc"
                #             print checkinc
                #             # sysid = 'b36b197fdb32a3009c3ff20ebf9619da'
                #             state = "New"
                #             # short_description1 = 'Ports ' + inputs_list["config_action"] + " " + portstring
                #             comments1 = ticket_desc
                #             returnclose = incident_update(username, password, checkinc, state, short_description,
                #                                           comments1)
                #             q = ACIInterfaceStatusDB.objects.filter(
                #                 work_order_no=user_input_data["work_order_no"]).update(
                #                 servicenowid=checkinc)
                #
                #         else:
                #             incresponse = incident_create(username, password, digit, caller, short_description,
                #                                           ticket_desc,
                #                                           ticket_desc)
                #             incresponse = json.loads(incresponse)
                #             print incresponse
                #             print incresponse['result']['sys_id']
                #             q = ACIInterfaceStatusDB.objects.filter(
                #                 work_order_no=user_input_data["work_order_no"]).update(
                #                 servicenowid=incresponse['result']['sys_id'])
                #     except:
                #         incresponse = {'status': 0, 'message': 'failed'}
            if user_data.has_key('in_int'):
                in_int_type = get_interface_type(glb_user_ios, user_data.get('in_int'))
            else:
                in_int_type = 'def'

            request.session['sel_para'] = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                                           'type': glb_user_type, 'int_type': in_int_type}
            request.session['ref_filename'] = get_ref_output_file_name(request.session['sel_para'])
            # if os.path.isfile(request.session['ref_filename']):
            request.session['ref_input_data'] = get_dict_from_file(request.session['ref_filename'])
            request.session['ref_hostname'] = glb_user_plat + '#'
            # request.session['ref_hostname'] = get_hostname_from_file(request.session['ref_filename'])
            # return render(request, 'notification.html', {'output_list': request.session['ref_filename'],'class':'alert-danger'})
            # print 'user_input_data---------'
            # print user_input_data
            # print 'ref_filename'
            # print request.session['ref_filename']
            if "ACI22" in glb_user_type:
                access_prts = ""
                trunk_prts = ""
                vpc_prts = ""
                pc_prts = ""
                storage_prts = ""
                fex_prts = ""
                leafid = ""
                for ele, val in user_input_data.iteritems():
                    if ele == "access_ports":
                        access_prts = val
                    if ele == "trunk_ports":
                        trunk_prts = val
                    if ele == "vpc_ports":
                        vpc_prts = val
                    if ele == "pc_ports":
                        pc_prts = val
                    if ele == "storage_ports":
                        storage_prts = val
                    if ele == "fex_ports":
                        fex_prts = val
                    if ele == "leaf_id":
                        leafid = val
                if leafid:
                    entry = LeafDB.objects.values_list('location', 'status').filter(
                        location=request.session["acilocation"], leaf_id=leafid).last()
                    if entry:
                        q1 = LeafDB.objects.filter(location=request.session["acilocation"], leaf_id=leafid).update(
                            phy_access_ports=access_prts, phy_trunk_ports=trunk_prts, pc_ports=pc_prts,
                            vpc_ports=vpc_prts, fex_ports=fex_prts, storage_ports=storage_prts, status=1)
                    else:
                        q1 = LeafDB(location=request.session["acilocation"], leaf_id=leafid,
                                    phy_access_ports=access_prts, phy_trunk_ports=trunk_prts, pc_ports=pc_prts,
                                    vpc_ports=vpc_prts, fex_ports=fex_prts, storage_ports=storage_prts, status=1)
                        q1.save()
            request.session['user_input_data'] = user_input_data
            user_input_data['user_type'] = glb_user_type
            user_input_data['ext_dict'] = request.session["ext_dict"]
            if request.session.has_key("config_action"):
                user_input_data['config_action'] = request.session["config_action"]
            config_dict = get_command_list(pres_output)
            # get fitered configuration commands dictionary function in Implementation_function.py
            if taskid:
                # print taskid
                # config_list =
                output_dict = parse_configuration_2(config_dict["command_list"])
                rollback_list = config_dict["rollback_list"]
                # output= {'config':[], 'precheck':[],'postcheck':[], 'rollback':[], 'activate_config':[]}
                config_list = output_dict["precheck"] + output_dict["config"] + output_dict["postcheck"]
                activate_cmd = []
                for i in pres_output:
                    if i.has_key('Activate Configuration'):
                        activate_cmd = i['Activate Configuration']
                entry = CronDB.objects.values_list('taskid', 'customer', 'status').filter(taskid=taskid,
                                                                                          subtaskid=subtaskid,
                                                                                          customer=customer).last()
                # print entry
                if entry:
                    status = entry[2]
                    if str(status) == "1":
                        output = 'Service Is Under Process'
                        print output
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                    if str(status) == "4" or str(status) == "0":
                        insert_entry(taskid, subtaskid, customer, user_input_data, request.session['devices'],
                                     config_list, rollback_list, activate_cmd, 4)
                else:
                    insert_entry(taskid, subtaskid, customer, user_input_data, request.session['devices'], config_list,
                                 rollback_list, activate_cmd, 4)
            elif request.session['id_flag']:
                config_list = filter_command_list(config_dict["command_list"])
                rollback_list = filter_command_list(config_dict["rollback_list"])
                cmd_list = config_list + rollback_list
                write_config_to_file(request, cmd_list)
            if request.session['ref_input_data']:
                # print 'I am here ....new'3
                print pres_output
                return render(request, 'temaplate_output_tabs.html',
                              {'output_list': pres_output, "var_flag": config_dict["flag"],
                               "id_flag": request.session['id_flag']})
            else:
                print 'I am here ....old', request.session['id_flag']

                if 'Verification' in glb_user_type:
                    return render(request, 'old_script_output_tabs.html',
                                  {'output_list': pres_output, "var_flag": config_dict["flag"],
                                   "id_flag": request.session['id_flag']})
                else:
                    print 'I am here ....old', request.session['id_flag']
                    return render(request, 'old_template_output_tabs.html',
                                  {'output_list': pres_output, "var_flag": config_dict["flag"],
                                   "id_flag": request.session['id_flag']})
        # InputsSubmitted
        elif glb_user_type == "Problem Solving":
            # sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech, 'type': glb_user_type,
            #             'user_name': current_user}
            new_input_para = []
            user_input_data = {}
            output_data = []
            checkbox_list = []
            checkbox_value = {}
            for el in request.GET:
                if "[" in el:
                    element_value = ''
                    if request.GET.getlist(el):
                        # checkbox_list.append(el.split("[]")[0])
                        for element in request.GET.getlist(el):
                            if element_value:
                                element_value += '++' + element
                            else:
                                element_value = element
                        # checkbox_value[el.split("[]")[0]] = element_value
                        if element_value:
                            new_input_para.append(el.split("[]")[0])
                            output_data.append(element_value)
                elif request.GET.get(el):
                    user_input_data[el] = request.GET.get(el)
                    new_input_para.append(el)
                    output_data.append(request.GET.get(el))
            user_quetion_data = ProblemSolvingInputVariable(sel_para, user_input_data)
            input_para_str = user_quetion_data.get_input_para_str(new_input_para, output_data)
            output_data_str = user_quetion_data.get_output_data_str()

            raw_output = GetRawOutputFromScript(sel_para, input_para_str, output_data_str,
                                                user_input_data.get('symptom'))
            if raw_output.output_line_counter > 1:
                output_list = raw_output.getRawScriptOutput()
                pres = PresProblemSolvingOutput(sel_para, output_list)
                pres_output = pres.getModTemplateOutput()
                return render(request, 'template_problem_solving.html', {'output_list': pres_output})
            else:
                return HttpResponse('The Raw Script output is empty. Please report this issue.')
        elif glb_user_ios == "Enterprise-1":
            if request.session['user_plat'] == 'Escalation':
                glb_user_plat = 'esc'
            elif request.session['user_plat'] == 'NOC':
                glb_user_plat = 'cse'
            else:
                glb_user_plat = request.session['user_plat'].lower()

            # sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech, 'type': glb_user_type,
            #             'user_name': current_user}
            print 'in Enterprise'
            user_input_data = {}
            new_user_input_data = {}
            for el in request.GET:
                if "[" in el and request.GET.getlist(el):
                    user_input_data[el] = request.GET.getlist(el)
                else:
                    user_input_data[el] = request.GET.get(el)
                    new_user_input_data[el] = request.GET.get(el)
            if glb_user_tech == 'Add Service' or glb_user_tech == 'Modify Service' or glb_user_tech == 'Delete Service':
                # Add the new service to jason file
                result = update_service_in_jason_file(sel_para, new_user_input_data, current_user, customer)
                if result.get('code') == 'passed':
                    return HttpResponse(result.get('msg'))
                else:
                    return HttpResponse(result.get('msg'))
            # elif glb_user_tech == 'Add Service' or glb_user_tech == 'Modify Service' or glb_user_tech == 'Delete Service':
            #     # Add the new service to jason file
            #     result = update_service_in_jason_file(sel_para, new_user_input_data, current_user, customer)
            #     if result.get('code') == 'passed':
            #         return HttpResponse(result.get('msg'))
            #     else:
            #         return HttpResponse(result.get('msg'))
            #     # Print the message for success or fail
            elif glb_user_tech == 'Add Device' or glb_user_tech == 'Modify Device' or glb_user_tech == 'Delete Device':
                # Add the new service to jason file
                result = update_device_in_jason_file(sel_para, new_user_input_data, current_user, customer)
                if result.get('code') == 'passed':
                    return HttpResponse(result.get('msg'))
                else:
                    return HttpResponse(result.get('msg'))
                    # Print the message for success or fail
            elif glb_user_type == 'Add Path' or glb_user_type == 'Modify Path' or glb_user_type == 'Delete Path':
                # Add the new service to jason file
                print 'new_user_input_data'
                print new_user_input_data
                result = update_path_in_jason_file(sel_para, new_user_input_data, current_user, customer)
                if result.get('code') == 'passed':
                    return HttpResponse(result.get('msg'))
                else:
                    return HttpResponse(result.get('msg'))
                    # Print the message for success or fail
            else:
                # request.session['sel_para'] = sel_para

                # print 'sel_para 2'
                # print sel_para
                suspected_paths = EntAlg2(sel_para, user_input_data, request.session['result_symptom_dict'])
                raw_output = GetRawOutputFromEntScript(sel_para, suspected_paths.get_modified_dict())
                if raw_output.output_line_counter > 1:
                    output_list = raw_output.getRawScriptOutput()
                    topo_output = suspected_paths.get_ent_topology()
                    output_list = output_list + topo_output
                    pres = PresEnterpriseOutput(sel_para, user_input_data, output_list,
                                                suspected_paths.get_self_symptom_data())
                    pres_output = pres.getModTemplateOutput()
                    update_user_input_data = update_user_input_in_db(new_user_input_data, current_user, taskid,
                                                                     subtaskid, customer, device)
                    return render(request, 'enterprise_output_tabs.html', {'output_list': pres_output})
                else:
                    return HttpResponse('The Raw Script output is empty. Please report this issue.')
        else:
            print 'I am in else 2017'
            print " In Troulbleshooting "
            request.session["ts_flag"] = True
            # sel_para = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech, 'type': glb_user_type,
            #             'user_name': current_user}
            user_input_data_list = []
            user_input_field_list = []
            user_input_data = {}
            all_user_input_data = {}
            user_role = ''
            input_int_type = 'def'
            for el in request.GET:
                if request.GET.get(el):
                    field_value = request.GET.get(el)
                    field_value = field_value.replace(' ', '')
                    user_input_data[el] = field_value
                    user_input_data_list.append(field_value)
                    all_user_input_data[el] = field_value
                    user_input_field_list.append(el)
                    if el == 'user':
                        user_role = field_value
                elif el == 'vrf':
                    user_input_data[el] = ''
            # new_user_input_data = new_user_input_data + user_input_data
            modified_input_data = UserInputProcessingScript(sel_para, all_user_input_data)
            input_para_str = modified_input_data.getUserInputFieldStr
            outputlist_str = modified_input_data.getUserInputDataStr
            input_int_type = modified_input_data.get_input_int_type()
            output_int_type = modified_input_data.get_output_int_type()
            outputlist_str = (' ').join(user_input_data_list)
            # glb_input_para = ['src_ip', 'in_in', 'out_in', 'des_ip', 'des_net', 'dst_ml', 'in_l3', 'ou_l3']
            input_para_str = (' ').join(user_input_field_list)
            input_para_str = input_para_str.replace('_', ',')
            new_input_para_str = get_new_input_para_str(user_input_field_list)

            update_user_input_data = update_user_input_in_db(user_input_data, current_user, taskid, subtaskid, customer,
                                                             device)
            raw_output = GetRawOutputFromScript(sel_para, new_input_para_str, outputlist_str)
            if all_user_input_data.has_key('in_int'):
                in_int_type = get_interface_type(glb_user_ios, all_user_input_data.get('in_int'))
            else:
                in_int_type = 'def'
            request.session['sel_para'] = {'ios': glb_user_ios, 'plat': glb_user_plat, 'tech': glb_user_tech,
                                           'type': glb_user_type, 'int_type': in_int_type}
            request.session['ref_filename'] = get_ref_output_file_name(request.session['sel_para'])

            # print 'user_input_data'
            # print user_input_data
            # print 'ref_filename'
            # print request.session['ref_filename']
            # if os.path.isfile(request.session['ref_filename']):
            request.session['ref_input_data'] = get_dict_from_file(request.session['ref_filename'])
            request.session['ref_hostname'] = glb_user_plat + '#'
            # request.session['ref_hostname'] = get_hostname_from_file(request.session['ref_filename'])

            # request.session['ref_input_data'] = {u'var_104': u'no', u'des_ip': u'10.147.250.5',
            #                                    u'd_mac': u'70e4.228d.493f', u'in_int': u'eth1/51',
            #                                    u'src_ip': u'10.147.250.4', u'out_int': u'eth1/52',
            #                                    u's_mac': u'0035.1aef.cc66', u'user': u'esc',
            #                                    u'var_103': u'no', u'model': u'9396PX', u'var_1': u'100007'}

            if raw_output.output_line_counter > 1:
                output_list = raw_output.getRawScriptOutput()
                topology_output = DrawTopologyTS(sel_para, request.GET)
                topo_info = GetTopologyTS(sel_para, topology_output.topology_data)
                topo_output = topo_info.get_topology_output()
                output_list = output_list + topo_output
                glb_CombinationsSubmitted = request.session['user_comb']
                questionnaire_output = get_questionnaire(glb_CombinationsSubmitted, input_para_str, all_user_input_data,
                                                         input_int_type, output_int_type, sel_para)
                output_list = output_list + questionnaire_output
                pres = PresScriptOutput(sel_para, output_list, user_role)
                pres_output = pres.getModScriptOutput()
                device_info_dict = get_device_info_dict([], sel_para, all_user_input_data)
                all_user_input_data[u'in_lc_num'] = "mod %s" % (device_info_dict.get('in_lc_num'))
                all_user_input_data[u'ou_lc_num'] = "mod %s" % (device_info_dict.get('ou_lc_num'))
                request.session['user_input_data'] = all_user_input_data
                # if os.path.isfile(request.session['ref_filename']):\
                config_dict = get_command_list(
                    pres_output)  # get fitered configuration commands dictionary function in Implementation_function.py
                if taskid != "":
                    config_list = config_dict["command_list"]
                    # config_dict =  parse_configuration2(config_list)
                    rollback_list = config_dict["rollback_list"]
                    print "Devices ------------------------>", request.session['devices']
                    # output= {'config':[], 'precheck':[],'postcheck':[], 'rollback':[], 'activate_config':[]}
                    entry = CronDB.objects.values_list('status').filter(taskid=taskid, subtaskid=subtaskid,
                                                                        customer=customer).last()
                    if entry:
                        status = entry[0]
                        if str(status) == "1":
                            output = 'Service Is Under Process'
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        if str(status) == "4":
                            insert_entry(taskid, subtaskid, customer, all_user_input_data, request.session['devices'],
                                         config_list, rollback_list, [], 4)
                    else:
                        insert_entry(taskid, subtaskid, customer, all_user_input_data, request.session['devices'],
                                     config_list, rollback_list, [], 4)
                elif request.session['id_flag']:
                    config_list = filter_command_list(config_dict["command_list"])
                    rollback_list = filter_command_list(config_dict["rollback_list"])
                    cmd_list = config_list + rollback_list
                    write_config_to_file(request, cmd_list)
                if request.session['ref_input_data']:
                    print 'I am running troubleshooting'
                    # print pres_output
                    print config_dict["flag"]
                    return render(request, 'new_script_output_tabs.html',
                                  {'output_list': pres_output, "var_flag": config_dict["flag"],
                                   "id_flag": request.session['id_flag']})
                else:
                    return render(request, 'old_script_output_tabs.html',
                                  {'output_list': pres_output, "var_flag": config_dict["flag"],
                                   "id_flag": request.session['id_flag']})

            else:
                print  " Empty o/p"
                return HttpResponse('The Raw Script output is empty. Please report this issue.')


def inputsSubmitted_Bulk(request, input_dict, extension):
    '''
        Description :
            This class used to convert user to database var.
		Inputs :
			user_ios, user_plat, user_tech, user_type, template_name
		Output :
            Return the output based on function call


    :param request:
    :param input_dict:
    :param extension:
    :return:
    '''
    taskid = request.session["taskid"]
    subtaskid = request.session["subtaskid"]
    sel_para = request.session["sel_para"]
    glb_user_type = request.session["user_type"]
    customer = request.session["customer"]
    # print "Selection Parameter", "<<<<", sel_para
    # print "Input_dict ", "<<<<", input_dict
    # print "input_dict['user_type']", input_dict['user_type']
    if input_dict['user_type'] in ['Switch Consolidation', "Cisco to Cisco Port Migration"]:
        input_dict['ext_dict'] = {}
        input_dict['ext_dict']['ext_name'] = request.session['ext_dict']['ext_name']
        input_dict = genrate_inputs_dict(input_dict, input_dict['hostname'])
        # print ">>>>>>%%%%%%>>>>>> ", input_dict

    if input_dict['user_type'] in ['Access Campus Switch Provisioning - Bulk(NEW)']:
        input_dict = genrate_inputs_dict(input_dict)
        print ">>>>>>%%%%%%>>>>>> ", input_dict
    save_file_flag = False
    test_flag = True
    if test_flag:
        set_inputs_to_db = ParseNewTpFile(sel_para, glb_user_type, customer, extension)
        result = set_inputs_to_db.overwriteTlDb()
    data = ReadTemplateDb(sel_para, glb_user_type, customer, extension)
    inputs = data.getInputsFromDb()
    input_list = inputs.split(' ')
    user_data = {}
    feature_inputs_list = set_inputs_to_db.feature_intput_list
    feature_list = set_inputs_to_db.get_feature_list()
    if feature_inputs_list:
        input_list = input_list + feature_inputs_list
    feature_combination_list = []
    for key, value in request.GET.iteritems():
        if key == 'vrf_option':
            input_list.append('vrf_option')
        elif "features[" in key:
            if request.GET.getlist(key):
                feature_combination_list += request.GET.getlist(key)
        elif "[" in key:
            parent_feature = key.split("[]")[0]
            if request.GET.getlist(key):
                for child_feature in request.GET.getlist(key):
                    feature_combination = parent_feature + ":" + child_feature
                    feature_combination_list.append(feature_combination)
        elif feature_list.__contains__(key):
            feature_combination_list.append(key + ':' + value)
    # print ">>>>>>>>>>", input_list
    for el in input_list:
        # print el
        if input_dict[el]:
            print input_dict[el]
            temp_str = input_dict[el]
            if type(temp_str) == str:
                temp_str = ' '.join(temp_str.split())
            else:
                temp_str = ' '.join(temp_str)
            temp_str = re.sub(r"\s+$", ' ', temp_str)
            user_data[el] = temp_str
        else:
            value = "<%s>" % el
            user_data[el] = value
    for el in input_list:
        if el == 'hostname':
            if request.GET.get(el) != '<hostname>':
                save_file_flag = request.GET.get(el)
    update_user_input_data = data.update_user_input_value(user_data, taskid, subtaskid)
    new_user_dict = data.convet_inputs_to_dict(user_data, glb_user_type)
    # print "+=======", new_user_dict
    # if "ACI " in glb_user_type and new_user_dict.has_key("vlan_id"):
    #     vlan_id = new_user_dict.get("vlan_id")[0]
    #     q1 = ACI_EPG_Mapping.objects.filter(location=request.session["acilocation"], vlan=vlan_id,
    #                                         customer=request.session["customer"]).last()
    #     if not q1 and not vlan_id == "<vlan_id>":
    #         output = "Please verify the Vlan ID . Information does Not exist "
    #         return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
    modified_output = data.convet_template_to_config(request, new_user_dict, feature_combination_list,
                                                     request.session['input_optional_list'])
    topology_output = DrawTopology(sel_para, request.GET)
    topo_info = GetTopology(sel_para, topology_output.topology_data)
    topo_output = topo_info.get_topology_output()
    modified_output = modified_output + topo_output
    glb_CombinationsSubmitted = request.session['user_comb']['inputs']
    questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
    modified_output = modified_output + questionnaire_output
    if not glb_user_type.find(
            'Troubleshooting') == -1 or glb_user_type == 'Forwarding' or glb_user_type == 'Traffic Latency':
        pres = PresTroubleshootingOutput(sel_para, modified_output, save_file_flag)
    else:
        pres = PresTemplateOutput(sel_para, modified_output, save_file_flag)
    pres_output = pres.getModTemplateOutput()
    # print pres_output,">>>>>>>>>>> Press Output "
    # print pres_output[0].get('Implementation Plan').get("line")
    # new imp error handling
    # // new code
    # print 'user_input_data---------'
    # print user_input_data
    # print 'example of pres_output'
    config_dict = get_command_list(
        pres_output)
    # print config_dict,'__________________________'
    # get fitered configuration commands dictionary function in Implementation_function.py
    if taskid != "":
        print taskid
        output_dict = parse_configuration_2(config_dict["command_list"])
        rollback_list = config_dict["rollback_list"]
        config_list = output_dict["precheck"] + output_dict["config"] + output_dict["postcheck"]
        # entry = CronDB.objects.values_list('status').filter(taskid=taskid,subtaskid=subtaskid,customer=customer).last()
        # if entry:
        # status = entry[0]
        # if str(status) == "1":
        # output = 'Service Is Under Process'
        # return render(request, 'notification.html', {'output_list': output,'class':'alert-danger'})
        # if str(status) == "4" or str(status) == "0":
        # insert_entry(taskid,subtaskid,customer,config_list,rollback_list,4)
        # else:
        # insert_entry(taskid,subtaskid,customer,config_list,rollback_list,4)
    if request.session.has_key('ref_input_data'):
        print 'I am here ....new'
        return [pres_output, config_list, rollback_list]
    else:
        # print 'I am here ....old', request.session['id_flag'], pres_output
        # print pres_output,">>>>>>>>>>>>>>>>>>>>$"
        return [pres_output, config_list, rollback_list]


def calculate_cost(response_dict):
    total_sr = 0
    total_jr = 0
    with open('/home/ubuntu/prepro/mysite/mysite/Json_DATA/Cost.json') as cost_json_data:
        cost_data = json.load(cost_json_data)
        for k, v in response_dict.iteritems():
            if type(v) == list:
                for ele in v:
                    if ele in cost_data:
                        total_sr += int(cost_data[ele])
                        total_jr += int(cost_data[ele])
            elif k in cost_data:
                if v:
                    total_sr += (int(cost_data[k]) * int(v))
                    total_jr += (int(cost_data[k]) * int(v))
    return total_sr, total_jr


def display_meta(request):
    values = request.META.items()
    values.sort()
    html = []
    for k, v in values:
        html.append('<tr><td>%s</td><td>%s</td></tr>' % (k, v))
    return HttpResponse('<table>%s</table>' % '\n'.join(html))


def register_user(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('register_success')
    args = {}
    args.update(csrf(request))
    args['form'] = UserCreationForm()
    return render(request, 'register.html', args)


def register_success(request):
    return render(request, 'register_success.html', {})


@login_required(login_url='/login/')
def apply(request):
    sship = request.session["sship"]
    ticketid = request.session["taskid"]
    subtaskid = request.session["subtaskid"]
    cmd_list = []
    entry = CronDB.objects.values_list('command_list').filter(taskid=ticketid, subtaskid=subtaskid).last()
    if entry:
        cmd_list = json.loads(entry[0])
    abc = Push_configuration_pexpect(cmd_list, request, sship)
    print abc
    message = abc["message"]
    class1 = abc["class1"]
    if message == "Configuration Successful":
        output = upload_analyz_log(request)
        return HttpResponse(json.dumps(output), content_type="application/json")
    else:
        return render(request, 'config_applied.html',
                      {'output_list': message, 'ticketid': ticketid, 'subtaskid': subtaskid, 'class': class1})


def insert_entry(ticketid, subtaskid, customer, input_dict, ip, configlist, rollback_list, activate_cmd=[], status=0,
                 result=0, now=0):
    print "in insert"
    configlist = json.dumps(configlist)
    rollback_list = json.dumps(rollback_list)
    input_dict = json.dumps(input_dict)
    ip = json.dumps(ip)
    ts = time.time()
    # current_user = request.user
    if status < 4:
        if now == 1:
            timeschedule = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
            status = 2
        else:
            # timeschedule = now.strftime("%Y-%m-%d 09:30:00")
            now = datetime.datetime.now()
            now_plus_10 = now + datetime.timedelta(minutes=1)
            timeschedule = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
            # timeschedule = now_plus_10.strftime('%Y-%m-%d %H:%M:%S')
            status = 0
    else:
        timeschedule = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
    if ticketid:
        entry = CronDB.objects.values_list('taskid', 'status').filter(taskid=ticketid, subtaskid=subtaskid).order_by(
            'timestamp').last()
        if entry:
            q1 = CronDB.objects.filter(taskid=ticketid, subtaskid=subtaskid).update(inputs_list=input_dict, ip=ip,
                                                                                    command_list=configlist,
                                                                                    rollback_list=rollback_list,
                                                                                    activate_commands=activate_cmd,
                                                                                    schedule=timeschedule,
                                                                                    status=status, result=result,
                                                                                    customer=customer)
        else:
            q1 = CronDB(inputs_list=input_dict, ip=ip, command_list=configlist, rollback_list=rollback_list,
                        activate_commands=activate_cmd, schedule=timeschedule, status=status, result=result,
                        customer=customer, taskid=ticketid, subtaskid=subtaskid)
            q1.save()
        if q1:
            print "in insery";
            return True
        else:
            return False
    else:
        return False


@login_required(login_url='/login/')
def send_mail_ajax(request):
    current_user = request.user
    output = request.GET.get('email')
    if output is not None:
        # email = current_user.email
        email = output
        subject, from_email, to = 'hello', 'jayant@netserv.email', current_user.email
        text_content = 'This is an important message.'
        html_content = '<p>This is an <strong>important</strong>    message.</p>'
        msg = EmailMultiAlternatives(subject, text_content, from_email, [output])
        msg.attach_alternative(html_content, "text/html")
        msg.send()
        pres_output = [{"status": "1", "flag": "1", "message": "Email sent successfully"}]
    else:
        pres_output = [{"status": "0", "flag": "0", "message": "Please enter email address."}]
    return HttpResponse(json.dumps(pres_output), content_type="application/json")


# function to get count for a user
def get_user_count(uid=None):
    from mysite.models import UserTransactionDb
    if uid is not None:
        coun = UserTransactionDb.objects.filter(user=uid).count()
    else:
        coun = UserTransactionDb.objects.count()
    return coun


def get_user_count_c1(c1value, uid=None):
    from mysite.models import UserTransactionDb
    if uid is not None:
        coun = UserTransactionDb.objects.filter(user=uid, c1_value=c1value).count()
    else:
        coun = UserTransactionDb.objects.filter(c1_value=c1value).count()
    return coun


def get_user_count_c2(c2value, uid=None):
    from mysite.models import UserTransactionDb
    if uid is not None:
        coun = UserTransactionDb.objects.filter(user=uid, c2_value=c2value).count()
    else:
        coun = UserTransactionDb.objects.filter(c2_value=c2value).count()
    return coun


def get_user_count_c3(c3value, uid=None):
    from mysite.models import UserTransactionDb
    if uid is not None:
        coun = UserTransactionDb.objects.filter(user=uid, c3_value=c3value).count()
    else:
        coun = UserTransactionDb.objects.filter(c3_value=c3value).count()
    return coun


def get_user_count_c4(c4value, uid=None):
    from mysite.models import UserTransactionDb
    if uid is not None:
        coun = UserTransactionDb.objects.filter(user=uid, c4_value=c4value).count()
    else:
        coun = UserTransactionDb.objects.filter(c4_value=c4value).count()
    return coun


def get_new2_interface_type(ios='', interface_name=''):
    # need to modify for XR bridge domain and other interface types
    interface_name = interface_name.lower().strip().split(',')
    interface = interface_name[0]
    if re.search('\S+\.\d+', interface):
        return 'subinterface'
    elif re.search('^[vl]|^[bv]', interface):
        return 'svi'
    elif re.search('^[po]|^[bu]', interface):
        return 'cha'
    elif re.search('\/\d+', interface):
        return 'def'
    return 'def'


@login_required(login_url='/login/')
def output_command(request):
    command = request.POST.get('command')
    output = request.POST.get('output')

    returnarr = {}
    returnarr["status"] = 1;
    data = cmd_result(request.session['user_input_data'], "", command, request.session['sel_para'])
    returnarr["sections"] = analyze_result_data(data)
    returnarr["failed"] = get_failed_num(data)
    returnarr["passed"] = get_passed_num(data)
    print 'warnning count'
    print get_warning_num(data)
    returnarr["warning"] = get_warning_num(data)
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


@login_required(login_url='/login/')
def upload_apply(request, defile_path=""):
    current_user = request.user
    uid = current_user.id
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/uploads/"
    array = {}
    if defile_path != "":
        file = defile_path
        name = file
        # name = open(filename, "r")
        array["status"] = 1
        returnarr = {}
        returnarr["status"] = 1;
        print request.session['user_input_data']
        data = cmd_result(request.session['user_input_data'], name, '', request.session['sel_para'])
        returnarr["sections"] = analyze_result_data(data)
        returnarr["failed"] = get_failed_num(data)
        returnarr["passed"] = get_passed_num(data)
        returnarr["warning"] = get_warning_num(data)
        return returnarr
    else:
        file = request.FILES['file']
        filename = file.name
        print " =========================================!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        print file
        filename = file.name

        if filename.endswith('.txt'):

            name = FILE_UPLOAD_DIR + str(session_id) + ".txt";
            print 'file_name'
            print name
            with open(name, 'wb') as dest:
                shutil.copyfileobj(file, dest)
            array["status"] = 1
        else:
            array["status"] = 0
        returnarr = {}
        returnarr["status"] = 1;

        data = cmd_result(request.session['user_input_data'], name, '', request.session['sel_para'])
        returnarr["sections"] = analyze_result_data(data)
        returnarr["failed"] = get_failed_num(data)
        returnarr["passed"] = get_passed_num(data)
        returnarr["warning"] = get_warning_num(data)
    #
    #
    #
    # returnarr["failed"] = 5;
    # returnarr["passed"] = 10;
    # returnarr["sections"] = [{"title":"first section","text":"long long long description"},{"title":"second section","text":"long long long description"}];
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


@login_required(login_url='/login/')
def upload_analyz_log(request):
    current_user = request.user
    uid = current_user.id
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/data/Configuration_log/"
    filename = FILE_UPLOAD_DIR + str(request.session['customer']) + "_" + str(request.session['device']) + ".txt"
    returnarr = {}
    returnarr["status"] = 1;

    data = cmd_result(request.session['user_input_data'], filename, '', request.session['sel_para'])
    returnarr["sections"] = analyze_result_data(data)
    returnarr["failed"] = get_failed_num(data)
    returnarr["passed"] = get_passed_num(data)
    returnarr["warning"] = get_warning_num(data)
    #
    #
    #
    # returnarr["failed"] = 5;
    # returnarr["passed"] = 10;
    # returnarr["sections"] = [{"title":"first section","text":"long long long description"},{"title":"second section","text":"long long long description"}];
    return returnarr


def get_template_hover_text(request, line):
    text = ''
    # print line
    # print request.session['user_input_data']
    # print request.session['ref_input_data']
    if request.session['ref_filename']:
        ref_cmd = convert_cmd_to_ref_cmd(request.session['user_input_data'], request.session['ref_input_data'], line,
                                         request.session['sel_para'])
        # if not re.search('<\S+>', ref_cmd):
        if ref_cmd == 'skip_hover':
            return None
        text = get_command_output(request.session['ref_filename'], ref_cmd)
        if text:
            text = get_html_output(text, ref_cmd, request.session['ref_hostname'])
        # print text
        if text:
            return text
    return None


def get_hover_text(request, line):
    if request.session['user_input_data'].has_key('user'):
        if request.session['user_input_data'].get('user') == 'pat':
            if request.session['ref_filename']:
                ref_cmd = convert_cmd_to_ref_cmd(request.session['user_input_data'], request.session['ref_input_data'],
                                                 line, request.session['sel_para'])
                # if not re.search('<\S+>', ref_cmd):
                text = get_command_output(request.session['ref_filename'], ref_cmd)
                if text:
                    text = get_html_output(text, ref_cmd, request.session['ref_hostname'])
                if text:
                    return text
    return None


@login_required(login_url='/login/')
def customer_response(request):
    from mysite.models import UserSelectionDb
    from mysite.models import UserTransactionDb
    q = request.GET.get('q')
    returnl = [];
    list = UserTransactionDb.objects.filter(c5_value__contains=q).order_by().values_list('c5_value').distinct()
    for o in list:
        returnl.append(o[0])
    return HttpResponse(json.dumps(returnl), content_type="application/json")


@login_required(login_url='/login/')
def device_response(request):
    from mysite.models import UserSelectionDb
    from mysite.models import UserTransactionDb
    q = request.GET.get('q')
    c1 = request.GET.get('c1')
    returnl = [];
    list = UserTransactionDb.objects.filter(c6_value__contains=q, c5_value=c1).order_by().values_list(
        'c6_value').distinct()
    for o in list:
        returnl.append(o[0])
    return HttpResponse(json.dumps(returnl), content_type="application/json")


@login_required(login_url='/login/')
def field_response(request):
    q = request.GET.get('q')
    field = request.GET.get('field')
    customer = request.session['customer']
    returnl = [];
    field_value = search_last_user_input_value(field, customer)
    for k in field_value:
        returnl.append(k)
    return HttpResponse(json.dumps(returnl), content_type="application/json")

# @login_required(login_url='/login/')
def field_response_sr(request):
    from mysite.models import SetupParameters
    from mysite.models import CommonSetupParameters
    from mysite.models import DeviceModel
    q = request.GET.get('q')
    query = request.GET.get('query')
    field = request.GET.get('field')
    customer = request.session['customer']
    returnl = []
    if field == "paratype":
        if request.GET.has_key("customer") and customer == "":
            customer = request.GET.get("customer")
        inner_qs = SetupParameters.objects.values_list('parameter', flat=True).all()
        # print inner_qs
        field_value = CommonSetupParameters.objects.filter(parameter__contains=q).exclude(
            parameter__in=inner_qs).values_list("parameter", flat=True).distinct()
        # returnl = []
        # returnl = ["abc","123"]
        # field_value = search_last_user_input_value(field, customer)
        for k in field_value:
            returnl.append(k)
    elif field == "devices":
        # returnl = []
        entry = DeviceModel.objects.filter(name__contains=query).values_list('name').distinct()
        for e in entry:
            returnl.append(e[0])

    return HttpResponse(json.dumps(returnl), content_type="application/json")


def get_device_info(request, device_name):
    # print "device name-->"+device_name+"<--"
    print 'device_name'
    print device_name
    device_info = {}
    # device_info['des'] = ''
    # device_info['role'] = ''
    # device_info['link'] = ''
    # device_info['ssh'] = ''
    customer = request.session['customer']
    if customer == '':
        customer = 'all'
    print 'customer'
    print customer
    # print request.session['sel_para']
    # c5s = urllib.quote_plus("Cisco")
    # c6s = urllib.quote_plus("")
    # base = 'http://54.67.64.4'
    # print base + '/?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s
    # return base + '/?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s
    # need to read following form json file
    c5s = urllib.quote_plus(request.session['customer'])
    c6s = ''
    base = request.build_absolute_uri('/')

    if 'aSW' in device_name:
        device_info['des'] = 'Cisco 4500/3850'
        device_info['role'] = 'Access Switch'
        c1s = urllib.quote_plus('IOS')
        c2s = urllib.quote_plus('C4500')
        c3s = urllib.quote_plus('IPv4')
        c4s = urllib.quote_plus('Forwarding')
        # device_info['link'] = get_converted_span_link(device_name)
        device_info[
            'link'] = base + '?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s + '&templateid=1121-3'
        # device_info['link'] = 'http://54.67.64.4/?c1s=ASA+Firewall&c2s=ASA5500-X&c3s=ACL&c4s=ASA+Forwarding+Troubleshooting&c5s=Cisco&c6s='
        # device_info['ssh'] = '10.1.1.1'
        device_info['ssh'] = ''
    elif 'dSW' in device_name:
        device_info['des'] = 'Cisco 68xx'
        device_info['role'] = 'Distribution Switch'
        c1s = urllib.quote_plus('IOS')
        c2s = urllib.quote_plus('C6800')
        c3s = urllib.quote_plus('IPv4')
        c4s = urllib.quote_plus('Forwarding')
        device_info[
            'link'] = base + '?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s + '&templateid=1121-1'
        # device_info['link'] = 'http://54.67.64.4/?c1s=ASA+Firewall&c2s=ASA5500-X&c3s=ACL&c4s=ASA+Forwarding+Troubleshooting&c5s=Cisco&c6s='
        # device_info['ssh'] = '10.1.1.4'
        device_info['ssh'] = ''
    elif 'Core' in device_name:
        device_info['des'] = 'Cisco 68xx'
        device_info['role'] = 'PE Router'
        c1s = urllib.quote_plus('IOS')
        c2s = urllib.quote_plus('C6800')
        c3s = urllib.quote_plus('IPv4')
        c4s = urllib.quote_plus('Forwarding')
        device_info[
            'link'] = base + '?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s + '&templateid=1121-1'
        device_info['ssh'] = '10.1.1.2'
    elif 'iFW' in device_name:
        device_info['des'] = 'Cisco ASA5550'
        device_info['role'] = 'Internal Firewall'
        device_info[
            'link'] = base + '?c1s=ASA+Firewall&c2s=ASA5500-X&c3s=ACL&c4s=ASA+Forwarding+Troubleshooting&c5s=Cisco&c6s=' + '&templateid=1031'
        device_info['ssh'] = '10.1.1.4'
    elif 'eFW' in device_name:
        device_info['des'] = 'CheckPoint Firewall'
        device_info['role'] = 'External Firewall'
        device_info['link'] = ''
        device_info['ssh'] = '10.1.1.3'
    elif 'cFW' in device_name:
        device_info['des'] = 'Cisco ASA5550'
        device_info['role'] = 'Core Firewall'
        device_info[
            'link'] = base + '?c1s=ASA+Firewall&c2s=ASA5500-X&c3s=ACL&c4s=ASA+Forwarding+Troubleshooting&c5s=Cisco&c6s=' + '&templateid=1031'
        device_info['ssh'] = '10.1.1.4'
    elif 'iLB' in device_name:
        device_info['des'] = 'F5 LTM'
        device_info['role'] = 'Internal Local Balancer'
        device_info['link'] = ''
        device_info['ssh'] = '10.1.1.5'
    elif 'Leaf' in device_name:
        device_info['des'] = 'Cisco N9300'
        device_info['role'] = 'Leaf Switch'
        c1s = urllib.quote_plus('NX-IOS')
        c2s = urllib.quote_plus('NX9300')
        c3s = urllib.quote_plus('IPv4')
        c4s = urllib.quote_plus('Forwarding')
        device_info[
            'link'] = base + '?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s + '&templateid=1120-0'
        device_info['ssh'] = '10.1.1.6'
    elif 'Spine' in device_name:
        device_info['des'] = 'Cisco N9500'
        device_info['role'] = 'Spine Switch'
        c1s = urllib.quote_plus('NX-IOS')
        c2s = urllib.quote_plus('NX9500')
        c3s = urllib.quote_plus('IPv4')
        c4s = urllib.quote_plus('Forwarding')
        device_info[
            'link'] = base + '?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s + '&templateid=1120-0'
        device_info['ssh'] = '10.1.1.7'
    elif 'UserDevice' in device_name:
        device_info['des'] = 'Windows Desktop'
        device_info['role'] = 'Desktop'
        c1s = urllib.quote_plus('Windows')
        c2s = urllib.quote_plus('Desktop')
        c3s = urllib.quote_plus('IPv4')
        c4s = urllib.quote_plus('Forwarding')
        device_info[
            'link'] = base + '?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s + '&templateid=1083-0'
        # device_info['ssh'] = '10.1.1.8'
        device_info['ssh'] = ''
    elif 'Server' in device_name:
        device_info['des'] = 'Linux Server'
        device_info['role'] = 'Server'
        c1s = urllib.quote_plus('Linux')
        c2s = urllib.quote_plus('Linux')
        c3s = urllib.quote_plus('IPv4')
        c4s = urllib.quote_plus('Forwarding')
        device_info[
            'link'] = base + '?c1s=' + c1s + '&c2s=' + c2s + '&c3s=' + c3s + '&c4s=' + c4s + '&c5s=' + c5s + '&c6s=' + c6s + '&templateid=1081-0'
        device_info['ssh'] = '10.1.1.9'
    # else:
    #     device_info['des'] = ''
    #     device_info['role'] = ''
    #     device_info['link'] = ''
    #     device_info['ssh'] = ''

    print 'device_info'
    print device_info
    return device_info


def export_config(request):
    # from mysite.models import CronDB
    print request.session["type"]
    if request.session.has_key("type") and request.session["type"] == "cisco_to_juniper":
        sw_name = request.session["sw_name"]
        FILE_ZIP_DIR = "/home/ubuntu/prepro/mysite/mysite/user_outputs/" + str(sw_name)
        zip_folder(FILE_ZIP_DIR, FILE_ZIP_DIR + ".zip")
        filename = FILE_ZIP_DIR + ".zip"
        response = HttpResponse(file(filename))
        response['Content-Type'] = 'application/force-download'
        response['Content-Length'] = os.path.getsize(filename)
        response['Content-Disposition'] = 'attachment; filename=\"' + sw_name + '.zip\"'
        response['Accept-Ranges'] = 'bytes'
        return response

        # file_upload_dir = "/home/ubuntu/prepro/mysite/mysite/user_outputs/"
        # filename = file_upload_dir + str(sw_name) + ".txt"
        # response = HttpResponse(file(filename))
        # response['Content-Type'] = 'application/force-download'
        # response['Content-Length'] = os.path.getsize(filename)
        # response['Content-Disposition'] = 'attachment; filename=\"'+sw_name+'.txt\"'
        # response['Accept-Ranges'] = 'bytes'
        # return response
    if request.session.has_key("taskid"):
        ticketid = request.session['taskid']
        print ">>ticketid<"
        print ticketid
        subtaskid = request.session['subtaskid']
        try:
            entry = CronDB.objects.values_list('command_list', 'status').filter(taskid=ticketid,
                                                                                subtaskid=subtaskid).last()
            if entry:
                print entry
                if entry[1] == 4 or entry[1] == 0:
                    response = HttpResponse(content_type='text')
                    response['Content-Disposition'] = 'attachment; filename="Configuration.txt"'
                    print "Entry 0 Below"
                    config = filter_command_list(json.loads(entry[0]))
                    print config
                    for line in config:
                        if ":" in line:
                            response.write('\n')
                        response.write(line)
                        response.write('\n')
                    return response
            else:
                pres_output = 'Entry Added Successfully'
                return render(request, 'notification.html', {'output_list': entry, 'class': 'alert-success'})
        except CronDB.DoesNotExist:
            entry = "No entry found"
            pres_output = 'Entry Added Successfully'
            return render(request, 'notification.html', {'output_list': entry, 'class': 'alert-success'})
    else:
        session_id = request.session._get_or_create_session_key()
        file_upload_dir = "/home/ubuntu/prepro/mysite/mysite/data/Configurations_templates/"
        filename = file_upload_dir + str(session_id) + ".txt"
        response = HttpResponse(file(filename))
        response['Content-Type'] = 'application/force-download'
        response['Content-Length'] = os.path.getsize(filename)
        response['Content-Disposition'] = 'attachment; filename=\"Configuration.log\"'
        response['Accept-Ranges'] = 'bytes'
        return response
        # entry = "Please Enter Ticket ID"
        # return render(request, 'notification.html', {'output_list': entry,'class':'alert-success'})


def write_config_to_file(request, config_cmd_list, param=1):
    # param to conditionaly write text file
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/user_outputs/"
    filename = FILE_UPLOAD_DIR + str(session_id) + str(param) + ".txt"
    data = open(filename, "w+")
    for cmd in config_cmd_list:
        data.write(cmd + '\n')
    data.close()


@login_required(login_url='/login/')
def get_config_from_file(request, param=1):
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/user_outputs/"
    filename = FILE_UPLOAD_DIR + str(session_id) + str(param) + ".txt"
    if filename:
        infile = open(filename, "r+")
        config_list = [i for i in infile.readlines()]
        infile.close()
        return config_list
    else:
        return "File Does Not Exist"


def return_log_file(request):
    import os
    session_id = request.session._get_or_create_session_key()
    current_user = request.user
    uid = current_user.id
    if request.session.has_key("apic_log"):
        filename = request.session["apic_log"]
        filter_log_1(filename)
    else:
        file_upload_dir = "/home/ubuntu/prepro/mysite/mysite/user_outputs/"
        filename = file_upload_dir + str(request.session['taskid']) + "_" + str(
            request.session['subtaskid']) + "_" + str(request.session['ip']) + ".txt"
        filter_log_1(filename)
    response = HttpResponse(file(filename))
    response['Content-Type'] = 'application/force-download'
    response['Content-Length'] = os.path.getsize(filename)
    response['Content-Disposition'] = 'attachment; filename=\"log.log\"'
    response['Accept-Ranges'] = 'bytes'
    return response


def view_log_file(request):
    file_upload_dir = "/home/ubuntu/prepro/mysite/mysite/user_outputs/"
    filename = file_upload_dir + str(request.GET['taskid']) + "_" + str(request.GET['subtaskid']) + "_" + str(
        request.GET['ip']) + ".txt"
    filter_log_1(filename)
    response = HttpResponse(file(filename))
    response['Content-Type'] = 'application/force-download'
    response['Content-Length'] = os.path.getsize(filename)
    response['Content-Disposition'] = 'attachment; filename=\"log.log\"'
    response['Accept-Ranges'] = 'bytes'
    return response


def ticket_id_exists(request):
    status_dict = {"status": 0, "flag": 1}
    from mysite.models import CronDB
    if request.session.has_key('taskid'):
        taskid = request.session['taskid']
        subtaskid = request.session['subtaskid']
        entry = CronDB.objects.values_list('status').filter(taskid=taskid, subtaskid=subtaskid).last()
        if entry:
            status = entry[0]
            if str(status) == "0":
                status_dict = {"status": 1, "flag": 1}
            elif str(status) == "1":
                status_dict = {"status": 1, "flag": 2}
        else:
            status_dict = {"status": 0, "flag": 1}
        print status_dict
        return HttpResponse(json.dumps(status_dict), content_type="application/json")
    else:
        status_dict = {"status": 0, "flag": 1}
        return HttpResponse(json.dumps(status_dict), content_type="application/json")


@login_required(login_url='/login/')
def apply_config(request):
    taskid = request.session['taskid']
    subtaskid = request.session['subtaskid']
    customer = request.session['customer']
    if request.session.has_key('sship'):
        sship = request.session['sship']
    else:
        return render(request, 'config_applied.html',
                      {'output_list': "Error in action", 'taskid': taskid, 'subtaskid': subtaskid,
                       'class': "alert-danger"})
    if request.GET.get('action'):
        action = request.GET.get('action')
        q1 = CronDB.objects.values_list("command_list", "rollback_list").filter(taskid=taskid,
                                                                                subtaskid=subtaskid).last()
        if q1:
            commandlist = filter_command_list(json.loads(q1[0]))
            rollback_list = filter_command_list(json.loads(q1[0]))
        if action == "applymw":
            # password = request.GET.get('password')
            # update_entry(request,username,password)
            # insert_entry(request,list,rollback_list,2,2,1)
            return render(request, 'notification.html',
                          {'output_list': 'The task is scheduled during maintenance window.', 'class': 'alert-success'})
        if action == "apply":
            insert_entry(taskid, subtaskid, customer, commandlist, rollback_list, 2, 2, 1)
            print commandlist
            output = Push_configuration_pexpect(commandlist, request, sship)
            message = output["message"]
            class1 = output["class1"]
            return render(request, 'config_applied.html',
                          {'output_list': message, 'taskid': taskid, 'subtaskid': subtaskid, 'class': class1})
    return render(request, 'config_applied.html',
                  {'output_list': "Error in action", 'taskid': taskid, 'subtaskid': subtaskid, 'class': "alert-danger"})


def apply_config_aci_old(request):
    print "Reaching here tooooo!!!!"

    taskid = request.session['taskid']
    subtaskid = request.session['subtaskid']
    customer = request.session['customer']
    print taskid, subtaskid, customer
    # main_apply_function(request)
    q1 = CronDB.objects.values_list("ip", "username", "password", "command_list", "rollback_list").filter(taskid=taskid,
                                                                                                          subtaskid=subtaskid,
                                                                                                          customer=customer).last()
    if request.session.has_key("ts_flag") and request.session['ts_flag']:
        user_dict = request.session['sel_para']
        if user_dict.get('ios') == "nx":
            file_name = "/home/ubuntu/prepro/mysite/mysite/data/nx-ios_nx9300_ipv4_host_route_reachability_svi.txt"
        elif user_dict.get('ios') == "ios":
            file_name = "/home/ubuntu/prepro/mysite/mysite/data/ios_c6800_ipv4_host_route_reachability_svi.txt"
        response = upload_apply(request, file_name)
        return HttpResponse(json.dumps(response), content_type="application/json")
    if q1:
        print "got the query"
        devices = json.loads(q1[0])
        username = q1[1]
        password = q1[2]
        commandlist = filter_command_list(json.loads(q1[3]))
        rollback_list = filter_command_list(json.loads(q1[4]))
        status_dict = {}
        pass_count = 0
        fail_count = 0
        if "," in devices:
            devices = devices.split(",")
        elif type(devices) == list:
            devices = devices
        else:
            devices = [devices]
        print devices, username, password, request.GET.get('action')
        for device in devices:
            entry = DeviceModel.objects.filter(name=device).values_list('ip').last()
            if entry:
                ip = entry[0]
                print ip
            elif re.search(r'\d+\.\d+\.\d+\.\d+', device):
                ip = device
            else:
                ip = device

            if request.GET.get('action'):
                if request.GET.get('action') == "applymw":
                    # password = request.GET.get('password')
                    # update_entry(request,username,password)
                    # insert_entry(request,list,rollback_list,2,2,1)
                    return render(request, 'notification.html',
                                  {'output_list': 'The task is scheduled during maintenance window.',
                                   'class': 'alert-success'})
                if request.GET.get('action') == "apply":
                    # insert_entry(taskid,subtaskid,customer,commandlist,rollback_list,2,2,1)
                    output = config_fun(request, commandlist, username, password, ip)
                    # print " Configuration output "
                    # print output
                    # message  =  output["message"]
                    # class1  =  output["class1"]
                    if output["status_flag"]:
                        pass_count = pass_count + 1
                    else:
                        fail_count = fail_count + 1
                    status_dict[device] = output
                output["ip"] = ip
                # return render(request, 'config_applied.html', {'output_list': message,'taskid':taskid,'subtaskid':subtaskid,'class':class1})
        # print status_dict
        return render(request, 'multi_devices_config.html',
                      {'output_dict': status_dict, 'taskid': taskid, 'subtaskid': subtaskid, 'class': 'alert-success',
                       "passed": pass_count, "failed": fail_count})
    else:
        return render(request, 'notification.html',
                      {'output_list': 'No Cron Data found for Service ID ' + taskid, 'class': 'alert-success'})


@login_required(login_url='/login/')
def apply_config_aci(request):
    from mysite.models import TenantDB
    changeid = request.GET.get('taskid')
    taskid = request.GET.get('taskid')
    subtaskid = request.GET.get('subtaskid')
    if request.GET.get('action'):
        action = request.GET.get('action')
        username = request.GET.get('username')
        update_username(request, username)
        if action == "applymw":
            password = request.GET.get('password')
            # update_entry(request, username, password)
            return render(request, 'notification.html',
                          {'output_list': 'The task is scheduled during maintenance window.', 'class': 'alert-success'})
        if action == "fabric_apply" or action == "apply":
            list = get_config_from_file(request)
            rollback_list = get_config_from_file(request, 3)
            insert_entry(request, list, rollback_list, 2, 2, 1)
            print list
            abc = config_fun(list, request)
            print abc
            message = abc["message"]
            class1 = abc["class1"]
            return render(request, 'config_applied.html',
                          {'output_list': message, 'changeid': request.GET.get('changeid'), 'ip': request.GET.get('ip'),
                           'class': class1})
        if action == "rollback_apply":
            rollback_list = get_config_from_file(request, 3)
            print rollback_list
            insert_entry(request, rollback_list, rollback_list, 2, 2, 1)
            abc = config_fun(rollback_list, request)
            print abc
            message = abc["message"]
            class1 = abc["class1"]
            return render(request, 'config_applied.html',
                          {'output_list': message, 'changeid': request.GET.get('changeid'), 'ip': request.GET.get('ip'),
                           'class': class1})
        if action == "cmplt_config_apply":
            config_list = []
            rollback_list = []
            print "Here change id " + changeid
            entry = TenantDB.objects.values_list('config_list', 'rollback_list').filter(
                pcnum__contains=changeid + '_').all()
            if entry:
                for each in entry:
                    config_list += json.loads(each[0])
                    config_list += ["#------------------------------------#"]
                    rollback_list += json.loads(each[1])
                    rollback_list += ["#------------------------------------#"]
                insert_entry(request, config_list, rollback_list, 2, 2, 1)
            else:
                msg = "No Entries found for ChangeID -" + changeid
                return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
            print config_list
            abc = config_fun(config_list, request)
            print abc
            message = abc["message"]
            class1 = abc["class1"]
            return render(request, 'config_applied.html',
                          {'output_list': message, 'changeid': request.GET.get('changeid'), 'ip': request.GET.get('ip'),
                           'class': class1})
        if action == "cmplt_rollback_apply":
            rollback = []
            entry = TenantDB.objects.values_list('rollback_list').filter(pcnum__contains=changeid + '_').all()
            if entry:
                print entry
                for each in entry:
                    rollback += json.loads(each[0])
                    rollback += ["#------------------------------------#"]
            else:
                msg = "No Entries found for ChangeID -" + changeid
                return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
            print rollback
            abc = config_fun(rollback, request)
            print abc
            message = abc["message"]
            class1 = abc["class1"]
            return render(request, 'config_applied.html',
                          {'output_list': message, 'changeid': request.GET.get('changeid'), 'ip': request.GET.get('ip'),
                           'class': class1})
        if action == "cmplt_activate_apply":
            activate_cmd = []
            entry = TenantDB.objects.values_list('activate_cmd_list').filter(pcnum__contains=changeid + '_').all()
            if entry:
                print entry
                for each in entry:
                    activate_cmd += json.loads(each[0])
                    activate_cmd += ["#------------------------------------#"]
            else:
                msg = "No Entries found for ChangeID -" + changeid
                return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
            print activate_cmd
            abc = config_fun(activate_cmd, request)
            print abc
            message = abc["message"]
            class1 = abc["class1"]
            return render(request, 'config_applied.html',
                          {'output_list': message, 'changeid': request.GET.get('changeid'), 'ip': request.GET.get('ip'),
                           'class': class1})
    else:
        return render(request, 'config_applied.html',
                      {'output_list': "Error in action", 'changeid': request.GET.get('changeid'),
                       'ip': request.GET.get('ip'), 'class': "alert-danger"})


def get_template_list():
    entry = template_db.objects.values_list('id', 'template', "ios", "plat", "tech", "name").all()
    if entry:
        templ_list = []
        for each in entry:
            template_dict = {}
            template_dict['key'] = each[0]
            if len(each[5]) > 3:
                template_dict['value'] = each[5]
            else:
                ios = ""
                plat = ""
                tech = ""
                if each[2].upper() != "NA":
                    ios = " (" + each[2].upper() + ")"
                if each[3].upper() != "NA":
                    plat = " (" + each[3].upper() + ")"
                if each[4].upper() != "NA" or each[4].upper() != "Any":
                    tech = " (" + each[4].upper() + ")"

                template_dict['value'] = each[1] + ios + plat + tech
                print "Template >>" + template_dict['value']
                # if each[3].upper() != "NA":
                # print "Platform "
                # template_dict['value'] = each[1] + " (" +each[2].upper() + ")"
                # elif each[4].upper() != "NA" or each[4].upper() != "Any":
                # template_dict['value'] = each[1] + " (" +each[2].upper() + ") ("+ each[4].upper() + ")"
                # else:
                # template_dict['value'] = each[1] + " (" +each[2].upper() + ")"
            templ_list.append(template_dict)
    return templ_list


def get_customer_options():
    q1 = CustomerDB.objects.values_list("name").all()
    customeroptions = [{"label": "Please Select Customer", "value": ""}]
    if q1:
        for entry in q1:
            print entry
            dict1 = {}
            dict1["label"] = entry[0]
            dict1["value"] = entry[0].lower()
            dict1["send"] = 'yes'
            customeroptions.append(dict1)
    return customeroptions


def get_user_selection(templateid):
    sel_dict = {}
    e1 = template_db.objects.values_list("ios", "plat", "tech", "template", "tag").filter(id=templateid).last()
    if e1:
        sel_dict['user_ios'] = e1[0]
        sel_dict['user_plat'] = e1[1]
        sel_dict['user_tech'] = e1[2]
        sel_dict['tmplt_name'] = e1[3]
        sel_dict['tag'] = e1[4]
    print sel_dict
    return sel_dict


def service_request(request):
    # nlead_library/servicerequest_inputs.py
    customer = ""
    if len(request.user.groups.all()) > 0:
        customer = str(request.user.groups.all()[0])
    request.session["customer"] = customer
    print "adder the customer"
    c1 = request.GET.get('c1')
    pre_response = request
    in_data = ServiceRequest_InputData(c1, pre_response)
    print in_data
    # in_data = green_serviceRequest_InputData(pre_response)
    response = in_data.get_response_data()
    # print response
    request.session['service_request_type'] = c1

    return HttpResponse(json.dumps(response), content_type="application/json")


def inputs_service(request):
    '''
        Description:
                Get the inputs from phase 1 and perform the specific task according to option selected
		Inputs:
                request
		Output:
				Render html template or inputs corresponding to option selected.


    :param request:
    :return:
    '''
    import json
    from mysite.models import CronDB
    from mysite.models import ApicIpDb
    request.session['id_flag'] = False
    request.session["validate_flag"] = False
    request.session["is_bulk"] = False
    type = request.session['service_request_type']
    customer = request.session['customer']

    print type
    input_dict = {}
    if_template = "no"
    for key, value in request.GET.iteritems():
        input_dict[key] = value
    # print key , " value is ", value
    # if request.GET.has_key('req_type') :
    # condition to check if template is in existing type
    # print "I am in request type"
    taskid = request.session['taskid'] = request.GET.get('taskid')

    if request.GET.has_key('project_no') and request.GET.get('project_no') != "":
        request.session['project_no'] = request.GET.get('project_no')
    if request.GET.has_key('subtaskid') and request.GET.get('subtaskid') != "":
        subtaskid = request.GET.get('subtaskid')
    else:
        subtaskid = "00"
    request.session['subtaskid'] = subtaskid
    # request.session['customer'] = request.GET.get("customer")
    request.session["extension"] = {}
    if request.GET.has_key("devices"):
        if re.search(r'\d+.\d+.\d+.\d+', request.GET.get("devices")):
            request.session['devices'] = request.GET.get("devices")
        elif re.search(r'\w+', request.GET.get("devices")):
            entry = DeviceModel.objects.filter(name__contains=request.GET.get("devices")).values_list('ip').last()
            if entry:
                print entry
                request.session['devices'] = entry[0]
            else:
                return render(request, 'notification.html',
                              {'output_list': "Please Enter Device IP or Corrct Datacenter name",
                               'class': 'alert-danger'})
        # else:

    elif 'devices' in request.session:
        del request.session['devices']
    else:
        request.session['devices'] = []
    if request.GET.has_key("config_action"):
        request.session['config_action'] = request.GET.get("config_action")
    location_name = request.session["acilocation"] = request.GET.get("acilocation")
    request.session["projectid"] = "111"
    entry = ApicIpDb.objects.values_list('ip').filter(name=location_name).last()
    if entry:
        request.session['sship'] = entry[0]
        request.session["acilocation"] = location_name

    if request.GET.has_key('template_name'):
        if_template = request.GET.get('template_name')
    # New Request, Task Without Request Number
    if type == "1" or type == "3":
        # below code for chart demo
        if request.GET.get("template") and request.GET.get("template") == "1250":
            return render(request, 'chart1.html', "")

        if request.GET.get("template") and request.GET.get("template") == "1251":
            return render(request, 'chart2.html', "")

        # print " IP =====", len(request.GET.get('devices'))
        if request.GET.has_key('devices') and request.GET.get('devices') == "":
            # return render(request, 'notification.html',
            #               {'output_list': "Please Enter Device IP", 'class': 'alert-danger'})
            request.GET.get('devices') == "198.18.133.200"
        if request.GET.has_key('taskid') and request.GET.get('taskid') != "":
            # q1 = ServiceRequestDB.objects.filter(taskid=request.GET.get('taskid'),
            #                                      customer=request.GET.get("customer")).last()
            # if q1:
            #     output = "Service Request " + str(
            #         request.GET.get('taskid')) + " Already Exist for customer : '" + request.GET.get(
            #         "customer").upper() + "'"
            #     return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
            request.session['taskid'] = taskid
        # function for phase2

        # print "hard coded for demo -- Please remove"
        # Below is for cloud
        if request.GET.get("template") and request.GET.get("template") == "1193":
            app = ""
            tech = ""
            if request.GET.has_key('group'):
                if request.GET.get('group') == "application":
                    tech = 'yes'
                if request.GET.get('group') == "it":
                    app = 'yes'

            user_sel = get_user_selection("1193")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])

            response_data = {}
            response_data["inputs"] = []
            response_data["opflag"] = 1
            inp1 = {}
            inp1["type"] = 'line'
            inp1["label"] = 'Application Information'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["type"] = 'hline'
            inp1["newline"] = 'yes'
            response_data["inputs"].append(inp1)
            inp1 = {"type": "oneline", "data": {"column": "6", "newline": "no", "inputs": [
                {"type": "dropdown", "disabled": app, "name": "customer_name", "desc": "Customer Name",
                 "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": "",
                 "options": [{"value": "James Walker", "label": "James Walker"},
                             {"value": "David Moore", "label": "David Moore"}]},
                {"type": "dropdown", "disabled": app, "name": "project_sponsor", "desc": "Project Sponsor",
                 "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": "",
                 "options": [{"value": "Thomas Brian", "label": "Thomas Brian"}]}]}}
            response_data["inputs"].append(inp1)
            inp1 = {"type": "oneline", "data": {"column": "6", "newline": "no", "inputs": [
                {"type": "dropdown", "disabled": app, "name": "project_name", "desc": "Project Name",
                 "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": "",
                 "options": [{"value": "Health & Safety", "label": "Health & Safety"},
                             {"value": "Patient Service", "label": "Patient Service"},
                             {"value": "Pharmacy", "label": "Pharmacy"}, {"value": "Radiology", "label": "Radiology"}]},
                {"type": "dropdown", "disabled": app, "name": "project_name", "desc": "Project Manager",
                 "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": "",
                 "options": [{"value": "Kevin", "label": "Kevin"}, {"value": "Susan Parker", "label": "Susan Parker"},
                             {"value": "Patrica Collins", "label": "Patrica Collins"},
                             {"value": "Young", "label": "Young"}, {"value": "Harris", "label": "Harris"}]}]}}
            response_data["inputs"].append(inp1)
            inp1 = {"type": "oneline", "data": {"column": "6", "newline": "no", "inputs": [
                {"type": "text", "disabled": app, "name": "est_start_dt", "desc": "Estimated Start Date",
                 "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": "11/01/2017"},
                {"type": "text", "disabled": app, "name": "est_end_dt", "desc": "Estimated End Date",
                 "extraclass": "color-blue", "hide": "hide", "rhide": "hide", "default1": "12/01/2017"}]}}
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["type"] = 'line'
            inp1["label"] = 'IT Infrastructure Information'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["type"] = 'hline'
            inp1["newline"] = 'yes'
            response_data["inputs"].append(inp1)

            # inp1 ={"readonly":tech}
            # inp1["name"] = 'cloudserviceprovider'
            # inp1["format"] = 'default1'
            # inp1["desc"] = 'Cloud Provider'
            # inp1["default1"] = 'AWS Direct Connect'
            # inp1["type"] = 'dropdown'
            # inp1["options"] = [{"value":"AWS Direct Connect","label":"AWS Direct Connect"},{"value":"Azure ExpressRoute","label":"Azure ExpressRoute"},{"value":"Google Dedicated Interconnect","label":"Google Dedicated Interconnect"},{"value":"Google VPC with IPsec VPN","label":"Google VPC with IPsec VPN"},{"value":"Oracle FastConnet","label":"Oracle FastConnet"},{"value":"vCloud Direct Connect","label":"vCloud Direct Connect"},{"value":"Other","label":"Other"}]
            # response_data["inputs"].append(inp1)
            inp1 = {"name": "connectionspeed", "disabled": tech, "format": "default1", "desc": "Connection Speed",
                    "default1": "1", "type": "radio",
                    "options": [{"value": "1", "label": "1G"}, {"value": "2", "label": "10G"},
                                {"value": "3", "label": "Other"}]}
            response_data["inputs"].append(inp1)
            inp1 = {"disabled": tech}
            inp1["name"] = 'connectiontype'
            inp1["format"] = 'default1'
            inp1["desc"] = 'Connection Type'
            inp1["default1"] = '1'
            inp1["type"] = 'dropdown'
            inp1["options"] = [{"value": "1", "label": "Single"}, {"value": "2", "label": "Dual"},
                               {"value": "3", "label": "Dual Geo-redundant"}, {"value": "4", "label": "Quard"},
                               {"value": "4", "label": "Other"}]
            response_data["inputs"].append(inp1)
            inp1 = {"name": "exchangekey", "disabled": tech, "format": "default1", "desc": "Service-Key",
                    "default1": "", "type": "text"}
            response_data["inputs"].append(inp1)
            inp1 = {"name": "iptype", "disabled": tech, "format": "default1", "desc": "IP Address Type",
                    "default1": "1", "type": "radio",
                    "options": [{"value": "1", "label": "Bring your own device(BYOIP)"},
                                {"value": "2", "label": "Public (Custom)"}]}
            response_data["inputs"].append(inp1)
            inp1 = {"name": "ipallocation", "disabled": tech, "format": "default1", "desc": "IP Address Allocation",
                    "default1": "1", "type": "dropdown",
                    "options": [{"value": "/23", "label": "/23"}, {"value": "/24", "label": "/24"},
                                {"value": "/25", "label": "/25"}, {"value": "/26", "label": "/26"},
                                {"value": "/27", "label": "/27"}, {"value": "/28", "label": "/28"},
                                {"value": "/29", "label": "/29"}, {"value": "/30", "label": "/30"}]}
            response_data["inputs"].append(inp1)
            inp1 = {"name": "disaster_recovery", "disabled": tech, "format": "default1", "desc": "Disaster Recovery",
                    "default1": "1", "type": "radio", "options": [{"value": "1", "label": "DNS Change (Cos 3-8)"},
                                                                  {"value": "2",
                                                                   "label": "GTM Load Balancing (Cos 0-2)"}]}
            response_data["inputs"].append(inp1)
            # inp1 ={}
            # inp1["name"] = 'redundancytype'
            # inp1["format"] = 'default1'
            # inp1["desc"] = 'Redundancy Type'
            # inp1["default1"] = '1'
            # inp1["type"] = 'dropdown'
            # inp1["options"] = [{"value":"1","label":"Dual Geo-redundant 1G"},{"value":"2","label":"Dual Geo-redundant 10G"},{"value":"3","label":"Quad Geo-redundant1G"},{"value":"4","label":"Quad Geo-redundant10G"},{"value":"5","label":"No Redundancy"}]
            # response_data["inputs"].append(inp1)
            # inp1 ={}
            # inp1["name"] = 'noofservers'
            # inp1["format"] = 'default1'
            # inp1["desc"] = 'Num of Servers/IPs'
            # # inp1["default1"] = ''
            # inp1["example"] = 'Ex:62'
            # inp1["default1"] = ''
            # inp1["type"] = 'text'
            # inp1["condition"] = '/^[0-9]{1,10}$/'
            # response_data["inputs"].append(inp1)
            # inp1 = {}
            # inp1["name"] = 'usessameip'
            # inp1["format"] = 'default1'
            # inp1["desc"] = 'DR uses same IP'
            # inp1["default1"] = '1'
            # inp1["type"] = 'radio'

            # inp1["options"] = [{"value":"1","label":"Yes","hide":"hide","trigger": ["usergtm"]},{"value":"2","label":"No"}]
            # response_data["inputs"].append(inp1)
            # inp1 = {}
            # inp1["name"] = 'usergtm'
            # inp1["format"] = 'default1'
            # inp1["desc"] = 'DR uses GTM'
            # inp1["default1"] = '1'
            # inp1["type"] = 'radio'
            # inp1["options"] = [{"value":"1","label":"Yes"},{"value":"2","label":"No"}]
            # response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'bgp_as_num'
            inp1["type"] = 'hidden'
            inp1["default1"] = '65001'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'peer_ip'
            inp1["type"] = 'hidden'
            inp1["default1"] = '192.16.4.1'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'peer_as_num'
            inp1["type"] = 'hidden'
            inp1["default1"] = '62888'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'peer_group'
            inp1["type"] = 'hidden'
            inp1["default1"] = 'AWS-Peer-Group'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'prefix'
            inp1["type"] = 'hidden'
            inp1["default1"] = '10.4.5.0/24'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'outbound_prefix_list'
            inp1["type"] = 'hidden'
            inp1["default1"] = 'Outbound-Prefix-List'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'outbound_policy'
            inp1["type"] = 'hidden'
            inp1["default1"] = 'Outbound-Policy'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'address'
            inp1["type"] = 'hidden'
            inp1["default1"] = '172.16.3.1/30'
            response_data["inputs"].append(inp1)
            inp1 = {}
            inp1["name"] = 'interface'
            inp1["type"] = 'hidden'
            inp1["default1"] = 'ge-0/0/0'
            response_data["inputs"].append(inp1)
            return HttpResponse(json.dumps(response_data), content_type="application/json")
            # elif request.GET.get("template") and request.GET.get("template") == "1206" or request.GET.get(
            # "template") == "1208" or request.GET.get("template") == "1210" or request.GET.get("template") == "1214":
        elif request.GET.get("template") and request.GET.get("template") in ["1206", "1208", "1210", "1214", "1243",
                                                                             "1245"]:

            user_sel = get_user_selection(request.GET.get("template"))
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            response_data = {}
            response_data["inputs"] = []
            response_data["opflag"] = 1
            inp1 = {}
            inp1["type"] = 'line'
            inp1["label"] = 'Actions Required :'
            response_data["inputs"].append(inp1)
            inp1 = {"name": "device_NA", "send": "yes", "format": "default1", "desc": "Device Inaccessible",
                    "default1": "continue", "type": "radio",
                    "options": [{"value": "continue", "label": "Continue"}, {"value": "abort", "label": "Abort"}]}
            response_data["inputs"].append(inp1)

            # inp1 = {"name": "precheck_err", "format": "default1", "desc": "Pre-Check Error", "default1": "continue",
            #         "type": "radio",
            #         "options": [{"value": "continue", "label": "Continue"}, {"value": "abort", "label": "Abort"},
            #                     {"value": "skip", "label": "Skip"}]}
            # response_data["inputs"].append(inp1)
            # inp1 = {"name": "config_err", "format": "default1", "desc": "Configuration Error", "default1": "continue",
            #         "type": "radio",
            #         "options": [{"value": "continue", "label": "Continue"}, {"value": "abort", "label": "Abort"}]}
            # response_data["inputs"].append(inp1)
            # inp1 = {"name": "postcheck_err", "format": "default1", "desc": "Post-Check Error", "default1": "continue",
            #         "type": "radio",
            #         "options": [{"value": "continue", "label": "Continue"}, {"value": "abort", "label": "Abort"},
            #                     {"value": "rollback", "label": "Rollback"}]}
            # response_data["inputs"].append(inp1)
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get("template") and request.GET.get("template") == "1254":
            user_sel = get_user_selection(request.GET.get("template"))
            print user_sel
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            request.session['sel_para'] = {'ios': user_sel['user_ios'], 'plat': user_sel['user_plat'],
                                           'tech': user_sel['user_tech'],
                                           'type': user_sel['tmplt_name'], 'customer': customer}
            response_data = {}
            for el in request.GET:
                if request.GET.get(el):
                    response_data[el] = request.GET.get(el)
            request.session['action_selected'] = response_data
            uploadtype = ""
            config_action = request.session.get('config_action')
            return render(request, 'aci_new_dropzone.html',
                          {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                           'config_action': config_action})
            # response_data = {}
            # response_data["inputs"] = []
            # response_data["opflag"] = 1
            # inp1 = {"name": "new_platform", "format": "default1", "desc": "New Platform",
            #         "default1": "", "type": "dropdown",
            #         "options": [{"value": "9300", "label": "C9300"}, {"value": "9300-stack", "label": "C9300-stack"},
            #                     {"value": "9410", "label": "C9410"}, {"value": "9404", "label": "C9404"},
            #                     {"value": "9407", "label": "C9407"}]}
            # response_data["inputs"].append(inp1)
            # return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get("template") and request.GET.get("template") == "1228":
            user_sel = get_user_selection(request.GET.get("template"))
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            conversion_method = request.GET.get('conversion_method')
            new_platform = request.GET.get('new_platform')
            config_display = request.GET.get('config_display')
            uplink_module = request.GET.get('uplink_modules')
            if conversion_method == "upload_file":

                uploadtype = "migration"
                config_action = ""
                input_values = {'uplink_module': uplink_module, 'new_platform': new_platform,
                                'config_display': config_display}
                return render(request, 'new_file_dropzone.html',
                              {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                               'config_action': config_action, 'input_values': json.dumps(input_values)})
            elif conversion_method == "ssh":
                # Add SSH code an
                outputlist = {}
                device_ip = request.session['devices']
                login = Provision(taskid, subtaskid, device_ip, "netadmin", "C1sco12345", {})
                # print login.get_login_status()
                if login.get_login_status()['login_flag']:
                    print "Login Success"
                    complte_op = login.get_show_run_op()
                    print complte_op
                    converted_output = conversion_function(complte_op, new_platform, uplink_module)
                    outputlist["Configuration"] = complte_op
                    var_flag = get_variable_flag(complte_op)
                    # txt_download = 1
                    return render(request, 'tabs_configuration.html',
                                  {'output_list': outputlist, "var_flag": var_flag, "txt_download": 1})

                return render(request, 'notification.html',
                              {'output_list': "Work In progress", 'class': 'alert-danger'})
        #     response_data = {}
        #     response_data["inputs"] = []
        #     response_data["opflag"] = 1
        #     inp1 = {}
        #     # inp1["type"] = 'line'
        #     # inp1["label"] = 'Actions Required :'
        #     # response_data["inputs"].append(inp1)
        #
        #
        #     inp1 = {"name": "new_platform", "format": "default1", "desc": "New Platform",
        #             "default1": "", "type": "dropdown",
        #             "options": [{"value": "9300", "label": "C9300"},{"value": "9300-stack", "label": "C9300-stack"},
        #                         {"value": "9410", "label": "C9410"},{"value": "9404", "label": "C9404"},{"value": "9407", "label": "C9407"}]}
        #     response_data["inputs"].append(inp1)
        #     inp1 = {"name": "uplink_modules", "send": "yes", "format": "default1", "desc": "Uplink Modules",
        #             "default1": "yes", "type": "dropdown",
        #             "options": [{"value": "copper", "label": "Copper"}, {"value": "1G", "label": "1G"},
        #                         {"value": "10G", "label": "10G"}, {"value": "25G", "label": "25G"},
        #                         {"value": "40G", "label": "40G"}]}
        #     response_data["inputs"].append(inp1)
        #     inp1 = {"name": "conversion_method", "send": "yes", "format": "default1", "desc": "Conversion Method",
        #             "default1": "yes", "type": "radio",
        #             "options": [{"value": "ssh", "label": "SSH"}, {"value": "upload_file", "label": "Upload File"}]}
        #     response_data["inputs"].append(inp1)
        #     inp1 = {"name": "config_display", "send": "yes", "format": "default1", "desc": "Type",
        #             "default1": "yes", "type": "radio",
        #             "options": [{"value": "configuration", "label": "Configuration"}, {"value": "port_matrix", "label": "Port Matrix"}]}
        #     response_data["inputs"].append(inp1)
        #     return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get("template") and request.GET.get("template") == "1233":
            user_sel = get_user_selection(request.GET.get("template"))
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            response_data = {}
            response_data["inputs"] = []
            response_data["opflag"] = 1
            inp1 = {}
            # inp1["type"] = 'line'
            # inp1["label"] = 'Actions Required :'
            # response_data["inputs"].append(inp1)
            inp1 = {"name": "int_to_skip", "send": "yes", "format": "default1", "desc": "Interface To Skip",
                    "default1": "", "type": "text"}
            response_data["inputs"].append(inp1)
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get("template") and request.GET.get("template") == "1236":
            user_sel = get_user_selection(request.GET.get("template"))
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            response_data = {}
            response_data["inputs"] = []
            response_data["opflag"] = 1
            inp1 = {}
            # inp1["type"] = 'line'
            # inp1["label"] = 'Actions Required :'
            # response_data["inputs"].append(inp1)
            inp1 = {"name": "store_name", "send": "yes", "format": "default1", "desc": "Store No.",
                    "default1": "", "type": "text"}
            response_data["inputs"].append(inp1)
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get("template") and request.GET.get("template") == "1237":
            uploadtype = "yml_info"
            config_action = ""
            return render(request, 'new_file_dropzone.html',
                          {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                           'config_action': config_action})
        elif request.GET.get("template") and request.GET.get("template") == "1239":
            user_sel = get_user_selection(request.GET.get("template"))
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            response_data = {}
            response_data["inputs"] = []
            response_data["opflag"] = 1
            inp1 = {}
            # inp1["type"] = 'line'
            # inp1["label"] = 'Actions Required :'
            # response_data["inputs"].append(inp1)
            inp1 = {"name": "store_no", "mandatory": "yes", "send": "yes", "format": "default1", "desc": "Store No.",
                    "default1": "", "type": "text"}
            response_data["inputs"].append(inp1)
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get("template") and request.GET.get("template") == "1248":

            user_sel = get_user_selection(request.GET.get("template"))
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            response_data = {}
            # response_data["inputs"] = []

            input = Ansible_Inputs()
            response_data = input.get_response_data()
            response_data["opflag"] = 1
            inp1 = {}
            # inp1["type"] = 'line'
            # inp1["label"] = 'Actions Required :'
            # response_data["inputs"].append(inp1)
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get("template") and request.GET.get("template") == "1205":
            prereserved_ports = ['Eth 1/45', 'Eth 1/46', 'Eth 1/47', 'Eth 1/48']
            leaf_options = []
            port_options = []

            with open('/home/ubuntu/prepro/mysite/mysite/Json_DATA/' + request.session[
                'devices'] + '.json') as ip_json_data:
                ip_data = json.load(ip_json_data)
                # print ip_data
                # l_opt = sorted(ip_data.items(), key=lambda kv: kv[1])
                for k, v in ip_data.iteritems():
                    dict1 = {'send': "yes"}
                    dict1["label"] = "LCAWDCP-01-01-" + k + " [ " + v["id"] + "-" + v["type"] + " ]"
                    dict1["value"] = v["id"]
                    leaf_options.append(dict1)
            # print l_opt
            if request.GET.get('config_action') == 'reserve':
                # login = login_authentication('admin', 'C1sco12345', request.session['devices'])
                # if login["login_flag"]:
                #     print create_ip_data(login["child"], request.session['devices'])
                # else:
                #     return render(request, 'notification.html', {'output_list': 'SSh To Device Failed', 'class': 'alert-danger'})
                user_sel = get_user_selection(request.GET.get("template"))
                output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                       user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
                response_data = {'column': '12', u'newline': u'yes'}
                response_data["inputs"] = []
                response_data["opflag"] = 1
                # inp1 = {}
                # # inp1["type"] = 'line'
                # # inp1["label"] = 'Actions Required :'
                # # response_data["inputs"].append(inp1)
                inp1 = {"name": "template", "send": "yes", "format": "default1", "desc": "template_id",
                        "default1": request.GET.get("template"), "type": "hidden"}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "work_order_no", "send": "yes", "format": "default1", "desc": "Work Order Number",
                        "length": "full",
                        "default1": "", "mandatory": "yes", 'example': "Ex: REQ0000001", "type": "text", }
                response_data["inputs"].append(inp1)

                inp1 = {"name": "provision_reason", "send": "yes", "format": "default1", "desc": "Provision Reason",
                        "length": "full", "trigger": ["other_reservation_reason"], "condition": "other",
                        "default1": "", "type": "dropdown", "hide": "hide",
                        'options': [{"value": "new_server", "label": "New Server "},
                                    {"value": "port_change", "label": "Port change", },
                                    {"value": "other", "label": "Other"}]}

                response_data["inputs"].append(inp1)

                inp1 = {"name": "other_reservation_reason", "send": "", "format": "default1", "desc": "Other Reason",
                        "length": "full", "hide": "hide",
                        "default1": "", "type": "text", }
                response_data["inputs"].append(inp1)

                inp1 = {"name": "rack_row_number", "send": "yes", "format": "default1", "desc": "Rack Row Number",
                        "length": "full",
                        "default1": "", "type": "dropdown",
                        "options": [{"value": "01", 'send': 'yes', "label": "R-01 "},
                                    {"value": "02", 'send': 'yes', "label": "R-02", },
                                    {"value": "03", 'send': 'yes', "label": "R-03"},
                                    {"value": "04", 'send': 'yes', "label": "R-04 "},
                                    {"value": "05", 'send': 'yes', "label": "R-05", },
                                    {"value": "06", 'send': 'yes', "label": "R-06"},
                                    {"value": "07", 'send': 'yes', "label": "R-07 "},
                                    {"value": "08", 'send': 'yes', "label": "R-08", },
                                    {"value": "09", 'send': 'yes', "label": "R-09"},
                                    {"value": "10", 'send': 'yes', "label": "R-10 "},
                                    {"value": "11", 'send': 'yes', "label": "R-11", },
                                    {"value": "12", 'send': 'yes', "label": "R-12"}
                                    ]}
                response_data["inputs"].append(inp1)
                rack_options = [{'value': u'R-01-01', 'send': 'yes', 'label': u'R-01-01'},
                                {'value': u'R-01-02', 'send': 'yes', 'label': u'R-01-02'},
                                {'value': u'R-01-03', 'send': 'yes', 'label': u'R-01-03'},
                                {'value': u'R-01-06', 'send': 'yes', 'label': u'R-01-06'},
                                {'value': u'R-01-07', 'send': 'yes', 'label': u'R-01-07'},
                                {'value': u'R-01-04', 'send': 'yes', 'label': u'R-01-04'},
                                {'value': u'R-01-05', 'send': 'yes', 'label': u'R-01-05'},
                                {'value': u'R-01-08', 'send': 'yes', 'label': u'R-01-08'},
                                {'value': u'R-01-09', 'send': 'yes', 'label': u'R-01-09'},
                                {'value': u'R-01-10', 'send': 'yes', 'label': u'R-01-10'},
                                {'value': u'R-01-11', 'send': 'yes', 'label': u'R-01-11'},
                                {'value': u'R-01-12', 'send': 'yes', 'label': u'R-01-12'}, ]
                inp1 = {"name": "rack_number", "send": "yes", "format": "default1", "desc": "Rack Number",
                        "length": "full",
                        "default1": "", "type": "dropdown", "options": rack_options}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "leaf_id", "send": "yes", "format": "default1", "desc": "Leaf Switches",
                        "length": "full",
                        "type": "dropdown-checkbox", 'options': leaf_options}
                response_data["inputs"].append(inp1)

                # inp1 = {"name": "physical_port", "send": "yes", "format": "default1", "desc": "Leaf-1 Physical Port",
                #         "default1": "", "type": "dropdown-checkbox", 'options': port_options}
                # response_data["inputs"].append(inp1)

                # inp1 = {"name": "leaf_2_interface", "send": "yes", "format": "default1", "desc": "Leaf-2 Interface",
                #         "default1": "", "type": "dropdown", 'options': "", }
                # response_data["inputs"].append(inp1)

                # inp1 = {"name": "physical_port", "send": "yes", "format": "default1", "desc": "Physical Port",
                #         "default1": "", "type": "text",}
                # response_data["inputs"].append(inp1)
                server_options = [{'value': u'S-01-01-01', 'send': 'yes', 'label': u'S-01-01-01'},
                                  {'value': u'S-01-01-02', 'send': 'yes', 'label': u'S-01-01-02'},
                                  {'value': u'S-01-01-03', 'send': 'yes', 'label': u'S-01-01-03'},
                                  {'value': u'S-01-01-04', 'send': 'yes', 'label': u'S-01-01-04'},
                                  {'value': u'S-01-01-05', 'send': 'yes', 'label': u'S-01-01-05'},
                                  {'value': u'S-01-01-06', 'send': 'yes', 'label': u'S-01-01-06'},
                                  {'value': u'S-01-01-07', 'send': 'yes', 'label': u'S-01-01-07'},
                                  {'value': u'S-01-01-08', 'send': 'yes', 'label': u'S-01-01-08'},
                                  {'value': u'S-01-01-09', 'send': 'yes', 'label': u'S-01-01-09'},
                                  {'value': u'S-01-01-10', 'send': 'yes', 'label': u'S-01-01-10'},
                                  {'value': u'S-01-01-11', 'send': 'yes', 'label': u'S-01-01-11'},
                                  {'value': u'S-01-01-12', 'send': 'yes', 'label': u'S-01-01-12'}, ]
                inp1 = {"name": "server_name", "send": "", "format": "default1", "desc": "Server Name (Optional)",
                        "length": "full",
                        "default1": "", "type": "dropdown", "options": server_options}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "temporary_port_reservation", "format": "default1",
                        "desc": "Temporary port reservation ?",
                        "length": "full",
                        "default1": "no", "type": "radio", 'options': [
                        {"value": "yes", "label": "Yes", "hide": "hide", "trigger": ["reservation_duration"]},
                        {"value": "no", "label": "No", }]}

                response_data["inputs"].append(inp1)

                inp1 = {"name": "reservation_duration", "format": "", "default1": "", "output": "", "type": "dropdown",
                        "example": "(Optional)", "desc": "Reservation Duration", "length": "full", "mandatory": "no",
                        "hide": "hide",
                        "options": [{"value": "1month", "label": "1 Month"},
                                    {"value": "3month", "label": "3 Month"},
                                    {"value": "6month", "label": "6 Month"},
                                    {"value": "1year", "label": "1 Year"}]}

                response_data["inputs"].append(inp1)

                inp1 = {"name": "admin_interface_status", "send": "yes", "format": "default1", "desc": "Admin Status",
                        "length": "full",
                        "default1": "shutdown", "type": "radio", 'options': [{"value": "shutdown", "label": "Shutdown"},
                                                                             {"value": "no shutdown",
                                                                              "label": "No Shutdown", }]}
                response_data["inputs"].append(inp1)
                request.session['input_response_data'] = response_data
                return HttpResponse(json.dumps(response_data), content_type="application/json")

            elif request.GET.get('config_action') == 'provision':
                user_sel = get_user_selection(request.GET.get("template"))
                output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                       user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
                response_data = {'column': '12', u'newline': u'yes'}
                response_data["inputs"] = []
                response_data["opflag"] = 1
                work_order_list = []
                query = ACIInterfaceStatusDB.objects.filter(status__in=["reserve"]).values('work_order_no').all()
                if query:
                    print query
                    for dct in query:
                        if dct["work_order_no"] not in work_order_list:
                            work_order_list.append(dct["work_order_no"])
                wo_options = []
                for each in work_order_list:
                    dict1 = {"send": "yes", "hide": "hide"}
                    dict1["label"] = each
                    dict1["value"] = each
                    wo_options.append(dict1)
                inp1 = {"name": "work_order_no", "send": "yes", "format": "default1", "desc": "Work Order Number",
                        "length": "full",
                        "default1": "", "type": "dropdown", 'options': wo_options}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "tenant_name", "send": "yes", "format": "default1", "desc": "Tenant Name",
                        "length": "full",
                        "default1": "", "type": "dropdown", "options": [{"value": "WDC_Main", "label": "WDC_Main"},
                                                                        {"value": "Prod", "label": "Prod"},
                                                                        {"value": "MSP", "label": "MSP", }]}
                response_data["inputs"].append(inp1)

                # inp1 = {"name": "port_media_type", "send": "yes", "format": "default1", "desc": "Port Type","length":"full",
                #         "default1": "fibre", "type": "radio", 'options': [{"value": "fibre", "label": "Fibre"},
                #                                                              {"value": "coper","label": "Coper", }]}
                # response_data["inputs"].append(inp1)
                db_leaf_list = []
                db_ports_list = []
                try:
                    query2 = ACIInterfaceStatusDB.objects.filter(status__in=["reserve"],
                                                                 work_order_no=work_order_list[0]).values('leaf_id',
                                                                                                          'physical_port').all()
                except:
                    return render(request, 'notification.html',
                                  {'output_list': "No leaf and ports reserved for provision", "count": "1",
                                   'class': 'alert-danger'})

                if query2:
                    # print query2
                    for dct in query2:
                        if dct["leaf_id"] not in db_leaf_list:
                            db_leaf_list.append(dct["leaf_id"])
                        if dct["physical_port"] not in db_ports_list:
                            db_ports_list.append(dct["physical_port"])

                for cst in db_leaf_list:
                    for opt in leaf_options:
                        if opt.get("value") == cst:
                            opt["selected"] = "yes"
                inp1 = {"name": "leaf_id", "send": "yes", "format": "default1", "desc": "Leaf Names", "length": "full",
                        "default1": "", "type": "dropdown-checkbox", 'options': leaf_options}
                response_data["inputs"].append(inp1)
                count = 1
                print db_ports_list
                # db_ports_list=[db_ports_list[0]]
                for cst in db_leaf_list:
                    port_options = []
                    for each in db_ports_list:
                        dict1 = {}
                        dict1["label"] = each.title()
                        dict1["value"] = each
                        port_options.append(dict1)
                    print db_ports_list, port_options
                    inp1 = {"name": "physical_port" + str(count), "send": "yes", "length": "full",
                            "desc": "Leaf " + cst + " Physical Port", "type": "dropdown-checkbox",
                            'options': port_options}
                    count += 1
                    response_data["inputs"].append(inp1)

                inp1 = {"name": "port_mode", "send": "yes", "format": "default1", "desc": "Port Mode",
                        "length": "full",
                        "default1": "access", "type": "radio",
                        'options': [{"value": "access", "label": "Access", 'hide': 'hide', 'send': 'yes'},
                                    {"value": "trunk", "label": "Trunk", 'hide': 'hide', 'send': 'yes'}]}
                response_data["inputs"].append(inp1)
                # inp1 = {"name": "physical_port1", "send": "yes", "format": "default1", "desc": "Leaf Physical Port","length":"full",
                #         "default1": "", "type": "dropdown-checkbox", 'options': port_options }
                # response_data["inputs"].append(inp1)

                inp1 = {"name": "vlan_id", "send": "yes", "format": "default1", "desc": "VLAN Number.",
                        "length": "full",
                        "default1": "", "type": "dropdown",
                        'options': [{"value": "30", "label": "30 [EPG: EPG30, BD: BD30]"},
                                    {"value": "40", "label": "40 [EPG: EPG40, BD: BD40]"},
                                    {"value": "101", "label": "101 [EPG: Prod-EPG-1, BD: Prod-BD-1]"},
                                    {"value": "102", "label": "102 [EPG: Prod-EPG-2, BD: Prod-BD-2]"}]}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "nx_speed", "send": "yes", "format": "default1", "desc": "Physical Port Speed",
                        "length": "full",
                        "default1": "auto", "type": "radio",
                        'options': [{"value": "auto", "label": "Auto"}, {"value": "10G", "label": "10G"},
                                    {"value": "1G", "label": "1G"}]}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "discovery_protocol", "send": "", "format": "default1", "desc": "Discovery Protocol",
                        "length": "full", "default1": "LLPD", "type": "radio",
                        'options': [{"value": "LLPD", "label": "LLPD"}, {"value": "None", "label": "None"},
                                    {"value": "CDP", "label": "CDP"}]}

                response_data["inputs"].append(inp1)

                inp1 = {"name": "admin_interface_status", "send": "yes", "format": "default1", "desc": "Admin Status",
                        "length": "full",
                        "default1": "shutdown", "type": "radio", 'options': [{"value": "shutdown", "label": "Shutdown"},
                                                                             {"value": "no shutdown",
                                                                              "label": "No Shutdown", }]}
                response_data["inputs"].append(inp1)

                request.session['input_response_data'] = response_data
                return HttpResponse(json.dumps(response_data), content_type="application/json")

            elif request.GET.get('config_action') == 'activation':
                user_sel = get_user_selection(request.GET.get("template"))
                output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                       user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
                response_data = {'column': '12', u'newline': u'yes'}
                response_data["inputs"] = []
                response_data["opflag"] = 1
                work_order_list = []
                db_leaf_list = []
                db_ports_list = []
                query = ACIInterfaceStatusDB.objects.filter(status__in=["reserve", "provision"]).values('work_order_no',
                                                                                                        'leaf_id',
                                                                                                        'physical_port').all()
                if query:
                    print query
                    for dct in query:
                        if dct["work_order_no"] not in work_order_list:
                            work_order_list.append(dct["work_order_no"])
                        if dct["leaf_id"] not in db_leaf_list:
                            db_leaf_list.append(dct["leaf_id"])
                        if dct["physical_port"] not in db_ports_list:
                            db_ports_list.append(dct["physical_port"])
                wo_options = []
                for each in work_order_list:
                    dict1 = {}
                    dict1["label"] = each
                    dict1["value"] = each
                    wo_options.append(dict1)
                inp1 = {"name": "work_order_no", "send": "yes", "format": "default1", "desc": "Work Order Number",
                        "length": "full",
                        "default1": "", "type": "dropdown", 'options': wo_options}
                response_data["inputs"].append(inp1)

                for cst in db_leaf_list:
                    for opt in leaf_options:
                        if opt.get("value") == cst:
                            opt["selected"] = "yes"
                inp1 = {"name": "leaf_id", "send": "yes", "format": "default1", "desc": "Leaf Names", "length": "full",
                        "default1": "", "type": "dropdown-checkbox", 'options': leaf_options}
                response_data["inputs"].append(inp1)
                for each in db_ports_list:
                    dict1 = {}
                    dict1["label"] = each
                    dict1["value"] = each
                    dict1["selected"] = "yes"
                    port_options.append(dict1)
                print db_ports_list, port_options
                inp1 = {"name": "physical_port1", "send": "yes", "format": "default1", "desc": "Leaf Physical Port",
                        "length": "full",
                        "default1": "", "type": "dropdown-checkbox", 'options': port_options}
                response_data["inputs"].append(inp1)

                # inp1 = {"name": "physical_port", "send": "yes", "format": "default1", "desc": "Physical Port",
                #         "default1": "", "type": "text",}
                # response_data["inputs"].append(inp1)

                inp1 = {"name": "admin_interface_status", "send": "yes", "format": "default1", "desc": "Admin Status",
                        "length": "full",
                        "default1": "shutdown", "type": "radio", 'options': [{"value": "shutdown", "label": "Shutdown"},
                                                                             {"value": "no shutdown",
                                                                              "label": "No Shutdown", }]}

                response_data["inputs"].append(inp1)
                request.session['input_response_data'] = response_data
                return HttpResponse(json.dumps(response_data), content_type="application/json")

            elif request.GET.get('config_action') == 'deprovision_reservation':

                user_sel = get_user_selection(request.GET.get("template"))
                output = CombinationsSubmittedTemplate(request, user_sel['user_ios'],
                                                       user_sel['user_plat'], user_sel['user_tech'],
                                                       user_sel['tmplt_name'], user_sel['tag'])

                # user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])

                response_data = {'column': '12', u'newline': u'yes'}
                response_data["inputs"] = []
                response_data["opflag"] = 1

                inp1 = {"name": "work_order_no", "send": "yes", "format": "default1", "desc": "Work Order Number",
                        "length": "full",
                        "default1": "", "mandatory": "yes", 'example': "Ex: REQ0000001", "type": "text", }
                response_data["inputs"].append(inp1)

                inp1 = {"name": "deprovision_reason", "send": "yes", "format": "default1",
                        "desc": "De-Provision Reason",
                        "length": "full", "trigger": ["other_deprovision_reason"], "condition": "others",
                        "default1": "", "type": "dropdown", "hide": "hide",
                        'options': [{"value": "server_removed", "label": "Server Removed"},
                                    {"value": "server_migrated", "label": "Server Migrated", },
                                    {"value": "port_removed", "label": "Port Removed"},
                                    {"value": "port_migrated", "label": "Port Migrated", },
                                    {"value": "others", "label": "Other", }]}

                response_data["inputs"].append(inp1)

                inp1 = {"name": "other_deprovision_reason", "send": "", "format": "default1", "desc": "Other Reason",
                        "length": "full", "hide": "hide",
                        "default1": "", "type": "text", }
                response_data["inputs"].append(inp1)

                inp1 = {"name": "rack_row_number", "send": "yes", "format": "default1", "desc": "Rack Row Number",
                        "length": "full",
                        "default1": "", "type": "dropdown",
                        "options": [{"value": "01", 'send': 'yes', "label": "R-01 "},
                                    {"value": "02", 'send': 'yes', "label": "R-02", },
                                    {"value": "03", 'send': 'yes', "label": "R-03"},
                                    {"value": "04", 'send': 'yes', "label": "R-04 "},
                                    {"value": "05", 'send': 'yes', "label": "R-05", },
                                    {"value": "06", 'send': 'yes', "label": "R-06"},
                                    {"value": "07", 'send': 'yes', "label": "R-07 "},
                                    {"value": "08", 'send': 'yes', "label": "R-08", },
                                    {"value": "09", 'send': 'yes', "label": "R-09"},
                                    {"value": "10", 'send': 'yes', "label": "R-10 "},
                                    {"value": "11", 'send': 'yes', "label": "R-11", },
                                    {"value": "12", 'send': 'yes', "label": "R-12"}
                                    ]}
                response_data["inputs"].append(inp1)

                rack_options = [{'value': u'R-01-01', 'send': 'yes', 'label': u'R-01-01'},
                                {'value': u'R-01-02', 'send': 'yes', 'label': u'R-01-02'},
                                {'value': u'R-01-03', 'send': 'yes', 'label': u'R-01-03'},
                                {'value': u'R-01-06', 'send': 'yes', 'label': u'R-01-06'},
                                {'value': u'R-01-07', 'send': 'yes', 'label': u'R-01-07'},
                                {'value': u'R-01-04', 'send': 'yes', 'label': u'R-01-04'},
                                {'value': u'R-01-05', 'send': 'yes', 'label': u'R-01-05'},
                                {'value': u'R-01-08', 'send': 'yes', 'label': u'R-01-08'},
                                {'value': u'R-01-09', 'send': 'yes', 'label': u'R-01-09'},
                                {'value': u'R-01-10', 'send': 'yes', 'label': u'R-01-10'},
                                {'value': u'R-01-11', 'send': 'yes', 'label': u'R-01-11'},
                                {'value': u'R-01-12', 'send': 'yes', 'label': u'R-01-12'}, ]
                inp1 = {"name": "rack_number", "send": "yes", "format": "default1", "desc": "Rack Number",
                        "length": "full",
                        "default1": "", "type": "dropdown", "options": rack_options}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "leaf_id", "send": "yes", "format": "default1", "desc": "Leaf Switches",
                        "length": "full",
                        "type": "dropdown-checkbox", 'options': leaf_options}
                response_data["inputs"].append(inp1)
                # for each in db_ports_list:
                #     dict1 = {}
                #     dict1["label"] = each
                #     dict1["value"] = each
                #     dict1["selected"] = "yes"
                #     port_options.append(dict1)
                # print db_ports_list, port_options
                # inp1 = {"name": "physical_port1", "send": "yes", "format": "default1", "desc": "Leaf Physical Port",
                #         "length": "full",
                #         "default1": "", "type": "dropdown-checkbox", 'options': ""}
                # response_data["inputs"].append(inp1)
                server_options = [{'value': u'S-01-01-01', 'send': 'yes', 'label': u'S-01-01-01'},
                                  {'value': u'S-01-01-02', 'send': 'yes', 'label': u'S-01-01-02'},
                                  {'value': u'S-01-01-03', 'send': 'yes', 'label': u'S-01-01-03'},
                                  {'value': u'S-01-01-04', 'send': 'yes', 'label': u'S-01-01-04'},
                                  {'value': u'S-01-01-05', 'send': 'yes', 'label': u'S-01-01-05'},
                                  {'value': u'S-01-01-06', 'send': 'yes', 'label': u'S-01-01-06'},
                                  {'value': u'S-01-01-07', 'send': 'yes', 'label': u'S-01-01-07'},
                                  {'value': u'S-01-01-08', 'send': 'yes', 'label': u'S-01-01-08'},
                                  {'value': u'S-01-01-09', 'send': 'yes', 'label': u'S-01-01-09'},
                                  {'value': u'S-01-01-10', 'send': 'yes', 'label': u'S-01-01-10'},
                                  {'value': u'S-01-01-11', 'send': 'yes', 'label': u'S-01-01-11'},
                                  {'value': u'S-01-01-12', 'send': 'yes', 'label': u'S-01-01-12'}, ]
                inp1 = {"name": "server_name", "send": "", "format": "default1", "desc": "Server Name (Optional)",
                        "length": "full",
                        "default1": "", "type": "dropdown", "options": server_options}
                response_data["inputs"].append(inp1)

                # inp1 = {"name": "admin_interface_status", "send": "yes", "format": "default1", "desc": "Admin Status",
                #         "length": "full",
                #         "default1": "shutdown", "type": "radio", 'options': [{"value": "shutdown", "label": "Shutdown"},
                #                                                              {"value": "no_shutdown",
                #                                                               "label": "No Shutdown",}]}
                # response_data["inputs"].append(inp1)

                # inp1 = {"name": "deprovision_server", "send": "yes", "format": "default1",
                #         "desc": "Deprovision Server Name",
                #         "length": "full",
                #         "default1": "", "type": "dropdown", 'options': ""}
                # response_data["inputs"].append(inp1)
                #         [[[[ < admin_interface_status >: ==:shutdown]]]]
                #         no
                #         shutdown
                #     [[[[end]]]]
                #
                #     [[[[ < admin_interface_status >: ==:no_shutdown]]]]
                #     shutdown
                # [[[[end]]]]
                request.session['input_response_data'] = response_data
                return HttpResponse(json.dumps(response_data), content_type="application/json")


            elif request.GET.get('config_action') == 'deprovision':

                user_sel = get_user_selection(request.GET.get("template"))

                output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],

                                                       user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])

                response_data = {'column': '12', u'newline': u'yes'}
                response_data["inputs"] = []
                response_data["opflag"] = 1
                # db_leaf_list = []
                # db_ports_list = []
                work_order_list = []
                query = ACIInterfaceStatusDB.objects.filter(status="deprovision_reservation").values(
                    'work_order_no').all()
                print " Above work order q"
                if query:
                    print query
                    for dct in query:
                        if dct["work_order_no"] not in work_order_list:
                            work_order_list.append(dct["work_order_no"])
                wo_options = []
                for each in work_order_list:
                    dict1 = {"send": "yes", "hide": "hide"}
                    dict1["label"] = each
                    dict1["value"] = each
                    wo_options.append(dict1)
                inp1 = {"name": "work_order_no", "send": "yes", "format": "default1", "desc": "Work Order Number",
                        "length": "full", "example": "",
                        "default1": "", "type": "dropdown", 'options': wo_options}
                response_data["inputs"].append(inp1)

                # inp1 = {"name": "tenant_name", "send": "yes", "format": "default1", "desc": "Tenant Name",
                #         "length": "full",
                #         "default1": "", "type": "dropdown", "options": [{"value": "WDC_Main", "label": "WDC_Main"},
                #                                                         {"value": "Prod", "label": "Prod"},
                #                                                         {"value": "MSP", "label": "MSP",}]}
                # response_data["inputs"].append(inp1)

                # inp1 = {"name": "port_media_type", "send": "yes", "format": "default1", "desc": "Port Type","length":"full",
                #         "default1": "fibre", "type": "radio", 'options': [{"value": "fibre", "label": "Fibre"},
                #                                                              {"value": "coper","label": "Coper", }]}
                # response_data["inputs"].append(inp1)
                db_leaf_list = []
                db_ports_list = []
                try:
                    query2 = ACIInterfaceStatusDB.objects.filter(status__in=["deprovision_reservation"],
                                                                 work_order_no=work_order_list[0]).values('leaf_id',
                                                                                                          'physical_port').all()
                except:
                    return render(request, 'notification.html',
                                  {'output_list': "No leaf and ports reserved for provision", "count": "1",
                                   'class': 'alert-danger'})

                if query2:
                    print query2
                    for dct in query2:
                        if dct["leaf_id"] not in db_leaf_list:
                            db_leaf_list.append(dct["leaf_id"])
                        if dct["physical_port"] not in db_ports_list:
                            db_ports_list.append(dct["physical_port"])

                # for cst in db_leaf_list:
                #     for opt in leaf_options:
                #         if opt.get("value") == cst:
                #             opt["selected"] = "yes"
                inp1 = {"name": "leaf_id", "send": "yes", "format": "default1", "desc": "Leaf Names", "length": "full",
                        "default1": db_leaf_list[0], "type": "radio", 'options': leaf_options}
                response_data["inputs"].append(inp1)
                count = 1
                db_leaf_list = [db_leaf_list[0]]
                for cst in db_leaf_list:
                    port_options = []
                    for each in db_ports_list:
                        dict1 = {}
                        dict1["label"] = each.title()
                        dict1["value"] = each
                        port_options.append(dict1)
                    print db_ports_list, port_options
                    inp1 = {"name": "physical_port" + str(count), "send": "yes", "length": "full",
                            "desc": "Leaf " + cst + " Physical Port", "type": "dropdown-checkbox",
                            'options': port_options}
                    count += 1
                    response_data["inputs"].append(inp1)

                inp1 = {"name": "port_mode", "send": "yes", "format": "default1", "desc": "Port Mode",
                        "length": "full",
                        "default1": "access", "type": "hidden",
                        'options': [{"value": "access", "label": "Access", 'hide': 'hide', 'send': 'yes'},
                                    {"value": "trunk", "label": "Trunk", 'hide': 'hide', 'send': 'yes'}]}
                response_data["inputs"].append(inp1)
                # inp1 = {"name": "physical_port1", "send": "yes", "format": "default1", "desc": "Leaf Physical Port","length":"full",
                #         "default1": "", "type": "dropdown-checkbox", 'options': port_options }
                # response_data["inputs"].append(inp1)

                # inp1 = {"name": "vlan_id", "send": "yes", "format": "default1", "desc": "VLAN Number.",
                #         "length": "full",
                #         "default1": "", "type": "dropdown",
                #         'options': [{"value": "30", "label": "30 [EPG: EPG30, BD: BD30]"},
                #                     {"value": "40", "label": "40 [EPG: EPG40, BD: BD40]"},
                #                     {"value": "101", "label": "101 [EPG: Prod-EPG-1, BD: Prod-BD-1]"},
                #                     {"value": "102", "label": "102 [EPG: Prod-EPG-2, BD: Prod-BD-2]"}]}
                # response_data["inputs"].append(inp1)

                inp1 = {"name": "nx_speed", "send": "yes", "format": "default1", "desc": "Physical Port Speed",
                        "length": "full",
                        "default1": "auto", "type": "hidden",
                        'options': [{"value": "auto", "label": "Auto"}, {"value": "10G", "label": "10G"},
                                    {"value": "1G", "label": "1G"}]}
                response_data["inputs"].append(inp1)

                # inp1 = {"name": "discovery_protocol", "send": "", "format": "default1", "desc": "Discovery Protocol",
                #         "length": "full", "default1": "LLPD", "type": "radio",
                #         'options': [{"value": "LLPD", "label": "LLPD"}, {"value": "None", "label": "None"},
                #                     {"value": "CPD", "label": "CPD"}]}
                #
                # response_data["inputs"].append(inp1)

                inp1 = {"name": "admin_interface_status", "send": "yes", "format": "default1", "desc": "Admin Status",
                        "length": "full",
                        "default1": "shutdown", "type": "radio", 'options': [{"value": "shutdown", "label": "Shutdown"},
                                                                             {"value": "no shutdown",
                                                                              "label": "No Shutdown", }]}
                response_data["inputs"].append(inp1)

                request.session['input_response_data'] = response_data
                return HttpResponse(json.dumps(response_data), content_type="application/json")

            elif request.GET.get('config_action') == 'leaf_port_status':

                user_sel = get_user_selection(request.GET.get("template"))
                output = CombinationsSubmittedTemplate(request, user_sel['user_ios'],
                                                       user_sel['user_plat'], user_sel['user_tech'],
                                                       user_sel['tmplt_name'],
                                                       user_sel['tag'])

                response_data = {'column': '12', 'newline': 'yes'}
                response_data["inputs"] = []
                response_data["opflag"] = 1

                inp1 = {"name": "rack_row_number", "send": "yes", "format": "default1", "desc": "Row Number",
                        "length": "full",
                        "default1": "", "type": "dropdown",
                        "options": [{"value": "01", 'send': 'yes', "label": "R-01 "},
                                    {"value": "02", 'send': 'yes', "label": "R-02", },
                                    {"value": "03", 'send': 'yes', "label": "R-03"},
                                    {"value": "04", 'send': 'yes', "label": "R-04 "},
                                    {"value": "05", 'send': 'yes', "label": "R-05", },
                                    {"value": "06", 'send': 'yes', "label": "R-06"},
                                    {"value": "07", 'send': 'yes', "label": "R-07 "},
                                    {"value": "08", 'send': 'yes', "label": "R-08", },
                                    {"value": "09", 'send': 'yes', "label": "R-09"},
                                    {"value": "10", 'send': 'yes', "label": "R-10 "},
                                    {"value": "11", 'send': 'yes', "label": "R-11", },
                                    {"value": "12", 'send': 'yes', "label": "R-12"}
                                    ]}

                response_data["inputs"].append(inp1)
                rack_options = [{'value': u'R-01-01', 'send': 'yes', 'label': u'R-01-01'},
                                {'value': u'R-01-02', 'send': 'yes', 'label': u'R-01-02'},
                                {'value': u'R-01-03', 'send': 'yes', 'label': u'R-01-03'},
                                {'value': u'R-01-06', 'send': 'yes', 'label': u'R-01-06'},
                                {'value': u'R-01-07', 'send': 'yes', 'label': u'R-01-07'},
                                {'value': u'R-01-04', 'send': 'yes', 'label': u'R-01-04'},
                                {'value': u'R-01-05', 'send': 'yes', 'label': u'R-01-05'},
                                {'value': u'R-01-08', 'send': 'yes', 'label': u'R-01-08'},
                                {'value': u'R-01-09', 'send': 'yes', 'label': u'R-01-09'},
                                {'value': u'R-01-10', 'send': 'yes', 'label': u'R-01-10'},
                                {'value': u'R-01-11', 'send': 'yes', 'label': u'R-01-11'},
                                {'value': u'R-01-12', 'send': 'yes', 'label': u'R-01-12'}, ]
                inp1 = {"name": "rack_number", "send": "yes", "format": "default1", "desc": "Rack Number",
                        "length": "full",
                        "default1": "", "type": "dropdown", "options": rack_options}
                response_data["inputs"].append(inp1)
                inp1 = {"name": "leaf_id", "send": "", "format": "default1", "desc": "Leaf Name",
                        "length": "full",
                        "default1": "", "type": "dropdown", "options": leaf_options}
                response_data["inputs"].append(inp1)

                request.session['input_response_data'] = response_data
                return HttpResponse(json.dumps(response_data), content_type="application/json")
        elif request.GET.get("template") and request.GET.get("template") == "1261":
            user_sel = get_user_selection(request.GET.get("template"))
            print "--------------", user_sel

            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            request.session['sel_para'] = {'ios': user_sel['user_ios'], 'plat': user_sel['user_plat'],
                                           'tech': user_sel['user_tech'],
                                           'type': user_sel['tmplt_name'], 'customer': customer}
            inputs_dict = {}
            # for el in request.GET:
            #     if request.GET.get(el):
            #         response_data[el] = request.GET.get(el)
            #
            new_platform = request.GET.get('new_platform')
            upstram_ios = request.GET.get('upstream_ios')
            no_of_devices = request.GET.get('no_of_device')
            routing = request.GET.get('routing')
            distro_sw_port = request.GET.get('distro_sw_port')
            sw1_skip_int = request.GET.get('sw01_skip_interface')
            sw2_skip_int = request.GET.get('sw02_skip_interface')

            input_dict = {"new_platform": new_platform, "upstream_ios": upstram_ios, "no_of_device": no_of_devices,
                          "routing": routing, "distro_sw_port": distro_sw_port, "sw01_skip_interface": sw1_skip_int,
                          "sw02_skip_interface": sw2_skip_int}
            uploadtype = "port_migration"
            # print request.session["action_selected"]
            # config_action = request.session.get('config_action')
            return render(request, 'new_file_dropzone.html',
                          {'type': uploadtype, 'input_values': json.dumps(input_dict),
                           'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer})
        elif request.GET.get("template") and request.GET.get("template") == "1262":
            user_sel = get_user_selection(request.GET.get("template"))
            print user_sel
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
            request.session['sel_para'] = {'ios': user_sel['user_ios'], 'plat': user_sel['user_plat'],
                                           'tech': user_sel['user_tech'],
                                           'type': user_sel['tmplt_name'], 'customer': customer}
            response_data = {}
            hrd_refresh = request.GET.get("hardware_refresh")
            for el in request.GET:
                if request.GET.get(el):
                    response_data[el] = request.GET.get(el)
            request.session['action_selected'] = response_data
            uploadtype = ""
            config_action = request.session.get('config_action')
            return render(request, 'aci_new_dropzone.html',
                          {'type': uploadtype, 'taskid': taskid, 'subtaskid': subtaskid, 'customer': customer,
                           'config_action': config_action})

        if request.GET.has_key('sship'):
            request.session['sship'] = request.GET.get('sship')
        if type == "1":
            print " in database Entry "
            entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=taskid, subtaskid=subtaskid).last()
            if entry:
                print  "in update entry "
                q1 = ServiceRequestDB.objects.filter(taskid=taskid, subtaskid=subtaskid).update(
                    customer=request.GET.get('customer'), reponsedictionary=json.dumps(input_dict))
            else:
                print  "in insert entry  service "
                # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                q1 = ServiceRequestDB(taskid=taskid, subtaskid=subtaskid, customer=request.GET.get('customer'),
                                      reponsedictionary=json.dumps(input_dict))
                q1.save()
            if if_template == "yes":
                print "Template i s --->>" + request.GET.get('template')
                if "-" in request.GET.get('template'):
                    x = request.GET.get('template').split("-")
                    template_id = x[0]
                    plat_index = int(x[1])
                else:
                    template_id = request.GET.get('template')
                type1 = template_db.objects.values_list("type", "template").filter(id=template_id).last()
                # below code for new type 6 options
                if type1 and type1[0] == "6":
                    # op = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                    # user_sel['user_tech'], user_sel['tmplt_name'], user_sel['tag'])
                    output = {}
                    output["opflag"] = 1
                    output["inputs"] = []
                    type2 = template_db.objects.values_list("prefunctions", "postfunctions").filter(
                        id=template_id).last()
                    prefunc = type2[0]
                    if prefunc and "," in prefunc:
                        # multiple functions
                        print "to be continued"
                    elif prefunc:
                        import prepostinputs
                        varstring = prefunc
                        function = getattr(prepostinputs, varstring)
                        inputs = function()
                        output["inputs"] += inputs
                        return HttpResponse(json.dumps(output), content_type="application/json")
                # code for new type 6 options ends
                if type1 and type1[0] == "3":
                    # ACI tenant config
                    if type1[1] == "29":
                        from mysite.fabric_input import *
                        file_name = '/home/ubuntu/prepro/mysite/mysite/data/Fabric_json_data/tenant.json'
                        with open(file_name, 'r') as f:
                            tenant_data = json.load(f)
                        request_data = {}
                        request.session['tenant_data'] = tenant_data
                        request_data["optionselected"] = "29"

                        input_data = Provisioning_InputData(request_data, tenant_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        # response_data = [{"type":"text","name":"email","desc":"Enter email","default1":"abc@gmail.com"},{"type":"text","name":"phone","desc":"Enter phone","default1":"4085555555"},{"type":"radio","name":"name","default1":"yes","desc":"Select yes/no","options":[{"label":"yes","value":"yes"},{"label":"no","value":"no"}]}]
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type1[1] == "38":
                        from mysite.fabric_input import *
                        file_name = '/home/ubuntu/prepro/mysite/mysite/data/Fabric_json_data/tenant.json'
                        with open(file_name, 'r') as f:
                            tenant_data = json.load(f)
                        request_data = request.GET
                        request_data = {}
                        request_data["optionselected"] = "38"
                        request.session['tenant_data'] = tenant_data
                        input_data = Provisioning_InputData_2(request_data, tenant_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type1[1] == "31":
                        response_data = {"column": "12", "newline": "no", "inputs": [
                            {"type": "radio", "name": "upload_type", "default1": "update", "desc": "Upload Type",
                             "options": [{"label": "Update", "value": "update"}, {"label": "Merge", "value": "merge"},
                                         {"label": "Overwrite", "value": "overwrite"}]},
                            {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                             "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                             "rhide": "hide", "default1": "step1"},
                            {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": "31"},
                            {"newline": "yes", "type": "hidden", "name": "changeid", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get('c5')},
                            {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "", "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get("sship")},
                            {"newline": "yes", "type": "hidden", "name": "actionaci", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide",
                             "default1": "cmplt_config_apply"}]
                                         }
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type1[1] == "33":
                        # from mysite.fabric_input import *
                        request_data = request.GET
                        request_data = {}
                        request_data["optionselected"] = "33"
                        # old_response_data = request.GET
                        input_data = Provisioning_BDInputData(request_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type1[1] == "36":
                        response_data = {"column": "12", "newline": "no", "inputs": [
                            {"newline": "yes", "type": "text", "name": "leaf[]", "desc": "Leaf ID", "example": "Ex:101",
                             "pattern": "",
                             "csend": "no", "mandatory": "yes", "extraclass": "color-blue", "hide": "hide",
                             "rhide": "hide", "default1": ""},
                            {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                             "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                             "rhide": "hide", "default1": "step1"},
                            {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": type[1]},
                            {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "", "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get("sship")}
                        ]
                                         }
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type1[1] == "40":
                        print "I am here ------123 go below"
                        from mysite.fabric_input import *
                        request_data = {}
                        request_data["optionselected"] = "40"
                        input_data = ProvisionTenant(request_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type1[1] == "41":
                        from mysite.fabric_input import *
                        from mysite.models import CronDB
                        request_data = {}
                        request_data["optionselected"] = "41"
                        request_data = request.GET
                        input_data = ProvisionEPG(request_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type1[1] == "46":
                        print "i m in Activate Configuration "
                        from mysite.models import CronDB

                        import json
                        changeid = request.GET.get('taskid')
                        ip = request.GET.get('ip')
                        entry = CronDB.objects.values_list('activate_commands').filter(changeid=changeid,
                                                                                       ip=ip).order_by(
                            'timestamp').last()
                        if entry:
                            print entry
                            activate_cmds = json.loads(entry[0])
                        else:
                            msg = "Data not found for ChangeID -" + changeid
                            return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
                        outputlist = {}
                        outputlist["Activate Configuration"] = activate_cmds
                        # insert_entry(request,"",rollback,4,2,1)
                        return render(request, 'new_aci_config_tabs.html',
                                      {'output_list': outputlist, 'action': "rollback_apply"})
                    elif type1[1] == "47":
                        # Exception here. Using input submitted functions
                        print "i am here>>>>"
                        print "i m in Acrivate configuration "
                        from mysite.models import TenantDB

                        import json
                        changeid = request.GET.get('taskid')
                        # ip = request.GET.get('ip')
                        activate_cmd = []
                        entry = TenantDB.objects.values_list('activate_cmd_list').filter(
                            pcnum__contains=changeid + '_').all()
                        if entry:
                            for each in entry:
                                print each
                                activate_cmd += json.loads(each[0])
                                activate_cmd += ["!<-- ------------------------------------ -->!"]
                        else:
                            msg = "No Entries found for ChangeID -" + changeid
                            return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})

                        outputlist = {}
                        outputlist["Activate Configuration"] = activate_cmd
                        # insert_entry(request,"",rollback,4,2,1)
                        return render(request, 'new_aci_config_tabs.html',
                                      {'output_list': outputlist, 'action': "cmplt_activate_apply"})
                        response_data = {"column": "12", "newline": "no", "inputs": [
                            {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                             "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                             "rhide": "hide", "default1": "step1"},
                            {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": "47"},
                            {"newline": "yes", "type": "heading", "name": "sampletext",
                             "label": "Please click submit to proceed", "example": "", "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": "Please click submit to proceed"},
                            {"newline": "yes", "type": "hidden", "name": "changeid", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get('taskid')},
                            {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "", "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get("sship")}
                        ]
                                         }
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    else:
                        user_sel = get_user_selection(template_id)
                        output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                               user_sel['user_tech'], user_sel['tmplt_name'],
                                                               user_sel['tag'])
                        output["opflag"] = 1
                        return HttpResponse(json.dumps(output), content_type="application/json")
                user_sel = get_user_selection(template_id)
                print "Combination OP"
                # print user_sel
                if request.GET.has_key('ext[]'):
                    output = {'column': '12', 'inputs': [], 'newline': 'yes'}
                    total_input = []
                    inp1 = {"name": "ext_list", "mandatory": "yes", "send": "yes", "format": "default1",
                            "desc": "Extention List",
                            "default1": request.GET.getlist('ext[]'), "type": "hidden"}
                    total_input.append(inp1)
                    for ext in request.GET.getlist('ext[]'):
                        request.session["extension"] = {"ext_name": ext}
                        single_op = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                                  user_sel['user_tech'], user_sel['tmplt_name'],
                                                                  user_sel['tag'])
                        for inpt in single_op.get("inputs"):
                            if inpt in total_input:
                                continue
                            else:
                                total_input += single_op.get('inputs')

                    output["inputs"] = total_input
                else:
                    output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                           user_sel['user_tech'], user_sel['tmplt_name'],
                                                           user_sel['tag'])

                # if user_sel['tmplt_name'] == "ACI Leaf Provisioning using Profile":
                # request.session["validate_flag"] = True
                # options = [{"label": "Access", "value":"access","trigger": ["access_ports","access_vlan"], "hide":"hide", "checked":"checked"},{"label": "Trunk", "value":"trunk","trigger": ["trunk_ports"], "hide":"hide", "checked":"checked"},{"label": "VPC", "value":"vpc","trigger": ["vpc_ports","vpc_vlan"],"hide":"hide", "checked":"checked"},{"label": "FEX", "value":"fex","trigger": ["fex_ports","fex_num"],  "hide":"hide", "checked":"checked"},{"label": "Storage", "value":"storage"}]
                # input = {"name": "porttype", "format": "", "default1": "", "output": "", "type": "checkbox", "example": "", "desc": "Port Type","mandatory":"no","hide":"hide","send":"yes", "options":options,"default1":""}
                # output["inputs"].insert(1,input)
                output["opflag"] = 1
                return HttpResponse(json.dumps(output), content_type="application/json")
        # elif if_template == "no":
        #     output = user_input_gen(request)
        #     output["opflag"] = 1
        #     return HttpResponse(output)
        if type == "3":
            print " I ma here"

            request.session['id_flag'] = True
            dept = getuserdept(request)
            # Below function for provision department users
            if str(dept) == "provision":
                """
                device : 10.240.131.37
                neteng/5HTR@n$f0rm
                interface : GigabitEthernet1/0/25
                tso : L067-02-08-26, 10/25

                """
                passed = 0
                failed = 0
                if request.GET.has_key("tsoid"):
                    config_flag = True
                    if re.search(r'^\S+\-\d+\-\d+\-\d+$', request.GET.get("tsoid")):

                        op_dict = {}
                        entry = StationDb.objects.values_list('stationid', 'switch', 'blade', 'portno',
                                                              'overwrite_flag', 'userid').filter(
                            stationid=request.GET.get("tsoid")).last()
                        if not entry:
                            output = "TSO: " + str(request.GET.get("tsoid")) + " Does not Exist "
                            return render(request, 'notification.html',
                                          {'output_list': output, 'class': 'alert-danger'})
                        else:
                            var_dict = {}
                            var_dict["tso_id"] = entry[0]
                            var_dict["hostname"] = entry[1]
                            if str(var_dict["hostname"]) == "NA":
                                output = "Switch Not Assigned to TSO : " + var_dict["tso_id"]
                                return render(request, 'notification.html',
                                              {'output_list': output, "count": "1", 'class': 'alert-danger'})
                            else:
                                with open("/home/ubuntu/prepro/mysite/mysite/patching data/Switch.json", "r") as data:
                                    sw_data = json.load(data)
                                    var_dict["host_ip"] = sw_data.get(var_dict["hostname"]).get('loopback')
                            var_dict["device_type"] = device_type = request.GET.get("devicetype")
                            if request.GET.has_key("description"):
                                var_dict["description"] = request.GET.get("description")
                            else:
                                var_dict["description"] = ""
                            print device_type
                            with open("/home/ubuntu/prepro/mysite/mysite/patching data/tso_vlan.json",
                                      "r") as vlan_data:
                                device_data = json.load(vlan_data)
                                var_dict["vrf"] = device_data.get(device_type).get('vrf')
                                var_dict["vlan"] = device_data.get(device_type).get('vlanid')
                            var_dict["interface"] = "g" + entry[2] + "/0/" + entry[3]
                            tso_login = ProvisionTSO(var_dict["tso_id"], var_dict["host_ip"])
                            status = tso_login.get_login_status()
                            print status
                            if not status["flag"]:
                                print "In Ststus Fail "
                                op_dict[var_dict["tso_id"]] = {'validation_flag': "NA",
                                                               'config_status': status["msg"],
                                                               'validation_detail': ["NA"],
                                                               "precheck_detail": ["NA"],
                                                               'precheck_flag': "skip",
                                                               "switch": var_dict["hostname"]}
                                return render(request, 'patching_output.html',
                                              {'output_dict': op_dict, "passed": passed, "failed": failed})
                            else:
                                if request.GET.get("overwite") == "no":
                                    if entry[4] == "1":
                                        output = "TSO: " + str(request.GET.get("tsoid")) + " is already reserved by " + \
                                                 entry[5] + " Team"
                                        failed += 1
                                        return render(request, 'notification.html',
                                                      {'output_list': output, 'class': 'alert-danger'})
                                    else:
                                        precheck = tso_login.tso_precheck_fun(var_dict["host_ip"],
                                                                              var_dict["interface"])
                                        print precheck
                                        if not precheck["flag"]:
                                            pre_output = "TSO: " + str(request.GET.get("tsoid")) + " " + precheck["msg"]
                                else:
                                    precheck = tso_login.tso_precheck_fun(var_dict["host_ip"], var_dict["interface"])
                                    if not precheck["flag"]:
                                        pre_output = "TSO : " + str(request.GET.get("tsoid")) + " " + precheck["msg"]
                                if config_flag:
                                    file = "/home/ubuntu/prepro/mysite/mysite/user_templates/tso_templates/" + var_dict[
                                        "vlan"] + "_template.txt"
                                    infile = open(file, "r")
                                    filelines = [i.strip('\r\n') for i in infile.readlines()]
                                    command_list = change_var_tso_provision(filelines, var_dict)
                                    print command_list
                                    output = tso_login.tso_config_fun(command_list)
                                    request.session["tsoid"] = var_dict["tso_id"]
                                    request.session["ip"] = var_dict["host_ip"]
                                    if output["flag"]:
                                        passed += 1
                                        q = StationDb.objects.filter(stationid=var_dict["tso_id"]).update(
                                            vlan=var_dict["vlan"], overwrite_flag="1", userid=str(dept).upper())
                                    if request.GET.get("connectivity") == "yes" and request.GET.has_key("test_ip"):
                                        print " In Validation "
                                        post_op = tso_login.tso_postcheck_fun(var_dict, request.GET.get("test_ip"))
                                        validation_op = post_op['msg']
                                        validation_flag = post_op['flag']
                                    else:
                                        validation_op = ["NA"]
                                        validation_flag = "NA"
                                    config_op = output["msg"]
                                    # validation_op = ["Verified Link is UP", "Verified Connectivity to the device"]
                                    precheck_op = [precheck["msg"]]
                                    op_dict[var_dict["tso_id"]] = {'validation_flag': validation_flag,
                                                                   'config_status': config_op,
                                                                   'validation_detail': validation_op,
                                                                   "precheck_detail": precheck_op,
                                                                   'precheck_flag': precheck["flag"],
                                                                   "switch": var_dict["hostname"]}
                                    return render(request, 'patching_output.html',
                                                  {'output_dict': op_dict, "passed": passed, "failed": failed})
                                # config_op = "TSO : " + str(request.GET.get("tsoid")) + " successfully provisioned on " + var_dict["interface"]
                                # validation_op = ["Verified Link is UP", "Verified Connectivity to the device"]
                                # precheck_op = []
                                # op_dict[var_dict["tsoid_id"]] = {'validation_flag': True,
                                #                             'config_status': config_op,
                                #                             'validation_detail': validation_op, "precheck_detail":precheck_op,
                                #                             'precheck_flag': True, "switch": var_dict["hostname"]}
                                print op_dict
                                return render(request, 'patching_output.html',
                                              {'output_dict': op_dict, "passed": "1", "failed": "0"})
                    else:
                        output = "Invalid TSO-ID entered"
                        return render(request, 'notification.html',
                                      {'output_list': output, "count": "1", 'class': 'alert-danger'})

                elif request.GET.has_key("template") and request.GET.get('template') == "2":
                    if request.GET.has_key("test_ip"):
                        return render(request, 'patching_mat_dropzone.html',
                                      {'type': "csv", 'overwrite': request.GET.get("overwite"),
                                       'test_ip': request.GET.get("test_ip"),
                                       'connectivity': request.GET.get("connectivity"), 'customer': "provision",
                                       'config_action': "provision"})
                    else:
                        return render(request, 'patching_mat_dropzone.html',
                                      {'type': "csv", 'overwrite': request.GET.get("overwite"),
                                       'connectivity': request.GET.get("connectivity"), 'customer': "provision",
                                       'config_action': "provision"})
                elif request.GET.has_key("template") and request.GET.get('template') == "6":
                    print "In Bulk Upload New Entries"
                    idfno = request.GET.get('idfno')
                    overwrite = request.GET.get('overwrite')
                    return render(request, 'Upload_patching_dropzone.html',
                                  {'type': "csv", 'customer': "provision", 'config_action': "provision", 'idfno': idfno,
                                   'overwrite': overwrite})
                elif request.GET.has_key("template") and request.GET.get('template') == "7":
                    print "In Filter Entries"
                    filtername = request.GET.get('filtername')
                    value = request.GET.get('value').upper()
                    if filtername == "stationid":
                        value = convert_stationid(value)
                    kw = {filtername: value}
                    print kw
                    entry = StationDb.objects.filter(**kw).all()[:2000]
                    if entry:
                        return render(request, 'filters.html',
                                      {'entry': entry, 'class': 'alert-success', 'filtername': filtername,
                                       'value': value,
                                       'date': request.GET.get('datetime'), 'ftype': '1'})
                    else:
                        entry = "No entry found"
                        pres_output = 'Entry Added Successfully'
                        return render(request, 'notification.html', {'output_list': entry, 'class': 'alert-success'})
                # elif request.GET.has_key("template") and request.GET.get('template') == "9":
                #     mac_address =  request.GET.get('mac_address')
                #     device_type =  request.GET.get('device_type')
                #     floor = request.GET.get('floor')
                #     switch_lst = []
                #     with open("/home/ubuntu/prepro/mysite/mysite/patching data/Switch.json", "r") as switch_data:
                #         sw_data = json.load(switch_data)
                #     for key in sw_data.keys():
                #         sw_regex = re.search(r'STNNSH-(\d)', key)
                #         if sw_regex:
                #             if sw_regex.group(1) == floor:
                #                 switch_lst.append(key)
                #     for switches in sw_data:
                #         print switches
                #     switch_login = ProvisionTSO

                elif request.GET.has_key("template") and request.GET.get('template') == "8":
                    print "In Filter Entries"
                    idf = request.GET.get('idfno').upper()
                    filtername = 'type'
                    value = "WAP".upper()
                    kw = {filtername: value, "archidf": idf}

                    # Access Points
                    entry = StationDb.objects.filter(**kw).values('stationid')
                    if entry:
                        entry_list = []
                        for each in entry:
                            entry_list.append({"tso_id": each["stationid"], "device_type": "Access Points"})
                        output_dic = bulk_ts_provision_fun(entry_list, "no")
                        if output_dic["flag"]:
                            return render(request, 'notification.html',
                                          {'output_list': output_dic["op"], 'class': 'alert-danger'})
                        else:
                            return render(request, 'patching_output.html',
                                          {'output_dict': output_dic["op"], 'passed': output_dic["passed"],
                                           "failed": output_dic["failed"]})
                    else:
                        entry = "No TSO found with AP type"
                        return render(request, 'notification.html', {'output_list': entry, 'class': 'alert-danger'})
                elif request.GET.has_key("template") and request.GET.get('template') == "4":
                    print "In TSO Status"
                    tso_id = request.GET.get('tso_id')
                    data = get_tso_data(tso_id)
                    outputlist = {}
                    tso_info = []
                    for k, v in data.iteritems():
                        if k == "id":
                            continue
                        elif k == "userid":
                            tso_info.append(
                                "<strong>Reserved by : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>     " + str(
                                    v) + "</span>")
                            continue
                        tso_info.append(
                            "<strong>" + str(k).replace("_",
                                                        " ").title() + ": </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>" + str(
                                v) + "</span>")
                    outputlist["TSO Information"] = tso_info
                    return render(request, 'tabs_configuration.html', {'output_list': outputlist})
                elif request.GET.has_key("template") and request.GET.get('template') == "3":
                    device_type = request.GET.get('device_type')
                    vrf = request.GET.get('vrf')
                    vlanid = request.GET.get('vlanid')
                    with open('/home/ubuntu/prepro/mysite/mysite/patching_data/vlan.json') as vlan_json_data:
                        vlan_data = json.load(vlan_json_data)
                    if device_type not in vlan_data:
                        vlan_data[device_type] = {}
                        vlan_data[device_type]["vrf"] = vrf
                        vlan_data[device_type]["vlanid"] = vlanid
                        with open('/home/ubuntu/prepro/mysite/mysite/patching_data/vlan.json', 'w') as data:
                            json.dump(vlan_data, data)
                        output = "Device type '" + str(device_type) + "' with Vlan '" + vlanid + "' added successfully"
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Device Type '" + str(device_type) + "' already exist !"
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
            if if_template == "yes":
                print "Template i s >>" + request.GET.get('template')
                if "-" in request.GET.get('template'):
                    x = request.GET.get('template').split("-")
                    template_id = x[0]
                    plat_index = int(x[1])
                else:
                    template_id = request.GET.get('template')
                type = template_db.objects.values_list("type", "template").filter(id=template_id).last()
                if type and type[0] == "3":
                    # ACI tenant config
                    if type[1] == "29":
                        from mysite.fabric_input import *
                        file_name = '/home/ubuntu/prepro/mysite/mysite/data/Fabric_json_data/tenant.json'
                        with open(file_name, 'r') as f:
                            tenant_data = json.load(f)
                        request_data = {}
                        request.session['tenant_data'] = tenant_data
                        request_data["optionselected"] = "29"

                        input_data = Provisioning_InputData(request_data, tenant_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        # response_data = [{"type":"text","name":"email","desc":"Enter email","default1":"abc@gmail.com"},{"type":"text","name":"phone","desc":"Enter phone","default1":"4085555555"},{"type":"radio","name":"name","default1":"yes","desc":"Select yes/no","options":[{"label":"yes","value":"yes"},{"label":"no","value":"no"}]}]
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type[1] == "38":
                        from mysite.fabric_input import *
                        file_name = '/home/ubuntu/prepro/mysite/mysite/data/Fabric_json_data/tenant.json'
                        with open(file_name, 'r') as f:
                            tenant_data = json.load(f)
                        request_data = request.GET
                        request_data = {}
                        request_data["optionselected"] = "38"
                        request.session['tenant_data'] = tenant_data
                        input_data = Provisioning_InputData_2(request_data, tenant_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type[1] == "31":
                        response_data = {"column": "12", "newline": "no", "inputs": [
                            {"type": "radio", "name": "upload_type", "default1": "update", "desc": "Upload Type",
                             "options": [{"label": "Update", "value": "update"}, {"label": "Merge", "value": "merge"},
                                         {"label": "Overwrite", "value": "overwrite"}]},
                            {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                             "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                             "rhide": "hide", "default1": "step1"},
                            {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": "31"},
                            {"newline": "yes", "type": "hidden", "name": "changeid", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get('c5')},
                            {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "", "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get("sship")},
                            {"newline": "yes", "type": "hidden", "name": "actionaci", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide",
                             "default1": "cmplt_config_apply"}]
                                         }
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type[1] == "33":
                        from mysite.fabric_input import *
                        request_data = request.GET
                        request_data = {}
                        request_data["optionselected"] = "33"
                        # old_response_data = request.GET
                        input_data = Provisioning_BDInputData(request_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type[1] == "36":
                        response_data = {"column": "12", "newline": "no", "inputs": [
                            {"newline": "yes", "type": "text", "name": "leaf[]", "desc": "Leaf ID", "example": "Ex:101",
                             "pattern": "",
                             "csend": "no", "mandatory": "yes", "extraclass": "color-blue", "hide": "hide",
                             "rhide": "hide", "default1": ""},
                            {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                             "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                             "rhide": "hide", "default1": "step1"},
                            {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": type[1]},
                            {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "", "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get("sship")}
                        ]
                                         }
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type[1] == "40":
                        print "I am here ------123 go below"
                        from mysite.fabric_input import *
                        request_data = {}
                        request_data["optionselected"] = "40"
                        input_data = ProvisionTenant(request_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type[1] == "41":
                        from mysite.fabric_input import *
                        from mysite.models import CronDB
                        request_data = {}
                        request_data["optionselected"] = "41"
                        request_data = request.GET
                        input_data = ProvisionEPG(request_data)
                        response_data = input_data.get_response_data()
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    elif type[1] == "46":
                        print "i m in Activate Configuration "
                        from mysite.models import CronDB

                        import json
                        changeid = request.GET.get('taskid')
                        ip = request.GET.get('ip')
                        entry = CronDB.objects.values_list('activate_commands').filter(changeid=changeid,
                                                                                       ip=ip).order_by(
                            'timestamp').last()
                        if entry:
                            print entry
                            activate_cmds = json.loads(entry[0])
                        else:
                            msg = "Data not found for ChangeID -" + changeid
                            return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
                        outputlist = {}
                        outputlist["Activate Configuration"] = activate_cmds
                        # insert_entry(request,"",rollback,4,2,1)
                        return render(request, 'new_aci_config_tabs.html',
                                      {'output_list': outputlist, 'action': "rollback_apply"})
                    elif type[1] == "47":
                        # Exception here. Using input submitted functions
                        print "i am here>>>>"
                        print "i m in Acrivate configuration "
                        from mysite.models import TenantDB

                        import json
                        changeid = request.GET.get('taskid')
                        # ip = request.GET.get('ip')
                        activate_cmd = []
                        entry = TenantDB.objects.values_list('activate_cmd_list').filter(
                            pcnum__contains=changeid + '_').all()
                        if entry:
                            for each in entry:
                                print each
                                activate_cmd += json.loads(each[0])
                                activate_cmd += ["!<-- ------------------------------------ -->!"]
                        else:
                            msg = "No Entries found for ChangeID -" + changeid
                            return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})

                        outputlist = {}
                        outputlist["Activate Configuration"] = activate_cmd
                        # insert_entry(request,"",rollback,4,2,1)
                        return render(request, 'new_aci_config_tabs.html',
                                      {'output_list': outputlist, 'action': "cmplt_activate_apply"})
                        response_data = {"column": "12", "newline": "no", "inputs": [
                            {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                             "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                             "rhide": "hide", "default1": "step1"},
                            {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": "47"},
                            {"newline": "yes", "type": "heading", "name": "sampletext",
                             "label": "Please click submit to proceed", "example": "", "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": "Please click submit to proceed"},
                            {"newline": "yes", "type": "hidden", "name": "changeid", "desc": "", "example": "",
                             "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get('taskid')},
                            {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "", "pattern": "",
                             "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                             "default1": request.GET.get("sship")}
                        ]
                                         }
                        response_data["opflag"] = 1
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    else:
                        user_sel = get_user_selection(template_id)
                        output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                               user_sel['user_tech'], user_sel['tmplt_name'])
                        output["opflag"] = 1
                        return HttpResponse(json.dumps(output), content_type="application/json")
                user_sel = get_user_selection(template_id)
                print "user_sel"
                print user_sel
                output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                       user_sel['user_tech'], user_sel['tmplt_name'])
                output["opflag"] = 1
                return HttpResponse(json.dumps(output), content_type="application/json")
        elif if_template == "no":
            output = user_input_gen(request)
            output["opflag"] = 1
            return HttpResponse(output)
    # Clone Request,Modify Request

    if type == "2" or type == "4":
        # function for phase2
        if type == "2":
            new_taskid = request.GET.get('taskid_new')
            current_user = request.user
            e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
            if e1:
                output = "Service Request " + str(new_taskid) + " Already Exist "
                return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
            else:
                entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                    taskid=taskid).last()
                if entry:
                    print "Existing id "
                    x_subtaskid = entry[0]
                    x_costomer = entry[1]
                    x_respdict = json.loads(entry[2])
                    if x_respdict['template_name'] == 'no':
                        entry2 = UserSelectionDb.objects.values_list('c1_value', 'c2_value', 'c3_value',
                                                                     'c4_value').filter(taskid=taskid,
                                                                                        subtaskid=x_subtaskid).last()
                        if entry2:
                            print "In selection DB Update"
                            e2 = UserSelectionDb(user=current_user.id, c1_value=entry2[0], c2_value=entry2[1],
                                                 c3_value=entry2[2], c4_value=entry2[2], taskid=new_taskid,
                                                 subtaskid=x_subtaskid)
                            e2.save()
                        entry3 = CronDB.objects.values_list("customer", "command_list", "rollback_list", "ip", ).filter(
                            taskid=taskid, subtaskid=x_subtaskid).last()
                        if entry3:
                            print "In Cron DB Update"
                            e3 = CronDB(customer=x_costomer, command_list=entry3[1], rollback_list=entry3[2],
                                        ip=entry3[3], status=4, result=1, taskid=new_taskid, subtaskid=x_subtaskid)
                            e3.save()
                    else:
                        entry3 = CronDB.objects.values_list("customer", "command_list", "rollback_list", "ip", ).filter(
                            taskid=taskid, subtaskid=x_subtaskid).last()
                        if entry3:
                            print "In Cron DB Update"
                            e3 = CronDB(customer=x_costomer, command_list=entry3[1], rollback_list=entry3[2],
                                        ip=entry3[3], status=4, result=1, taskid=new_taskid, subtaskid=x_subtaskid)
                            e3.save()
                    q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                          reponsedictionary=json.dumps(x_respdict))
                    q1.save()

                    output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                else:
                    output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
        if type == "4":
            entry1 = ServiceRequestDB.objects.values_list("reponsedictionary").filter(taskid=taskid,
                                                                                      subtaskid=subtaskid).last()
            if entry1:
                dictn = json.loads(entry1[0])
                print dictn
                if dictn.has_key("template_name") and dictn["template_name"] == "yes":

                    templateid = dictn["template"]
                    if "-" in templateid:
                        x = templateid
                        template_id = x[0]
                        plat_index = int(x[1])
                    else:
                        template_id = templateid
                        type = template_db.objects.values_list("type", "template").filter(id=template_id).last()
                        if type and type[0] == "3":
                            # ACI tenant config
                            if type[1] == "29":
                                from mysite.fabric_input import *
                                file_name = '/home/ubuntu/prepro/mysite/mysite/data/Fabric_json_data/tenant.json'
                                with open(file_name, 'r') as f:
                                    tenant_data = json.load(f)
                                request_data = {}
                                request.session['tenant_data'] = tenant_data
                                request_data["optionselected"] = "29"

                                input_data = Provisioning_InputData(request_data, tenant_data)
                                response_data = input_data.get_response_data()
                                response_data["opflag"] = 1
                                # response_data = [{"type":"text","name":"email","desc":"Enter email","default1":"abc@gmail.com"},{"type":"text","name":"phone","desc":"Enter phone","default1":"4085555555"},{"type":"radio","name":"name","default1":"yes","desc":"Select yes/no","options":[{"label":"yes","value":"yes"},{"label":"no","value":"no"}]}]
                                return HttpResponse(json.dumps(response_data), content_type="application/json")
                            elif type[1] == "38":
                                from mysite.fabric_input import *
                                file_name = '/home/ubuntu/prepro/mysite/mysite/data/Fabric_json_data/tenant.json'
                                with open(file_name, 'r') as f:
                                    tenant_data = json.load(f)
                                request_data = request.GET
                                request_data = {}
                                request_data["optionselected"] = "38"
                                request.session['tenant_data'] = tenant_data
                                input_data = Provisioning_InputData_2(request_data, tenant_data)
                                response_data = input_data.get_response_data()
                                response_data["opflag"] = 1
                                return HttpResponse(json.dumps(response_data), content_type="application/json")
                            elif type[1] == "31":
                                response_data = {"column": "12", "newline": "no", "inputs": [
                                    {"type": "radio", "name": "upload_type", "default1": "update",
                                     "desc": "Upload Type", "options": [{"label": "Update", "value": "update"},
                                                                        {"label": "Merge", "value": "merge"},
                                                                        {"label": "Overwrite", "value": "overwrite"}]},
                                    {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                                     "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                                     "rhide": "hide", "default1": "step1"},
                                    {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "",
                                     "example": "", "pattern": "",
                                     "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                     "default1": "31"},
                                    {"newline": "yes", "type": "hidden", "name": "changeid", "desc": "", "example": "",
                                     "pattern": "",
                                     "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                     "default1": request.GET.get('c5')},
                                    {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "",
                                     "pattern": "",
                                     "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                     "default1": request.GET.get("sship")},
                                    {"newline": "yes", "type": "hidden", "name": "actionaci", "desc": "", "example": "",
                                     "pattern": "",
                                     "csend": "yes", "extraclass": "color-blue", "hide": "hide",
                                     "default1": "cmplt_config_apply"}]
                                                 }
                                response_data["opflag"] = 1
                                return HttpResponse(json.dumps(response_data), content_type="application/json")
                            elif type[1] == "33":
                                from mysite.fabric_input import *
                                request_data = request.GET
                                request_data = {}
                                request_data["optionselected"] = "33"
                                # old_response_data = request.GET
                                input_data = Provisioning_BDInputData(request_data)
                                response_data = input_data.get_response_data()
                                response_data["opflag"] = 1
                                return HttpResponse(json.dumps(response_data), content_type="application/json")
                            elif type[1] == "36":
                                response_data = {"column": "12", "newline": "no", "inputs": [
                                    {"newline": "yes", "type": "text", "name": "leaf[]", "desc": "Leaf ID",
                                     "example": "Ex:101", "pattern": "",
                                     "csend": "no", "mandatory": "yes", "extraclass": "color-blue", "hide": "hide",
                                     "rhide": "hide", "default1": ""},
                                    {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                                     "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                                     "rhide": "hide", "default1": "step1"},
                                    {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "",
                                     "example": "", "pattern": "",
                                     "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                     "default1": type[1]},
                                    {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "",
                                     "pattern": "",
                                     "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                     "default1": request.GET.get("sship")}
                                ]
                                                 }
                                response_data["opflag"] = 1
                                return HttpResponse(json.dumps(response_data), content_type="application/json")
                            elif type[1] == "40":
                                print "I am here ------123 go below"
                                from mysite.fabric_input import *
                                request_data = {}
                                request_data["optionselected"] = "40"
                                input_data = ProvisionTenant(request_data)
                                response_data = input_data.get_response_data()
                                response_data["opflag"] = 1
                                return HttpResponse(json.dumps(response_data), content_type="application/json")
                            elif type[1] == "41":
                                from mysite.fabric_input import *
                                from mysite.models import CronDB
                                request_data = {}
                                request_data["optionselected"] = "41"
                                request_data = request.GET
                                input_data = ProvisionEPG(request_data)
                                response_data = input_data.get_response_data()
                                response_data["opflag"] = 1
                                return HttpResponse(json.dumps(response_data), content_type="application/json")
                            elif type[1] == "46":
                                print "i m in Activate Configuration "
                                from mysite.models import CronDB

                                import json
                                changeid = request.GET.get('taskid')
                                ip = request.GET.get('ip')
                                entry = CronDB.objects.values_list('activate_commands').filter(changeid=changeid,
                                                                                               ip=ip).order_by(
                                    'timestamp').last()
                                if entry:
                                    print entry
                                    activate_cmds = json.loads(entry[0])
                                else:
                                    msg = "Data not found for ChangeID -" + changeid
                                    return render(request, 'notification.html',
                                                  {'output_list': msg, 'class': 'alert-danger'})
                                outputlist = {}
                                outputlist["Activate Configuration"] = activate_cmds
                                # insert_entry(request,"",rollback,4,2,1)
                                return render(request, 'new_aci_config_tabs.html',
                                              {'output_list': outputlist, 'action': "rollback_apply"})
                            elif type[1] == "47":
                                # Exception here. Using input submitted functions
                                print "i am here>>>>"
                                print "i m in Acrivate configuration "
                                from mysite.models import TenantDB

                                import json
                                changeid = request.GET.get('taskid')
                                # ip = request.GET.get('ip')
                                activate_cmd = []
                                entry = TenantDB.objects.values_list('activate_cmd_list').filter(
                                    pcnum__contains=changeid + '_').all()
                                if entry:
                                    for each in entry:
                                        print each
                                        activate_cmd += json.loads(each[0])
                                        activate_cmd += ["!<-- ------------------------------------ -->!"]
                                else:
                                    msg = "No Entries found for ChangeID -" + changeid
                                    return render(request, 'notification.html',
                                                  {'output_list': msg, 'class': 'alert-danger'})

                                outputlist = {}
                                outputlist["Activate Configuration"] = activate_cmd
                                # insert_entry(request,"",rollback,4,2,1)
                                return render(request, 'new_aci_config_tabs.html',
                                              {'output_list': outputlist, 'action': "cmplt_activate_apply"})
                                # response_data = {"column": "12", "newline": "no", "inputs": [
                                #     {"newline": "yes", "type": "hidden", "name": "filtername", "desc": "Enter Input",
                                #      "example": "", "pattern": "", "csend": "yes", "extraclass": "", "hide": "hide",
                                #      "rhide": "hide", "default1": "step1"},
                                #     {"newline": "yes", "type": "hidden", "name": "optionselected", "desc": "",
                                #      "example": "", "pattern": "",
                                #      "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                #      "default1": "47"},
                                #     {"newline": "yes", "type": "heading", "name": "sampletext",
                                #      "label": "Please click submit to proceed", "example": "", "pattern": "",
                                #      "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                #      "default1": "Please click submit to proceed"},
                                #     {"newline": "yes", "type": "hidden", "name": "changeid", "desc": "", "example": "",
                                #      "pattern": "",
                                #      "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                #      "default1": request.GET.get('taskid')},
                                #     {"newline": "yes", "type": "hidden", "name": "ip", "desc": "", "example": "",
                                #      "pattern": "",
                                #      "csend": "yes", "extraclass": "color-blue", "hide": "hide", "rhide": "hide",
                                #      "default1": request.GET.get("sship")}
                                # ]
                                #                  }
                                response_data["opflag"] = 1
                                return HttpResponse(json.dumps(response_data), content_type="application/json")
                            else:
                                user_sel = get_user_selection(template_id)
                                output = CombinationsSubmittedTemplate(request, user_sel['user_ios'],
                                                                       user_sel['user_plat'], user_sel['user_tech'],
                                                                       user_sel['tmplt_name'])
                                output["opflag"] = 1
                                return HttpResponse(json.dumps(output), content_type="application/json")

                        e1 = template_db.objects.values_list("ios", "plat", "tech", "template", "name").filter(
                            id=templateid).last()
                        # print e1[4]
                        # add a logic to check if ACI. If yes Load for ACI
                        if e1:
                            user_ios = e1[0]
                            user_plat = e1[1]
                            user_tech = e1[2]
                            tmplt_name = e1[3]
                        request.session["customer"] = dictn.get("customer")
                        if dictn.has_key("ext") and dictn.has_key("config_action"):
                            request.session["extension"] = {"ext_name": dictn.get("ext"),
                                                            "action": dictn.get("config_action")}
                        elif dictn.has_key("ext"):
                            request.session["extension"] = {"ext_name": dictn.get("ext")}
                        else:
                            request.session["extension"] = {}
                        response = LoadModifyTemplate(request, user_ios, user_plat, user_tech, tmplt_name)
                        for each in response["inputs"]:
                            indx = response["inputs"].index(each)
                            input = each
                            response["inputs"].remove(each)
                            q = UserInputValueDb.objects.values_list("field_value").filter(taskid=taskid,
                                                                                           subtaskid=subtaskid,
                                                                                           field_name=input[
                                                                                               "name"]).last()
                            if q:
                                input["default1"] = q[0]
                            response["inputs"].insert(indx, input)
                        print response
                else:
                    e2 = UserSelectionDb.objects.values_list("c1_value", "c2_value", "c3_value", "c4_value").filter(
                        taskid=taskid, subtaskid=subtaskid).last()
                    if e2:
                        user_ios = e2[0]
                        user_plat = e2[1]
                        user_tech = e2[2]
                        tmplt_name = e2[3]
                    request.session["customer"] = dictn.get("customer")
                    if dictn.has_key("ext") and dictn.has_key("config_action"):
                        request.session["extension"] = {"ext_name": dictn.get("ext"),
                                                        "action": dictn.get("config_action")}
                    elif dictn.has_key("ext"):
                        request.session["ext_extensiondict"] = {"ext_name": dictn.get("ext")}
                    response = LoadModifyTemplate(request, user_ios, user_plat, user_tech, tmplt_name)
                    for each in response:
                        indx = response.index(each)
                        input = each
                        response.remove(each)
                        q = UserInputValueDb.objects.values_list("field_value").filter(taskid=taskid,
                                                                                       subtaskid=subtaskid,
                                                                                       field_name=input["name"]).last()
                        if q:
                            input["default1"] = q[0]
                        response.insert(indx, input)
                    print response
                response["opflag"] = 1
                return HttpResponse(json.dumps(response), content_type="application/json")
            else:
                output = "Please review the Request No. and Subtask No. "
                return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
    # Display Request
    elif type == "5" or type == "6":
        # function for phase3
        config_type = "0"
        impl_plan = {}
        if type == "5":
            print " in display"
            outputlist = {}
            entry1 = CronDB.objects.values_list("command_list").filter(taskid=taskid, subtaskid=subtaskid).last()
            if entry1:
                impl_plan = json.loads(entry1[0])
            entry1 = ServiceRequestDB.objects.values_list("taskid", "subtaskid", "customer",
                                                          "reponsedictionary").filter(taskid=taskid,
                                                                                      subtaskid=subtaskid).last()
            if entry1:
                data = json.loads(entry1[3])
                service_info = []
                for k, v in data.iteritems():
                    if k == "subtaskid":
                        service_info.append(
                            "<strong>Sub-Task ID :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "taskid":
                        service_info.append(
                            "<strong>Task ID :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "customer":
                        service_info.append(
                            "<strong>Customer :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "sship":
                        service_info.append(
                            "<strong>Device IP :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "type_ct":
                        config_type = v
                var_flag = get_variable_flag(impl_plan)
                outputlist["Service Information"] = service_info
                outputlist["Implementation Plan"] = impl_plan
                if config_type == "1":
                    return render(request, 'tabs_configuration.html', {'output_list': outputlist, "var_flag": var_flag})
                else:
                    return render(request, 'tabs_troubleshooting.html', {'output_list': outputlist})
            else:
                output = "Service Request No. " + str(taskid) + " Does Not Exist "
                return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
        if type == "6":
            print " in rollback"
            outputlist = {}
            entry1 = CronDB.objects.values_list("rollback_list").filter(taskid=taskid, subtaskid=subtaskid).last()
            if entry1:
                rollback = json.loads(entry1[0])
            entry1 = ServiceRequestDB.objects.values_list("taskid", "subtaskid", "customer",
                                                          "reponsedictionary").filter(taskid=taskid,
                                                                                      subtaskid=subtaskid).last()
            if entry1:
                data = json.loads(entry1[3])
                service_info = []
                for k, v in data.iteritems():
                    if k == "subtaskid":
                        service_info.append(
                            "<strong>Sub-Task ID :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "taskid":
                        service_info.append(
                            "<strong>Task ID :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "customer":
                        service_info.append(
                            "<strong>Customer :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "sship":
                        service_info.append(
                            "<strong>Device IP :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
            outputlist["Service Information"] = service_info
            outputlist["Rollback Configuration"] = rollback
            return render(request, 'tabs.html', {'output_list': outputlist})
    # Add, Modify, Delete
    elif type == "7" or type == "8" or type == "9":
        if type == "7":
            action = "Add New Template"
        elif type == "8":
            # print request.GET.get("template")
            action = "Modify Existing Template"
        elif type == "9":
            action = "Delete Existing Template"
        response = TemplateAction(request, action)
        response["opflag"] = 1
        return HttpResponse(json.dumps(response), content_type="application/json")
    # Existing Request

    elif type == "10":
        # in existing service request
        if request.GET.has_key('existing_apply_action'):
            ea = request.GET.get('existing_apply_action')
        config_type = "0"
        impl_plan = {}
        if ea == "display":
            # for display here
            config_type = "0"
            impl_plan = {}
            # print " in display"
            outputlist = {}
            entry1 = CronDB.objects.values_list("command_list").filter(taskid=taskid, subtaskid=subtaskid).last()
            if entry1:
                impl_plan = json.loads(entry1[0])
            entry1 = ServiceRequestDB.objects.values_list("taskid", "subtaskid", "customer",
                                                          "reponsedictionary").filter(taskid=taskid,
                                                                                      subtaskid=subtaskid).last()
            if entry1:
                data = json.loads(entry1[3])
                service_info = []
                for k, v in data.iteritems():
                    if k == "subtaskid":
                        service_info.append(
                            "<strong>Sub-Task ID :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "taskid":
                        service_info.append(
                            "<strong>Task ID :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "customer":
                        service_info.append(
                            "<strong>Customer :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "sship":
                        service_info.append(
                            "<strong>Device IP :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "type_ct":
                        config_type = v
                var_flag = get_variable_flag(impl_plan)
                outputlist["Service Information"] = service_info
                outputlist["Implementation Plan"] = impl_plan
                if config_type == "1":
                    return render(request, 'tabs_configuration.html', {'output_list': outputlist, "var_flag": var_flag})
                else:
                    return render(request, 'tabs_troubleshooting.html', {'output_list': outputlist})
            else:
                output = "Service Request No. " + str(taskid) + " Does Not Exist "
                return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
        elif ea == "rollback":
            print " in rollback"
            outputlist = {}
            rollback = {}
            entry1 = CronDB.objects.values_list("rollback_list").filter(taskid=taskid, subtaskid=subtaskid).last()
            if entry1:
                rollback = json.loads(entry1[0])
            entry1 = ServiceRequestDB.objects.values_list("taskid", "subtaskid", "customer",
                                                          "reponsedictionary").filter(taskid=taskid,
                                                                                      subtaskid=subtaskid).last()
            if entry1:
                data = json.loads(entry1[3])
                service_info = []
                for k, v in data.iteritems():
                    if k == "subtaskid":
                        service_info.append(
                            "<strong>Sub-Task ID :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "taskid":
                        service_info.append(
                            "<strong>Task ID :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "customer":
                        service_info.append(
                            "<strong>Customer :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
                    if k == "sship":
                        service_info.append(
                            "<strong>Device IP :</strong> <span style='text-transform:capitalize;'>" + v + "</span>")
            if len(rollback) != 0:
                outputlist["Service Information"] = service_info
                outputlist["Rollback Configuration"] = rollback
                return render(request, 'tabs.html', {'output_list': outputlist})
            else:
                outputlist["Service Information"] = service_info
                outputlist["Rollback Configuration"] = {}
                return render(request, 'tabs.html', {'output_list': outputlist})
        elif ea == "activate":
            print "i m in Activate configuration "
            from mysite.models import TenantDB
            import json
            changeid = request.GET.get('changeid')
            taskid = request.GET.get('taskid')
            subtaskid = request.GET.get('subtaskid')
            # ip = request.GET.get('ip')
            activate_cmd = []
            entry = TenantDB.objects.values_list('activate_cmd_list').filter(pcnum__contains=taskid + '_').all()
            if entry:
                for each in entry:
                    print each
                    activate_cmd += json.loads(each[0])
                    activate_cmd += ["!<-- ------------------------------------ -->!"]
            else:
                msg = "No Entries found for ChangeID"
                return render(request, 'notification.html', {'output_list': msg, 'class': 'alert-danger'})
            outputlist = {}
            outputlist["Activate Configuration"] = activate_cmd
            # insert_entry(request,"",rollback,4,2,1)
            return render(request, 'new_aci_config_tabs.html',
                          {'output_list': outputlist, 'action': "cmplt_activate_apply"})
        elif ea == "provision" or ea == "reserve" or ea == "provision_activation" or ea == "activation" or ea == "deprovision_reservation" or ea == "deprovision":
            entry1 = ServiceRequestDB.objects.values_list("reponsedictionary").filter(taskid=taskid,
                                                                                      subtaskid=subtaskid).last()
            if entry1:
                dictn = json.loads(entry1[0])
                if dictn.has_key("template_name") and dictn["template_name"] == "yes":
                    templateid = dictn["template"]
                    e1 = template_db.objects.values_list("ios", "plat", "tech", "template", "name").filter(
                        id=templateid).last()
                    if e1:
                        user_ios = e1[0]
                        user_plat = e1[1]
                        user_tech = e1[2]
                        tmplt_name = e1[3]
                    request.session["customer"] = dictn.get("customer")
                    request.session["acilocation"] = dictn.get("acilocation")
                    request.session["config_action"] = request.GET.get("existing_apply_action")
                    if request.GET.has_key("ext"):
                        request.session["extension"] = {"ext_name": request.GET.get("ext"),
                                                        "action": request.GET.get("existing_apply_action")}
                    elif request.GET.has_key("existing_apply_action"):
                        request.session["extension"] = {"ext_name": request.GET.get("existing_apply_action")}
                    else:
                        request.session["extension"] = {}
                    response = LoadModifyTemplate(request, user_ios, user_plat, user_tech, tmplt_name)
                    for each in response["inputs"]:
                        indx = response["inputs"].index(each)
                        input = each
                        response["inputs"].remove(each)
                        q = UserInputValueDb.objects.values_list("field_value").filter(taskid=taskid,
                                                                                       subtaskid=subtaskid,
                                                                                       field_name=input["name"]).last()
                        if q:
                            input["default1"] = q[0]
                        response["inputs"].insert(indx, input)
            # para_dict = []
            # para_dict.append({"type":"dropdown","name":"existing_apply","default1":"","desc":"Action","options":[{"label":"Display","value":"display"},{"label":"Rollback","value":"rollback"},{"label":"Provisioning","value":"provisioning"},{"label":"De Provisioning","value":"deprovisioning"},{"label":"Activate","value":"activate"}]})
            # para_dict.append({"type":"hidden","name":"apply_action_course","default1":"10s","desc":"ac"})
            # opvar  = {"column":"12","newline":"no","inputs":para_dict}
            response["opflag"] = 1
            return HttpResponse(json.dumps(response), content_type="application/json")
    # SDA GreenField
    elif type == "12":
        if request.GET.has_key("action"):
            print "Green Field Inputs Service"
            phase = request.GET.get("action")
            request.session['user_type'] = "Green Field Campus Design"
            user_ios = request.session['user_ios'] = "greenfield"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1229")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])

            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":

                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                phase = request.session["ext_dict"]["ext_name"]
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid, ).update(
                            selectedvalue=2,
                            customer=request.GET.get('customer'),
                            reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=2,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        data = GreenFieldCampus_PlanData(request.session["ext_dict"]["ext_name"])
                    elif fabrictype == "non_sda":
                        data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                # print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    print " Im m here n SDA green Field "
                    # print response
                    if request.GET.get("project_phase") in ["Plan", "Design-1", "Design-2", "Checklist"]:
                        for each in response["inputs"]:

                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"],
                                                                                               customer=customer).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    print input["name"], ">>>", input["type"], ">>>", chk_vl
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        # print " DropdownCheck boxd entry"
                                        if user_db_Flag:
                                            print input["name"], ">>>", chk_vl
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ">>>>>>>>>", ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele and input["type"] == "checkbox":
                                                    opt["checked"] = "checked"
                                                elif opt.get("value") == ele and input["type"] == "dropdown-checkbox":
                                                    opt["selected"] = "yes"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                    # if request.GET.get("project_phase") in ["Checklist"]:
                    #     print "IN >>>> Green Field Configuration Configuration "
                    #     q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                    #                                                                    subtaskid= request.session['subtaskid']).all()
                    #     response_data = {}
                    #     for e_tuple in q:
                    #         key = e_tuple[0]
                    #         val = e_tuple[1]
                    #         if "[" in val:
                    #             val = json.loads(val)
                    #         else:
                    #             val=str(val)
                    #         # if isinstance(val, str):
                    #         #     print "------>>>", key, val
                    #
                    #         if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                    #             if "," in val:
                    #                 val = val.split(",")[0]
                    #             ip = IPNetwork(val)
                    #             response_data[key + '_ml'] = ip.prefixlen
                    #             response_data[key+'_host'] = str(ip.ip)
                    #             response_data[key+'_policy'] = str(ip.ip).replace(".", "_")
                    #             response_data[key+'_subnet'] = str(ip.cidr).replace("/"+str(response_data[key + '_ml']), '')
                    #             response_data[key+'_host_gw'] = str(IPAddress(response_data[key+'_subnet'])+1)
                    #             response_data[key+'_mask'] = str(ip.netmask)
                    #             response_data[key+'_wmask'] = str(ip.hostmask)
                    #         response_data[key] = val
                    #     # print response_data
                    #     # pres_output = [{'Configuration': []}]
                    #     sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'], 'tech': request.session['user_tech'], 'type': request.session['user_type'],
                    # 'user_name': "", 'customer': customer}
                    #     test_flag = True
                    #     if test_flag:
                    #         set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                    #                                           request.session["ext_dict"])
                    #         result = set_inputs_to_db.overwriteTlDb()
                    #     data = ReadTemplateDb(sel_para, request.session['user_type'], customer, request.session["ext_dict"])
                    #     inputs = data.getInputsFromDb()
                    #     input_list = inputs.split(' ')
                    #     user_data = {}
                    #     # print "###", input_list
                    #     for el in input_list:
                    #         # print el
                    #         if response_data.get(el):
                    #             # print ">>", response_data.get(el)
                    #             temp_str = response_data.get(el)
                    #             if isinstance(temp_str, list):
                    #                 temp_str = ','.join(temp_str)
                    #             else:
                    #                 temp_str = ' '.join(temp_str.split())
                    #             temp_str = re.sub(r"\s+$", ' ', temp_str)
                    #             user_data[el] = temp_str
                    #         else:
                    #             value = "<%s>" % el
                    #             user_data[el] = value
                    #     # print user_data
                    #     new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                    #     # print "+=======", new_user_dict
                    #     modified_output = data.convet_template_to_config(request, new_user_dict)
                    #     glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                    #     questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                    #     questionnaire_output = modified_output + questionnaire_output
                    #     pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                    #     pres_output = sorted(pres.getModTemplateOutput())
                    #     for e_press_dict in pres_output:
                    #         if "Implementation Plan" in e_press_dict:
                    #             pres_output.remove(e_press_dict)
                    #     return render(request, 'temaplate_output_tabs.html',{'output_list': pres_output, "var_flag": "1"})
                    if request.GET.get("project_phase") in ["Configuration"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_host'] = str(ip.ip)
                                response_data[key + '_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_host_gw'] = str(IPAddress(response_data[key + '_subnet']) + 1)
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        # print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = sorted(pres.getModTemplateOutput())
                        for e_press_dict in pres_output:
                            if "Implementation Plan" in e_press_dict:
                                pres_output.remove(e_press_dict)
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})
                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                    if request.GET.get("project_phase") in ["validate"]:
                        user_sel = get_user_selection("1276")
                        request.session['user_type'] = user_sel['tmplt_name']
                        request.session['user_ios'] = user_sel['user_ios']
                        request.session['user_plat'] = user_sel['user_plat']
                        request.session['user_tech'] = user_sel['user_tech']
                        response = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                                 user_sel['user_tech'], user_sel['tmplt_name'],
                                                                 user_sel['tag'])
                        # print user_sel,">>>>"
                    if request.GET.get("project_phase") in ["Configuration_Underlay_Automation"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            # print e_tuple
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_ip'] = str(ip.ip)
                                response_data[key + '_ip_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_ip_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = pres.getModTemplateOutput()
                        if request.GET.get("project_phase") == 'validate':
                            pres = PresTroubleshootingOutput(sel_para, modified_output, True)
                            pres_output = pres.getModTemplateOutput()
                            # print pres_output
                            return render(request, 'old_script_output_tabs.html',
                                          {'output_list': pres_output, "var_flag": "1"})
                        else:
                            return render(request, 'temaplate_output_tabs.html',
                                          {'output_list': pres_output, "var_flag": "1"})

                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})

    # SD WAN Deployment
    elif type == "27":
        if request.GET.has_key("action"):

            request.session['user_type'] = "SD WAN Deployment"
            user_ios = request.session['user_ios'] = "sd_wan"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1255")

            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])
            request.session["ext_dict"] = {}
            fabrictype = "sda"
            # fabrictype = request.GET.get("fabric_type")
            # request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                phase = request.session["ext_dict"]["ext_name"]
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid,
                                                             ).update(selectedvalue=4,
                                                                      customer=request.GET.get('customer'),
                                                                      reponsedictionary=json.dumps(input_dict))
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=4,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        data = SD_Wan_Deployment_Planning(request.session["ext_dict"]["ext_name"])
                    elif fabrictype == "non_sda":
                        data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:
                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    # print chk_vl, user_db_Flag,">>>>>>>>"
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        print input["name"]
                                        if user_db_Flag:
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ele,"?????????????????????????????"
                                            for opt in input["options"]:
                                                if opt.get("value") == ele:
                                                    if input["type"] == "dropdown-checkbox":
                                                        opt['selected'] = "yes"
                                                    else:
                                                        opt["checked"] = "checked"


                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                                   subtaskid=
                                                                                                   request.session[
                                                                                                       'subtaskid'],
                                                                                                   field_name=input2[
                                                                                                       "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)

                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                    # if request.GET.get("project_phase") in ["Implimentation"]:

                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    # Hardware_refresh
    elif type == "30":
        if request.GET.has_key("action"):
            phase = request.session["ext_dict"]["ext_name"]
            request.session['user_type'] = "Hardware_refresh"
            user_ios = request.session['user_ios'] = "hardware_refresh"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1255")

            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])
            request.session["ext_dict"] = {}
            fabrictype = "sda"
            # fabrictype = request.GET.get("fabric_type")
            # request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid,
                                                             ).update(selectedvalue=4,
                                                                      customer=request.GET.get('customer'),
                                                                      reponsedictionary=json.dumps(input_dict))
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=4,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        data = HardwareRefresh_SDA_Data(request.session["ext_dict"]["ext_name"])
                    elif fabrictype == "non_sda":
                        data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:
                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    # print chk_vl, user_db_Flag
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        if user_db_Flag:
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele:
                                                    if input["type"] == "dropdown-checkbox":
                                                        opt['selected'] = "yes"
                                                    else:
                                                        opt["checked"] = "checked"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                                   subtaskid=
                                                                                                   request.session[
                                                                                                       'subtaskid'],
                                                                                                   field_name=input2[
                                                                                                       "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)

                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    # CISCO ISE
    elif type == "29":

        if request.GET.has_key("action"):
            phase = request.session["ext_dict"]["ext_name"]
            request.session['user_type'] = "CISCO ISE"
            user_ios = request.session['user_ios'] = "cisco_ise"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1256")

            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])
            request.session["ext_dict"] = {}
            phase = request.GET.get("action")
            fabrictype = "sda"
            # fabrictype = request.GET.get("fabric_type")
            # request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid,
                                                             ).update(selectedvalue=4,
                                                                      customer=request.GET.get('customer'),
                                                                      reponsedictionary=json.dumps(input_dict))
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=4,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        data = CiscoISE_PlanData(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:
                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    # print chk_vl, user_db_Flag
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        if user_db_Flag:
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele:
                                                    if input["type"] == "dropdown-checkbox":
                                                        opt['selected'] = "yes"
                                                    else:
                                                        opt["checked"] = "checked"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                                   subtaskid=
                                                                                                   request.session[
                                                                                                       'subtaskid'],
                                                                                                   field_name=input2[
                                                                                                       "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    # Zscale
    elif type == "37":
        if request.GET.has_key("action"):
            print "Zscale Inputs Service"
            # phase = request.session["ext_dict"]["ext_name"]
            request.session['user_type'] = "Zscale"
            user_ios = request.session['user_ios'] = "zscale"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1270")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])

            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":

                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                phase = request.session["ext_dict"]["ext_name"]
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid, ).update(
                            selectedvalue=2,
                            customer=request.GET.get('customer'),
                            reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=2,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        data = Zscale_PlanData(request.session["ext_dict"]["ext_name"])
                    elif fabrictype == "non_sda":
                        data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    print " Im m here n SDA green Field "
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:

                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    print input["name"], ">>>", input["type"], ">>>", chk_vl
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        # print " DropdownCheck boxd entry"
                                        if user_db_Flag:
                                            print input["name"], ">>>", chk_vl
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ">>>>>>>>>", ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele and input["type"] == "checkbox":
                                                    opt["checked"] = "checked"
                                                elif opt.get("value") == ele and input["type"] == "dropdown-checkbox":
                                                    opt["selected"] = "yes"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                    # if request.GET.get("project_phase") in ["Checklist"]:
                    #     print "IN >>>> Green Field Configuration Configuration "
                    #     q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                    #                                                                    subtaskid= request.session['subtaskid']).all()
                    #     response_data = {}
                    #     for e_tuple in q:
                    #         key = e_tuple[0]
                    #         val = e_tuple[1]
                    #         if "[" in val:
                    #             val = json.loads(val)
                    #         else:
                    #             val=str(val)
                    #         # if isinstance(val, str):
                    #         #     print "------>>>", key, val
                    #
                    #         if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                    #             if "," in val:
                    #                 val = val.split(",")[0]
                    #             ip = IPNetwork(val)
                    #             response_data[key + '_ml'] = ip.prefixlen
                    #             response_data[key+'_host'] = str(ip.ip)
                    #             response_data[key+'_policy'] = str(ip.ip).replace(".", "_")
                    #             response_data[key+'_subnet'] = str(ip.cidr).replace("/"+str(response_data[key + '_ml']), '')
                    #             response_data[key+'_host_gw'] = str(IPAddress(response_data[key+'_subnet'])+1)
                    #             response_data[key+'_mask'] = str(ip.netmask)
                    #             response_data[key+'_wmask'] = str(ip.hostmask)
                    #         response_data[key] = val
                    #     # print response_data
                    #     # pres_output = [{'Configuration': []}]
                    #     sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'], 'tech': request.session['user_tech'], 'type': request.session['user_type'],
                    # 'user_name': "", 'customer': customer}
                    #     test_flag = True
                    #     if test_flag:
                    #         set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                    #                                           request.session["ext_dict"])
                    #         result = set_inputs_to_db.overwriteTlDb()
                    #     data = ReadTemplateDb(sel_para, request.session['user_type'], customer, request.session["ext_dict"])
                    #     inputs = data.getInputsFromDb()
                    #     input_list = inputs.split(' ')
                    #     user_data = {}
                    #     # print "###", input_list
                    #     for el in input_list:
                    #         # print el
                    #         if response_data.get(el):
                    #             # print ">>", response_data.get(el)
                    #             temp_str = response_data.get(el)
                    #             if isinstance(temp_str, list):
                    #                 temp_str = ','.join(temp_str)
                    #             else:
                    #                 temp_str = ' '.join(temp_str.split())
                    #             temp_str = re.sub(r"\s+$", ' ', temp_str)
                    #             user_data[el] = temp_str
                    #         else:
                    #             value = "<%s>" % el
                    #             user_data[el] = value
                    #     # print user_data
                    #     new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                    #     # print "+=======", new_user_dict
                    #     modified_output = data.convet_template_to_config(request, new_user_dict)
                    #     glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                    #     questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                    #     questionnaire_output = modified_output + questionnaire_output
                    #     pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                    #     pres_output = sorted(pres.getModTemplateOutput())
                    #     for e_press_dict in pres_output:
                    #         if "Implementation Plan" in e_press_dict:
                    #             pres_output.remove(e_press_dict)
                    #     return render(request, 'temaplate_output_tabs.html',{'output_list': pres_output, "var_flag": "1"})
                    if request.GET.get("project_phase") in ["Configuration"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_host'] = str(ip.ip)
                                response_data[key + '_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_host_gw'] = str(IPAddress(response_data[key + '_subnet']) + 1)
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        # print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = sorted(pres.getModTemplateOutput())
                        for e_press_dict in pres_output:
                            if "Implementation Plan" in e_press_dict:
                                pres_output.remove(e_press_dict)
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})

                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                    if request.GET.get("project_phase") in ["Configuration_Underlay_Automation"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_ip'] = str(ip.ip)
                                response_data[key + '_ip_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_ip_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = pres.getModTemplateOutput()
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})
                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    elif type == "40":
        if request.GET.has_key("action"):
            print "Zscale2 Inputs Service"
            # phase = request.session["ext_dict"]["ext_name"]
            request.session['user_type'] = "Zscale2"
            user_ios = request.session['user_ios'] = "zscale2"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1271")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])

            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":

                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                phase = request.session["ext_dict"]["ext_name"]
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid, ).update(
                            selectedvalue=2,
                            customer=request.GET.get('customer'),
                            reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=2,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        data = Zscale2_PlanData(request.session["ext_dict"]["ext_name"])
                    elif fabrictype == "non_sda":
                        data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    print " Im m here n SDA green Field "
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:

                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    print input["name"], ">>>", input["type"], ">>>", chk_vl
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        # print " DropdownCheck boxd entry"
                                        if user_db_Flag:
                                            print input["name"], ">>>", chk_vl
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ">>>>>>>>>", ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele and input["type"] == "checkbox":
                                                    opt["checked"] = "checked"
                                                elif opt.get("value") == ele and input["type"] == "dropdown-checkbox":
                                                    opt["selected"] = "yes"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                    # if request.GET.get("project_phase") in ["Checklist"]:
                    #     print "IN >>>> Green Field Configuration Configuration "
                    #     q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                    #                                                                    subtaskid= request.session['subtaskid']).all()
                    #     response_data = {}
                    #     for e_tuple in q:
                    #         key = e_tuple[0]
                    #         val = e_tuple[1]
                    #         if "[" in val:
                    #             val = json.loads(val)
                    #         else:
                    #             val=str(val)
                    #         # if isinstance(val, str):
                    #         #     print "------>>>", key, val
                    #
                    #         if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                    #             if "," in val:
                    #                 val = val.split(",")[0]
                    #             ip = IPNetwork(val)
                    #             response_data[key + '_ml'] = ip.prefixlen
                    #             response_data[key+'_host'] = str(ip.ip)
                    #             response_data[key+'_policy'] = str(ip.ip).replace(".", "_")
                    #             response_data[key+'_subnet'] = str(ip.cidr).replace("/"+str(response_data[key + '_ml']), '')
                    #             response_data[key+'_host_gw'] = str(IPAddress(response_data[key+'_subnet'])+1)
                    #             response_data[key+'_mask'] = str(ip.netmask)
                    #             response_data[key+'_wmask'] = str(ip.hostmask)
                    #         response_data[key] = val
                    #     # print response_data
                    #     # pres_output = [{'Configuration': []}]
                    #     sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'], 'tech': request.session['user_tech'], 'type': request.session['user_type'],
                    # 'user_name': "", 'customer': customer}
                    #     test_flag = True
                    #     if test_flag:
                    #         set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                    #                                           request.session["ext_dict"])
                    #         result = set_inputs_to_db.overwriteTlDb()
                    #     data = ReadTemplateDb(sel_para, request.session['user_type'], customer, request.session["ext_dict"])
                    #     inputs = data.getInputsFromDb()
                    #     input_list = inputs.split(' ')
                    #     user_data = {}
                    #     # print "###", input_list
                    #     for el in input_list:
                    #         # print el
                    #         if response_data.get(el):
                    #             # print ">>", response_data.get(el)
                    #             temp_str = response_data.get(el)
                    #             if isinstance(temp_str, list):
                    #                 temp_str = ','.join(temp_str)
                    #             else:
                    #                 temp_str = ' '.join(temp_str.split())
                    #             temp_str = re.sub(r"\s+$", ' ', temp_str)
                    #             user_data[el] = temp_str
                    #         else:
                    #             value = "<%s>" % el
                    #             user_data[el] = value
                    #     # print user_data
                    #     new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                    #     # print "+=======", new_user_dict
                    #     modified_output = data.convet_template_to_config(request, new_user_dict)
                    #     glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                    #     questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                    #     questionnaire_output = modified_output + questionnaire_output
                    #     pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                    #     pres_output = sorted(pres.getModTemplateOutput())
                    #     for e_press_dict in pres_output:
                    #         if "Implementation Plan" in e_press_dict:
                    #             pres_output.remove(e_press_dict)
                    #     return render(request, 'temaplate_output_tabs.html',{'output_list': pres_output, "var_flag": "1"})
                    if request.GET.get("project_phase") in ["Configuration"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_host'] = str(ip.ip)
                                response_data[key + '_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_host_gw'] = str(IPAddress(response_data[key + '_subnet']) + 1)
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        # print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = sorted(pres.getModTemplateOutput())
                        for e_press_dict in pres_output:
                            if "Implementation Plan" in e_press_dict:
                                pres_output.remove(e_press_dict)
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})

                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                    if request.GET.get("project_phase") in ["Configuration_Underlay_Automation"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_ip'] = str(ip.ip)
                                response_data[key + '_ip_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_ip_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = pres.getModTemplateOutput()
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})
                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    # MSP
    elif type == "47":
        if request.GET.has_key("action"):
            print "MSP Inputs Service"
            # phase = request.session["ext_dict"]["ext_name"]
            request.session['user_type'] = "MSP"
            user_ios = request.session['user_ios'] = "msp"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1277")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])

            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":

                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                phase = request.session["ext_dict"]["ext_name"]
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid, ).update(
                            selectedvalue=2,
                            customer=request.GET.get('customer'),
                            reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=2,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                    elif fabrictype == "non_sda":
                        data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    print " Im m here n SDA green Field "
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:

                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    print input["name"], ">>>", input["type"], ">>>", chk_vl
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        # print " DropdownCheck boxd entry"
                                        if user_db_Flag:
                                            print input["name"], ">>>", chk_vl
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ">>>>>>>>>", ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele and input["type"] == "checkbox":
                                                    opt["checked"] = "checked"
                                                elif opt.get("value") == ele and input["type"] == "dropdown-checkbox":
                                                    opt["selected"] = "yes"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                    # if request.GET.get("project_phase") in ["Checklist"]:
                    #     print "IN >>>> Green Field Configuration Configuration "
                    #     q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                    #                                                                    subtaskid= request.session['subtaskid']).all()
                    #     response_data = {}
                    #     for e_tuple in q:
                    #         key = e_tuple[0]
                    #         val = e_tuple[1]
                    #         if "[" in val:
                    #             val = json.loads(val)
                    #         else:
                    #             val=str(val)
                    #         # if isinstance(val, str):
                    #         #     print "------>>>", key, val
                    #
                    #         if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                    #             if "," in val:
                    #                 val = val.split(",")[0]
                    #             ip = IPNetwork(val)
                    #             response_data[key + '_ml'] = ip.prefixlen
                    #             response_data[key+'_host'] = str(ip.ip)
                    #             response_data[key+'_policy'] = str(ip.ip).replace(".", "_")
                    #             response_data[key+'_subnet'] = str(ip.cidr).replace("/"+str(response_data[key + '_ml']), '')
                    #             response_data[key+'_host_gw'] = str(IPAddress(response_data[key+'_subnet'])+1)
                    #             response_data[key+'_mask'] = str(ip.netmask)
                    #             response_data[key+'_wmask'] = str(ip.hostmask)
                    #         response_data[key] = val
                    #     # print response_data
                    #     # pres_output = [{'Configuration': []}]
                    #     sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'], 'tech': request.session['user_tech'], 'type': request.session['user_type'],
                    # 'user_name': "", 'customer': customer}
                    #     test_flag = True
                    #     if test_flag:
                    #         set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                    #                                           request.session["ext_dict"])
                    #         result = set_inputs_to_db.overwriteTlDb()
                    #     data = ReadTemplateDb(sel_para, request.session['user_type'], customer, request.session["ext_dict"])
                    #     inputs = data.getInputsFromDb()
                    #     input_list = inputs.split(' ')
                    #     user_data = {}
                    #     # print "###", input_list
                    #     for el in input_list:
                    #         # print el
                    #         if response_data.get(el):
                    #             # print ">>", response_data.get(el)
                    #             temp_str = response_data.get(el)
                    #             if isinstance(temp_str, list):
                    #                 temp_str = ','.join(temp_str)
                    #             else:
                    #                 temp_str = ' '.join(temp_str.split())
                    #             temp_str = re.sub(r"\s+$", ' ', temp_str)
                    #             user_data[el] = temp_str
                    #         else:
                    #             value = "<%s>" % el
                    #             user_data[el] = value
                    #     # print user_data
                    #     new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                    #     # print "+=======", new_user_dict
                    #     modified_output = data.convet_template_to_config(request, new_user_dict)
                    #     glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                    #     questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                    #     questionnaire_output = modified_output + questionnaire_output
                    #     pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                    #     pres_output = sorted(pres.getModTemplateOutput())
                    #     for e_press_dict in pres_output:
                    #         if "Implementation Plan" in e_press_dict:
                    #             pres_output.remove(e_press_dict)
                    #     return render(request, 'temaplate_output_tabs.html',{'output_list': pres_output, "var_flag": "1"})
                    if request.GET.get("project_phase") in ["Configuration"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_host'] = str(ip.ip)
                                response_data[key + '_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_host_gw'] = str(IPAddress(response_data[key + '_subnet']) + 1)
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        # print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = sorted(pres.getModTemplateOutput())
                        for e_press_dict in pres_output:
                            if "Implementation Plan" in e_press_dict:
                                pres_output.remove(e_press_dict)
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})

                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                    if request.GET.get("project_phase") in ["Configuration_Underlay_Automation"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_ip'] = str(ip.ip)
                                response_data[key + '_ip_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_ip_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = pres.getModTemplateOutput()
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})
                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    # MSP MUlti Tab Tesing
    elif type == "60":
        if request.GET.has_key("action"):
            print "MSP Inputs Service"
            # phase = request.session["ext_dict"]["ext_name"]
            request.session['user_type'] = "MSP-test"
            user_ios = request.session['user_ios'] = "msp-multitab"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"

            # main_data = {}
            request.session["ext_dict"] = {}
            request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")

            main_data = collections.OrderedDict()
            request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
            data = MSP_PlanData(request.session["ext_dict"]["ext_name"])
            response_data = data.get_response_data()

            response_data2 = {'column': '12', 'newline': 'yes', 'inputs': [
                {'hide': 'hide', 'name': 'zscale2_project', 'default1': '', 'rhide': 'hide',
                 'extraclass': 'color-black', 'type': 'hidden', 'desc': 'Green Field Prject'},
                {'hide': 'hide', 'name': 'z1_project', 'default1': '', 'rhide': 'hide',
                 'extraclass': 'color-black', 'type': 'text', 'desc': 'Green Field Prject'},
                {'hide': 'hide', 'name': 'z1_project', 'default1': '', 'rhide': 'hide',
                 'extraclass': 'color-black', 'type': 'text', 'desc': 'Field Prject'},

                {'desc': 'Business Objectives', 'hide': 'hide',
                 'name': 'bi2_objectives', 'send': 'yes', 'length': 'full', 'trigger': [''], 'default1': '',
                 'type': 'dropdown', 'options': [{'send': 'no', 'value': 'Operational and Cost Efficiencies',
                                                           'label': 'Operational and Cost Efficiencies'},
                                                          {'send': 'no', 'value': 'Better Business Focus',
                                                           'label': 'Better Business Focus'},
                                                          {'send': 'no', 'value': 'Compliance and Risk Mitigation',
                                                           'label': 'Compliance and Risk Mitigation'},
                                                          {'send': 'no', 'value': 'Customer Satisfaction CSATs',
                                                           'label': 'Customer Satisfaction CSATs'},
                                                          {'send': 'no', 'value': 'Cost-saving and easier Budgeting',
                                                           'label': 'Cost-saving and easier Budgeting'},
                                                          {'send': 'no', 'value': 'Lower total cost of ownership',
                                                           'label': 'Lower total cost of ownership'},
                                                          {'send': 'no', 'value': 'Improving/optimizing IT',
                                                           'label': 'Improving/optimizing IT'},
                                                          {'send': 'no', 'value': 'Streamline and simplify IT',
                                                           'label': 'Streamline and simplify IT'}, {'send': 'no',
                                                                                                    'value': 'Operational flexibility and scalability',
                                                                                                    'label': 'Operational flexibility and scalability'},
                                                          {'send': 'no',
                                                           'value': 'Predictive analytics & data management',
                                                           'label': 'Predictive analytics & data management'},
                                                          {'send': 'no', 'value': 'Future-proof your infrastructure',
                                                           'label': 'Future-proof your infrastructure'},
                                                          {'send': 'no', 'value': 'Ready infrastructure',
                                                           'label': 'Ready infrastructure'},
                                                          {'send': 'no', 'value': 'Workforce agility',
                                                           'label': 'Workforce agility'}, {'send': 'no',
                                                                                           'value': 'Innovative technologies and practices',
                                                                                           'label': 'Innovative technologies and practices'},
                                                          {'send': 'no',
                                                           'value': 'Proactive Support and Quick Response time',
                                                           'label': 'Proactive Support and Quick Response time'},
                                                          {'send': 'no', 'value': 'Customer Satisfaction CSATs',
                                                           'label': 'Customer Satisfaction CSATs'},
                                                          {'send': 'no', 'value': 'Supporting the business 24/7',
                                                           'label': 'Supporting the business 24/7'}]}
            ]
                             }

            main_data["Plan"] = response_data
            main_data["Design"] = response_data2
            main_data["opflag"] = 3

            return HttpResponse(json.dumps(main_data), content_type="application/json")

    # Application Option

    elif type == "49":
        response_data = {}
        response_data["inputs"] = []
        file_name = './mysite/Json_DATA/msp_base_settings.json'
        inp1 = {"name": "msp_settings", "send": "yes", "format": "default1", "desc": "Switch Cost",
                "default1": "", "type": "hidden", "options": "", "length": "full", }
        response_data["inputs"].append(inp1)
        # msp_data=""
        with open(file_name, 'r') as f:
            msp_data = json.loads(f.read())
            inp1 = {"label": "Operating Cost", "type": "line", "border": "yes"}
            response_data["inputs"].append(inp1)
            # inp1 = {"type": "hline","newline": 'yes' }
            # response_data["inputs"].append(inp1)
            inp1 = {"name": "switch_cost", "send": "yes", "format": "default1", "desc": "Switch Cost",
                    "default1": msp_data["switches"], "type": "text", "options": "", "length": "full", }

            response_data["inputs"].append(inp1)
            inp1 = {"name": "router_cost", "send": "yes", "format": "default1", "desc": "Router cost",
                    "default1": msp_data["router"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "firewall_cost", "send": "yes", "format": "default1", "desc": "Firewall Cost",
                    "default1": msp_data["firewall"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "access_point", "send": "yes", "format": "default1", "desc": "Access Point",
                    "default1": msp_data["access_point"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "load_balancer", "send": "yes", "format": "default1", "desc": "Loadbalancer",
                    "default1": msp_data["loadbalancer"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "server_1", "send": "yes", "format": "default1", "desc": "Server",
                    "default1": msp_data["server"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)

            inp1 = {"name": "industry_statndard", "send": "yes", "format": "default1",
                    "desc": "Operating Industry Statndard",
                    "default1": msp_data["cost_industry_std"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"label": "Service label Agrement ", "type": "line", "border": "yes"}
            # response_data["inputs"].append(inp1)
            response_data["inputs"].append(inp1)
            inp1 = {"name": "p1_Incident", "send": "yes", "format": "default1", "desc": "P1 Incident",
                    "default1": msp_data['incident_sla']["p1"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "p2_Incident", "send": "yes", "format": "default1", "desc": "P2 Incident",
                    "default1": msp_data['incident_sla']["p2"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "p3_Incident", "send": "yes", "format": "default1", "desc": "P3 Incident",
                    "default1": msp_data['incident_sla']["p3"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            # inp1 = {"name": "p3_Incident", "send": "yes", "format": "default1", "desc": "P3 Incident",
            #         "default1": "", "type": "text", "options": "", "length": "full", }
            # response_data["inputs"].append(inp1)
            inp1 = {"name": "incidentsla_industry_standard", "send": "yes", "format": "default1",
                    "desc": "Incident SLA Industry Standard",
                    "default1": msp_data["inc_sla_industry_std"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "p1_service_request", "send": "yes", "format": "default1", "desc": "P1 Service Request",
                    "default1": msp_data['service_request_sla']["p1"], "type": "text", "options": "",
                    "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "p2_service_request", "send": "yes", "format": "default1", "desc": "P2 Service Request",
                    "default1": msp_data['service_request_sla']["p2"], "type": "text", "options": "",
                    "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "p3_service_request", "send": "yes", "format": "default1", "desc": "P3 Service Request",
                    "default1": msp_data['service_request_sla']["p3"], "type": "text", "options": "",
                    "length": "full", }
            response_data["inputs"].append(inp1)
            inp1 = {"name": "sr_sal_industry_standard", "send": "yes", "format": "default1",
                    "desc": "SR SLA Industry Standard",
                    "default1": msp_data["sr_sla_industry_std"], "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)

            inp1 = {"name": "Incident Initial Response SLA", "send": "yes", "format": "default1",
                    "desc": "Incident Initial Response SLA (in minutes)",
                    "default1": "", "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)

            inp1 = {"name": "Service Request Response SLA", "send": "yes", "format": "default1",
                    "desc": "Service Request Response SLA (in minutes)",
                    "default1": "", "type": "text", "options": "", "length": "full", }
            response_data["inputs"].append(inp1)

            # for k,v in msp_data.iteritems():
            #     if  k=="switch_cost":
            #     # if k ==response_data["inputs"][0]["name"]:
            #     #     print "match"
            #
            #
            #         inp1 = {"name": "switch_cost", "send": "yes", "format": "default1", "desc": "Switch Cost",
            #                     "default1": v, "type": "text", "options": "", "length": "full", }
            #
            #         response_data["inputs"].append(inp1)
            #     if k=="router_cost":
            #         inp1 = {"name": "router_cost", "send": "yes", "format": "default1", "desc": "Router cost",
            #                 "default1": v, "type": "text", "options": "", "length": "full", }
            #         response_data["inputs"].append(inp1)
            #
            #     if k=="firewall_cost":
            #         inp1 = {"name": "firewall_cost", "send": "yes", "format": "default1", "desc": "Firewall Cost",
            #                 "default1": v, "type": "text", "options": "", "length": "full", }
            #         response_data["inputs"].append(inp1)
        # response_data["inputs"].append(inp1)
        print response_data["inputs"][0]["name"]
        # inp1 = {"name": "region", "send": "yes", "format": "default1", "desc": "Region",
        #         "default1": "", "type": "dropdown", "length": "full",
        #         "options": [{"value": "North_America", "label": "North America"},
        #                     {"value": "EMEA", "label": "EMEA"},
        #                     {"value": "apac", "label": "APAC"},
        #                     {"value": "latam", "label": " LATAM"}]}
        # response_data["inputs"].append(inp1)
        # option = ["100", "250", "500", "1000", "1500", "2000", "2500", "3000", "4000", "5000", "6000", "7000"]
        # site_options = []
        # for each in option:
        #     dic = {}
        #     dic["label"] = each
        #     dic["value"] = each
        #     site_options.append(dic)
        # inp1 = {"name": "site_space", "send": "yes", "format": "default1", "desc": "Site Space",
        #         "default1": "", "type": "dropdown", "length": "full",
        #         "options": site_options}
        # response_data["inputs"].append(inp1)
        # option1 = ["10MB", "20MB", "30MB", "40MB", "50MB", "60MB", "70MB", "80MB", "90MB", "100MB", "150MB", "200MB",
        #            "250MB", "300MB"]
        # bandwidth_options = []
        # for each in option1:
        #     dic = {}
        #     dic["label"] = each
        #     dic["value"] = each
        #     bandwidth_options.append(dic)
        # inp1 = {"name": "bandwidth", "send": "yes", "format": "default1", "desc": "Bandwidth",
        #         "default1": "", "type": "dropdown", "length": "full",
        #         "options": bandwidth_options}
        # response_data["inputs"].append(inp1)
        # inp1 = {"name": "lsa_expectation", "send": "yes", "format": "default1", "desc": "LSA Expectation",
        #         "default1": "", "type": "text", "options": "", "length": "full", }
        # response_data["inputs"].append(inp1)
        # option2 = ["10", "25", "50", "75", "100", "200", "300", "400", "500", "750", "1000", "1500", "2000"]
        # user_options = []
        # for each in option2:
        #     dic = {}
        #     dic["label"] = each
        #     dic["value"] = each
        #     user_options.append(dic)
        # inp1 = {"name": "no_users", "send": "yes", "format": "default1", "desc": "Estimated No. Of Users",
        #         "default1": "", "type": "dropdown", "length": "full",
        #         "options": user_options}
        # response_data["inputs"].append(inp1)
        response_data["opflag"] = 1
        return HttpResponse(json.dumps(response_data), content_type="application/json")

    elif type == "48":
        if request.GET.has_key("action"):
            print "Application"
            # phase = request.session["ext_dict"]["ext_name"]
            request.session['user_type'] = "APPLICATION"
            user_ios = request.session['user_ios'] = "application"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1278")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])

            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":

                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                phase = request.session["ext_dict"]["ext_name"]
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid, ).update(
                            selectedvalue=5,
                            customer=request.GET.get('customer'),
                            reponsedictionary=json.dumps(input_dict))
                        # q1.save()
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=5,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()

                    if request.GET.get('applic_name') == "new_app_name":
                        f = open('./mysite/Json_DATA/application_option.json', )
                        data = json.load(f)

                        new_app_dict = {
                            request.GET.get('application_name'): {
                                "type": [],
                                "main_componets": [],
                                "requirements": [],
                                "security_requirements": [],
                                "server_requirements": ["Internet_Access"],
                                "client_requirements": []

                            }
                        }
                        data.update(new_app_dict)

                        with open('./mysite/Json_DATA/application_option.json',
                                  'w') as json_data:
                            json.dump(data, json_data)
                    if fabrictype == "sda":
                        if request.GET.get('applic_name') == "new_app_name":
                            forword_dict = {'app_name': request.GET.get('applic_name'),
                                            "new_application_name": request.GET.get('application_name')}
                        else:
                            forword_dict = {'app_name': request.GET.get('applic_name')}
                        data = Application_PlanData(request.session["ext_dict"]["ext_name"], forword_dict)
                        # print data,">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                        app_iname = {'app_name': request.GET.get('application_name')}
                        print app_iname, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>hi"
                    response_data = data.get_response_data()
                    # print response_data
                    response_data["opflag"] = 1

                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                # print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    print " Im m here n SDA green Field "
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:
                            # print each

                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    print input["name"], ">>>", input["type"], ">>>", chk_vl
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        # print " DropdownCheck boxd entry"
                                        if user_db_Flag:
                                            print input["name"], ">>>", chk_vl
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ">>>>>>>>>", ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele and input["type"] == "checkbox":
                                                    opt["checked"] = "checked"
                                                elif opt.get("value") == ele and input["type"] == "dropdown-checkbox":
                                                    opt["selected"] = "yes"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                    # if request.GET.get("project_phase") in ["Checklist"]:
                    #     print "IN >>>> Green Field Configuration Configuration "
                    #     q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                    #                                                                    subtaskid= request.session['subtaskid']).all()
                    #     response_data = {}
                    #     for e_tuple in q:
                    #         key = e_tuple[0]
                    #         val = e_tuple[1]
                    #         if "[" in val:
                    #             val = json.loads(val)
                    #         else:
                    #             val=str(val)
                    #         # if isinstance(val, str):
                    #         #     print "------>>>", key, val
                    #
                    #         if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                    #             if "," in val:
                    #                 val = val.split(",")[0]
                    #             ip = IPNetwork(val)
                    #             response_data[key + '_ml'] = ip.prefixlen
                    #             response_data[key+'_host'] = str(ip.ip)
                    #             response_data[key+'_policy'] = str(ip.ip).replace(".", "_")
                    #             response_data[key+'_subnet'] = str(ip.cidr).replace("/"+str(response_data[key + '_ml']), '')
                    #             response_data[key+'_host_gw'] = str(IPAddress(response_data[key+'_subnet'])+1)
                    #             response_data[key+'_mask'] = str(ip.netmask)
                    #             response_data[key+'_wmask'] = str(ip.hostmask)
                    #         response_data[key] = val
                    #     # print response_data
                    #     # pres_output = [{'Configuration': []}]
                    #     sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'], 'tech': request.session['user_tech'], 'type': request.session['user_type'],
                    # 'user_name': "", 'customer': customer}
                    #     test_flag = True
                    #     if test_flag:
                    #         set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                    #                                           request.session["ext_dict"])
                    #         result = set_inputs_to_db.overwriteTlDb()
                    #     data = ReadTemplateDb(sel_para, request.session['user_type'], customer, request.session["ext_dict"])
                    #     inputs = data.getInputsFromDb()
                    #     input_list = inputs.split(' ')
                    #     user_data = {}
                    #     # print "###", input_list
                    #     for el in input_list:
                    #         # print el
                    #         if response_data.get(el):
                    #             # print ">>", response_data.get(el)
                    #             temp_str = response_data.get(el)
                    #             if isinstance(temp_str, list):
                    #                 temp_str = ','.join(temp_str)
                    #             else:
                    #                 temp_str = ' '.join(temp_str.split())
                    #             temp_str = re.sub(r"\s+$", ' ', temp_str)
                    #             user_data[el] = temp_str
                    #         else:
                    #             value = "<%s>" % el
                    #             user_data[el] = value
                    #     # print user_data
                    #     new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                    #     # print "+=======", new_user_dict
                    #     modified_output = data.convet_template_to_config(request, new_user_dict)
                    #     glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                    #     questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                    #     questionnaire_output = modified_output + questionnaire_output
                    #     pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                    #     pres_output = sorted(pres.getModTemplateOutput())
                    #     for e_press_dict in pres_output:
                    #         if "Implementation Plan" in e_press_dict:
                    #             pres_output.remove(e_press_dict)
                    #     return render(request, 'temaplate_output_tabs.html',{'output_list': pres_output, "var_flag": "1"})
                    if request.GET.get("project_phase") in ["Verification"]:
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                                val = ",".join(val)
                            else:
                                val = str(val)
                            response_data[key] = val
                        outputlist = []
                        table_data = {
                            "data_center": {
                                "App Server": {"ip_add": response_data['APP_Server_VIP_IP'], "status": "Passed"},
                                "Database Server": {"ip_add": response_data['DB_Server_IP'], "status": "Passed"},
                                "VoIP Server": {"ip_add": response_data['voip_servers'], "status": "Failed"}},
                            "core_network": {"Clinical Devices": {"ip_add": response_data['clinical_devices_subnet'],
                                                                  "status": "Passed"},
                                             "Nursing Stations": {"ip_add": response_data['nursing_station_subnet'],
                                                                  "status": "Passed"},
                                             "Nursing Users": {"ip_add": response_data['Client_subnet'],
                                                               "status": "Passed"}},
                            "application_flow": {"Nursing Station": {"ip_add": "App Server", "status": "Passed"},
                                                 "Database Server": {"ip_add": response_data['clinical_devices_subnet'],
                                                                     "status": "Passed"},
                                                 "VoIP Server": {"ip_add": response_data['Client_subnet'],
                                                                 "status": "Failed"}}
                        }

                        return render(request, 'application_verification.html',
                                      {'output_list': outputlist, "table_data": table_data, 'passed': 5, 'failed': 2})
                        # return render(request, 'application_verification.html',
                        #               {'output_list': outputlist, "table_data": table_data})

                    if request.GET.get("project_phase") in ["Configuration"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_host'] = str(ip.ip)
                                response_data[key + '_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_host_gw'] = str(IPAddress(response_data[key + '_subnet']) + 1)
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        # print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = sorted(pres.getModTemplateOutput())
                        for e_press_dict in pres_output:
                            if "Implementation Plan" in e_press_dict:
                                pres_output.remove(e_press_dict)
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})

                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                    if request.GET.get("project_phase") in ["Configuration_Underlay_Automation"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_ip'] = str(ip.ip)
                                response_data[key + '_ip_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_ip_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = pres.getModTemplateOutput()
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})
                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})



    elif type == "41":
        if request.GET.has_key("action"):
            print "Mscale Inputs Service"
            # phase = request.session["ext_dict"]["ext_name"]
            phase = request.GET.get("action")
            request.session['user_type'] = "Mscale"
            user_ios = request.session['user_ios'] = "mscale"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1272")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])

            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":

                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                phase = request.session["ext_dict"]["ext_name"]
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid, ).update(
                            selectedvalue=2,
                            customer=request.GET.get('customer'),
                            reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=2,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        data = mscale_PlanData(request.session["ext_dict"]["ext_name"])
                    elif fabrictype == "non_sda":
                        data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    print " Im m here n SDA green Field "
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:

                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    print input["name"], ">>>", input["type"], ">>>", chk_vl
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        # print " DropdownCheck boxd entry"
                                        if user_db_Flag:
                                            print input["name"], ">>>", chk_vl
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ">>>>>>>>>", ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele and input["type"] == "checkbox":
                                                    opt["checked"] = "checked"
                                                elif opt.get("value") == ele and input["type"] == "dropdown-checkbox":
                                                    opt["selected"] = "yes"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                    # if request.GET.get("project_phase") in ["Checklist"]:
                    #     print "IN >>>> Green Field Configuration Configuration "
                    #     q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                    #                                                                    subtaskid= request.session['subtaskid']).all()
                    #     response_data = {}
                    #     for e_tuple in q:
                    #         key = e_tuple[0]
                    #         val = e_tuple[1]
                    #         if "[" in val:
                    #             val = json.loads(val)
                    #         else:
                    #             val=str(val)
                    #         # if isinstance(val, str):
                    #         #     print "------>>>", key, val
                    #
                    #         if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                    #             if "," in val:
                    #                 val = val.split(",")[0]
                    #             ip = IPNetwork(val)
                    #             response_data[key + '_ml'] = ip.prefixlen
                    #             response_data[key+'_host'] = str(ip.ip)
                    #             response_data[key+'_policy'] = str(ip.ip).replace(".", "_")
                    #             response_data[key+'_subnet'] = str(ip.cidr).replace("/"+str(response_data[key + '_ml']), '')
                    #             response_data[key+'_host_gw'] = str(IPAddress(response_data[key+'_subnet'])+1)
                    #             response_data[key+'_mask'] = str(ip.netmask)
                    #             response_data[key+'_wmask'] = str(ip.hostmask)
                    #         response_data[key] = val
                    #     # print response_data
                    #     # pres_output = [{'Configuration': []}]
                    #     sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'], 'tech': request.session['user_tech'], 'type': request.session['user_type'],
                    # 'user_name': "", 'customer': customer}
                    #     test_flag = True
                    #     if test_flag:
                    #         set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                    #                                           request.session["ext_dict"])
                    #         result = set_inputs_to_db.overwriteTlDb()
                    #     data = ReadTemplateDb(sel_para, request.session['user_type'], customer, request.session["ext_dict"])
                    #     inputs = data.getInputsFromDb()
                    #     input_list = inputs.split(' ')
                    #     user_data = {}
                    #     # print "###", input_list
                    #     for el in input_list:
                    #         # print el
                    #         if response_data.get(el):
                    #             # print ">>", response_data.get(el)
                    #             temp_str = response_data.get(el)
                    #             if isinstance(temp_str, list):
                    #                 temp_str = ','.join(temp_str)
                    #             else:
                    #                 temp_str = ' '.join(temp_str.split())
                    #             temp_str = re.sub(r"\s+$", ' ', temp_str)
                    #             user_data[el] = temp_str
                    #         else:
                    #             value = "<%s>" % el
                    #             user_data[el] = value
                    #     # print user_data
                    #     new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                    #     # print "+=======", new_user_dict
                    #     modified_output = data.convet_template_to_config(request, new_user_dict)
                    #     glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                    #     questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                    #     questionnaire_output = modified_output + questionnaire_output
                    #     pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                    #     pres_output = sorted(pres.getModTemplateOutput())
                    #     for e_press_dict in pres_output:
                    #         if "Implementation Plan" in e_press_dict:
                    #             pres_output.remove(e_press_dict)
                    #     return render(request, 'temaplate_output_tabs.html',{'output_list': pres_output, "var_flag": "1"})
                    if request.GET.get("project_phase") in ["Configuration"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_host'] = str(ip.ip)
                                response_data[key + '_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_host_gw'] = str(IPAddress(response_data[key + '_subnet']) + 1)
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        # print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = sorted(pres.getModTemplateOutput())
                        for e_press_dict in pres_output:
                            if "Implementation Plan" in e_press_dict:
                                pres_output.remove(e_press_dict)
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})

                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                    if request.GET.get("project_phase") in ["Configuration_Underlay_Automation"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_ip'] = str(ip.ip)
                                response_data[key + '_ip_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_ip_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = pres.getModTemplateOutput()
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})
                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    elif type == "42":
        if request.GET.has_key("action"):
            print "Mscale2 Inputs Service"
            # phase = request.session["ext_dict"]["ext_name"]
            request.session['user_type'] = "Mscale2"
            user_ios = request.session['user_ios'] = "mscale2"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1273")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])

            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            phase = request.GET.get("action")
            request.session["fabrictype"] = fabrictype
            for el in request.GET:
                print el
                if "[" in el and "CustomerType" in el:
                    customer_type = request.GET.getlist(el)
            if not customer_type:
                customer_type = []
            if request.GET.get("action") == "add":

                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                phase = request.session["ext_dict"]["ext_name"]
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  subtaskid=subtaskid).last()
                    if entry:
                        print "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid, ).update(
                            selectedvalue=2,
                            customer=request.GET.get('customer'),
                            reponsedictionary=json.dumps(input_dict))
                    else:
                        print "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=2,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()
                    if fabrictype == "sda":
                        data = Mscale2_PlanData(request.session["ext_dict"]["ext_name"], customer_type)
                    elif fabrictype == "non_sda":
                        data = GreenFieldCampus_nonSDA(request.session["ext_dict"]["ext_name"])
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            if request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                print request.GET.get("project_phase")
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    print " Im m here n SDA green Field "
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:

                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                #                                                       subtaskid=request.session[
                                #                                                           'subtaskid'],
                                #                                                       customer=request.session[
                                #                                                           'customer']).last()
                                # if q1:
                                #     db_inputs = json.loads(q1[0])
                                #     if db_inputs.has_key(input["name"]):
                                #         q = db_inputs.get(input["name"])
                                #     else:
                                #         user_db_Flag = True
                                #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                #             taskid=project_no,
                                #             subtaskid=request.session['subtaskid'],
                                #             field_name=input["name"]).last()
                                # else:
                                #     user_db_Flag = True
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    print input["name"], ">>>", input["type"], ">>>", chk_vl
                                    if input["type"] == "checkbox" or input["type"] == "dropdown-checkbox":
                                        # print " DropdownCheck boxd entry"
                                        if user_db_Flag:
                                            print input["name"], ">>>", chk_vl
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ">>>>>>>>>", ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele and input["type"] == "checkbox":
                                                    opt["checked"] = "checked"
                                                elif opt.get("value") == ele and input["type"] == "dropdown-checkbox":
                                                    opt["selected"] = "yes"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    # q1 = CronDB.objects.values_list("inputs_list").filter(taskid=project_no,
                                    #                                                       subtaskid=request.session[
                                    #                                                           'subtaskid'],
                                    #                                                       customer=request.session[
                                    #                                                           'customer']).last()
                                    # if q1:
                                    #
                                    #     db_inputs = json.loads(q1[0])
                                    #     if db_inputs.has_key(input2["name"]):
                                    #         # print input2["name"], " --- From Cron DB"
                                    #         q = db_inputs.get(input2["name"])
                                    #         # print q
                                    #     else:
                                    #         print input2["name"], " --- From User Input  DB"
                                    #         q = UserInputValueDb.objects.values_list("field_value").filter(
                                    #             taskid=project_no,
                                    #             subtaskid=request.session['subtaskid'],
                                    #             field_name=input["name"]).last()
                                    # else:
                                    #     # print input2["name"], " --- From User Input  DB"
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                    # if request.GET.get("project_phase") in ["Checklist"]:
                    #     print "IN >>>> Green Field Configuration Configuration "
                    #     q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                    #                                                                    subtaskid= request.session['subtaskid']).all()
                    #     response_data = {}
                    #     for e_tuple in q:
                    #         key = e_tuple[0]
                    #         val = e_tuple[1]
                    #         if "[" in val:
                    #             val = json.loads(val)
                    #         else:
                    #             val=str(val)
                    #         # if isinstance(val, str):
                    #         #     print "------>>>", key, val
                    #
                    #         if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                    #             if "," in val:
                    #                 val = val.split(",")[0]
                    #             ip = IPNetwork(val)
                    #             response_data[key + '_ml'] = ip.prefixlen
                    #             response_data[key+'_host'] = str(ip.ip)
                    #             response_data[key+'_policy'] = str(ip.ip).replace(".", "_")
                    #             response_data[key+'_subnet'] = str(ip.cidr).replace("/"+str(response_data[key + '_ml']), '')
                    #             response_data[key+'_host_gw'] = str(IPAddress(response_data[key+'_subnet'])+1)
                    #             response_data[key+'_mask'] = str(ip.netmask)
                    #             response_data[key+'_wmask'] = str(ip.hostmask)
                    #         response_data[key] = val
                    #     # print response_data
                    #     # pres_output = [{'Configuration': []}]
                    #     sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'], 'tech': request.session['user_tech'], 'type': request.session['user_type'],
                    # 'user_name': "", 'customer': customer}
                    #     test_flag = True
                    #     if test_flag:
                    #         set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                    #                                           request.session["ext_dict"])
                    #         result = set_inputs_to_db.overwriteTlDb()
                    #     data = ReadTemplateDb(sel_para, request.session['user_type'], customer, request.session["ext_dict"])
                    #     inputs = data.getInputsFromDb()
                    #     input_list = inputs.split(' ')
                    #     user_data = {}
                    #     # print "###", input_list
                    #     for el in input_list:
                    #         # print el
                    #         if response_data.get(el):
                    #             # print ">>", response_data.get(el)
                    #             temp_str = response_data.get(el)
                    #             if isinstance(temp_str, list):
                    #                 temp_str = ','.join(temp_str)
                    #             else:
                    #                 temp_str = ' '.join(temp_str.split())
                    #             temp_str = re.sub(r"\s+$", ' ', temp_str)
                    #             user_data[el] = temp_str
                    #         else:
                    #             value = "<%s>" % el
                    #             user_data[el] = value
                    #     # print user_data
                    #     new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                    #     # print "+=======", new_user_dict
                    #     modified_output = data.convet_template_to_config(request, new_user_dict)
                    #     glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                    #     questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                    #     questionnaire_output = modified_output + questionnaire_output
                    #     pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                    #     pres_output = sorted(pres.getModTemplateOutput())
                    #     for e_press_dict in pres_output:
                    #         if "Implementation Plan" in e_press_dict:
                    #             pres_output.remove(e_press_dict)
                    #     return render(request, 'temaplate_output_tabs.html',{'output_list': pres_output, "var_flag": "1"})
                    if request.GET.get("project_phase") in ["Configuration"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_host'] = str(ip.ip)
                                response_data[key + '_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_host_gw'] = str(IPAddress(response_data[key + '_subnet']) + 1)
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        # print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = sorted(pres.getModTemplateOutput())
                        for e_press_dict in pres_output:
                            if "Implementation Plan" in e_press_dict:
                                pres_output.remove(e_press_dict)
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})

                    if request.GET.get("project_phase") in ["Discovery"]:
                        overwrite_flag = request.GET.get('overwrite_project')
                        return render(request, 'brownfield_design_dropzone.html',
                                      {'taskid': taskid, 'subtaskid': subtaskid,
                                       'customer': request.session["customer"],
                                       'type': phase, "overwrite": overwrite_flag})
                    if request.GET.get("project_phase") in ["Configuration_Underlay_Automation"]:
                        print "IN >>>> Green Field Configuration Configuration "
                        q = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=project_no,
                                                                                                     subtaskid=
                                                                                                     request.session[
                                                                                                         'subtaskid']).all()
                        response_data = {}
                        for e_tuple in q:
                            key = e_tuple[0]
                            val = e_tuple[1]
                            if "[" in val:
                                val = json.loads(val)
                            else:
                                val = str(val)
                            # if isinstance(val, str):
                            #     print "------>>>", key, val

                            if isinstance(val, str) and re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d+', val):
                                if "," in val:
                                    val = val.split(",")[0]
                                ip = IPNetwork(val)
                                response_data[key + '_ml'] = ip.prefixlen
                                response_data[key + '_ip'] = str(ip.ip)
                                response_data[key + '_ip_policy'] = str(ip.ip).replace(".", "_")
                                response_data[key + '_ip_subnet'] = str(ip.cidr).replace(
                                    "/" + str(response_data[key + '_ml']), '')
                                response_data[key + '_mask'] = str(ip.netmask)
                                response_data[key + '_wmask'] = str(ip.hostmask)
                            response_data[key] = val
                        print response_data
                        # pres_output = [{'Configuration': []}]
                        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                                    'user_name': "", 'customer': customer}
                        test_flag = True
                        if test_flag:
                            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                                              request.session["ext_dict"])
                            result = set_inputs_to_db.overwriteTlDb()
                        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
                        inputs = data.getInputsFromDb()
                        input_list = inputs.split(' ')
                        user_data = {}
                        # print "###", input_list
                        for el in input_list:
                            # print el
                            if response_data.get(el):
                                # print ">>", response_data.get(el)
                                temp_str = response_data.get(el)
                                if isinstance(temp_str, list):
                                    temp_str = ','.join(temp_str)
                                else:
                                    temp_str = ' '.join(temp_str.split())
                                temp_str = re.sub(r"\s+$", ' ', temp_str)
                                user_data[el] = temp_str
                            else:
                                value = "<%s>" % el
                                user_data[el] = value
                        # print user_data
                        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
                        # print "+=======", new_user_dict
                        modified_output = data.convet_template_to_config(request, new_user_dict)
                        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
                        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
                        questionnaire_output = modified_output + questionnaire_output
                        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
                        pres_output = pres.getModTemplateOutput()
                        return render(request, 'temaplate_output_tabs.html',
                                      {'output_list': pres_output, "var_flag": "1"})
                response["opflag"] = 1
                # print response
                return HttpResponse(json.dumps(response), content_type="application/json")
            if request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                current_user = request.user
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=2,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    # GreenField Bulk Upload
    elif type == "21":
        action = request.GET.get('action')
        project_no = request.GET.get('project_no')
        customer = request.session['customer']
        print "Customer >>> ", request.session['customer']
        print "location >>> ", project_no
        print "action >>> ", action
        return render(request, 'parameter_bulk_dropzone.html',
                      {'action': action, 'project_no': project_no, 'customer': customer, 'upload_type': "greenfield"})
    # Brown Field Campus Design
    elif type == "17":
        if request.GET.has_key("action"):
            request.session['user_type'] = "Brown Field Campus Design"
            user_ios = request.session['user_ios'] = "brownfield"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1235")
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])
            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            request.session["fabrictype"] = fabrictype = "sda"
            # request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  selectedvalue=3).last()
                    if entry:
                        print  "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid,
                                                             selectedvalue=3).update(
                            customer=request.GET.get('customer'), reponsedictionary=json.dumps(input_dict))
                    else:
                        print  "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=3,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()

                    if fabrictype == "sda":
                        data = BrownFieldCampus_SDA_Data(request.session["ext_dict"]["ext_name"])
                    elif fabrictype == "non_sda":
                        data = BrownFieldCampus_NON_SDA_Data(request.session["ext_dict"]["ext_name"])
                    # data = BrownFieldCampus_PlanData()
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            elif request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    if request.GET.get("project_phase") in ["Plan", "Design", "Checklist"]:
                        for each in response["inputs"]:
                            # print each
                            # print "________________________________________________________________"
                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    # print chk_vl, user_db_Flag
                                    if input["type"] == "checkbox":
                                        if user_db_Flag:
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele:
                                                    opt["checked"] = "checked"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                # print "________________________________________________________________"
                                # print each
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                        response["opflag"] = 1
                        # print response
                        return HttpResponse(json.dumps(response), content_type="application/json")
                    if request.GET.get("project_phase") == "Discovery":
                        response_data = {"column": "12", "newline": "yes"}
                        response_data["inputs"] = []
                        response_data["opflag"] = 1
                        inp1 = {"name": "overwrite", "desc": "Overwrite Entries",
                                'options': [{'label': "Yes", 'value': "yes"}, {'label': "No", 'value': "no"}],
                                "default1": "yes", "type": "radio"}
                        response_data["inputs"].append(inp1)
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    if request.GET.get("project_phase") == "Verification":
                        response_data = {"column": "12", "newline": "yes"}
                        response_data["inputs"] = []
                        response_data["opflag"] = 1
                        inp1 = {"name": "old_switch", "desc": "Old Switch Name", "default1": "", "type": "text"}
                        response_data["inputs"].append(inp1)
                        inp1 = {"name": "vlan_change", "desc": "Are VLAN same?",
                                'options': [{'label': "No", 'value': "no"},
                                            {'label': "Yes", 'value': "yes", 'hide': 'hide',
                                             "trigger": ["old_vlans", "new_vlan"]}],
                                "default1": "no", "type": "radio"}
                        response_data["inputs"].append(inp1)
                        inp1 = {"name": "old_vlans", "desc": "Old VLANs", "default1": "", "type": "text"}
                        response_data["inputs"].append(inp1)
                        inp1 = {"name": "new_vlan", "desc": "New VLANs", "default1": "", "type": "text"}
                        response_data["inputs"].append(inp1)
                        return HttpResponse(json.dumps(response_data), content_type="application/json")

                # print response
                response["opflag"] = 1
                return HttpResponse(json.dumps(response), content_type="application/json")
            elif request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid, selectedvalue=3).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid, selectedvalue=3).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=3,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})

    # Campus Dashboard
    elif type == "25":

        site = request.GET.get("site_id")
        device1 = request.GET.get("device_ip")
        if site:
            return render(request, 'chart_' + site + '.html', {'output_list': "", 'class': ''})

        elif device1:

            # get all list
            device = get_device_data(device1)
            vlan = device[0]
            count1 = device[1]
            rcount = device[2]
            print device
            print vlan

            # return render(request,'device_chart.html',{'output_list':"error",'class':''})
            return render(request, 'device_chart.html', {'vlan': vlan, 'count': count1, 'rcount': rcount})
            # return render(request,'device_chart2.html',{'output_list':"",'class':''})
    # Campus Dashboard2
    elif type == "26":
        op_type = request.GET.get('connection_type')
        ip = request.GET.get('device_ip1')
        username = "netadmin"
        password = "C1sco1234"
        if op_type == 'ssh':
            print " In Dashbort Option 2"
            data_dict = {}
            hrd_login = hardware_data(ip, username, password)
            hrd_login_status = hrd_login.get_login_status()
            print hrd_login_status
            if not hrd_login_status['login_flag']:
                platform = hrd_login.get_platform()
                print platform
                get_platform = platform[1]
                model_list = platform[0]
                inline_power = hrd_login.inline_power(get_platform)
                interface_status = hrd_login.Interface_status_function()
                proposed_hrd = proposed_hardware(inline_power, get_platform)
                data_dict['port_usage'] = interface_status
                data_dict['active_port_type'] = inline_power
                data_dict['existing_hw'] = model_list
                data_dict['proposed_hw'] = proposed_hrd
                p_usage = data_dict["port_usage"]
                a_port = data_dict["active_port_type"]
                ex_hw = data_dict["existing_hw"]
                p_hw = data_dict["proposed_hw"]
                cost1 = '200'
                p_design = ""

                return render(request, 'chart_campus2.html',
                              {'port_usage': p_usage, 'active_port_type': a_port, 'existing_hw': ex_hw,
                               'proposed_hw': p_hw, 'cost': cost1, 'proposed_design': p_design})
    # return render(request,'chart_campus2.html',{'output_list':"",'class':''})
    # Network Assurance

    elif type == "24":
        print "IN Network Assurance"
        if request.GET.has_key("action"):
            request.session['user_type'] = "Network Assurance"
            user_ios = request.session['user_ios'] = "network_assurance"
            request.session['user_plat'] = "na"
            request.session['user_tech'] = "na"
            user_sel = get_user_selection("1249")
            print "User IOS", user_ios
            output = CombinationsSubmittedTemplate(request, user_sel['user_ios'], user_sel['user_plat'],
                                                   user_sel['user_tech'], user_sel['tmplt_name'],
                                                   user_sel['tag'])
            request.session["ext_dict"] = {}
            fabrictype = request.GET.get("fabric_type")
            request.session["fabrictype"] = fabrictype
            if request.GET.get("action") == "add":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                subtaskid = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                print project_no
                if project_no != "":
                    entry = ServiceRequestDB.objects.values_list('taskid').filter(taskid=project_no,
                                                                                  selectedvalue=3).last()
                    if entry:
                        print  "in update entry "
                        q1 = ServiceRequestDB.objects.filter(taskid=project_no, subtaskid=subtaskid,
                                                             selectedvalue=3).update(
                            customer=request.GET.get('customer'), reponsedictionary=json.dumps(input_dict))
                    else:
                        print  "in insert entry  service "
                        # return  HttpResponse(json.dumps(input_dict), content_type="application/json")
                        q1 = ServiceRequestDB(taskid=project_no, subtaskid=subtaskid,
                                              customer=request.GET.get('customer'), selectedvalue=3,
                                              reponsedictionary=json.dumps(input_dict))
                        q1.save()

                    if fabrictype == "sda":
                        data = Network_assurance_SDA_data(request.session["ext_dict"]["ext_name"])
                    elif fabrictype == "non_sda":
                        data = Network_assurance_NON_SDA_Data(request.session["ext_dict"]["ext_name"])
                    # data = BrownFieldCampus_PlanData()
                    response_data = data.get_response_data()
                    response_data["opflag"] = 1
                    return HttpResponse(json.dumps(response_data), content_type="application/json")
                else:
                    output = " Please put a valid Project No."
                    return render(request, 'notification.html',
                                  {'output_list': output, 'class': 'alert-danger'})
            elif request.GET.get("action") == "modify":
                project_no = request.session['taskid'] = request.GET.get("project_no")
                request.session['subtaskid'] = "00"
                request.session["ext_dict"]["ext_name"] = request.GET.get("project_phase")
                if project_no != "":
                    user_plat = request.GET.get("project_phase")
                    response = LoadModifyTemplate(request, user_ios, request.session['user_plat'],
                                                  request.session['user_tech'])
                    if request.GET.get("project_phase") in ["Plan", "Design"]:
                        for each in response["inputs"]:
                            # print each
                            # print "________________________________________________________________"
                            user_db_Flag = False
                            if each.has_key("name"):
                                indx = response["inputs"].index(each)
                                input = each
                                response["inputs"].remove(each)
                                q = UserInputValueDb.objects.values_list("field_value").filter(taskid=project_no,
                                                                                               subtaskid=
                                                                                               request.session[
                                                                                                   'subtaskid'],
                                                                                               field_name=input[
                                                                                                   "name"]).last()
                                if q:
                                    user_db_Flag = True
                                    chk_vl = q[0]
                                    # print chk_vl, user_db_Flag
                                    if input["type"] == "checkbox":
                                        if user_db_Flag:
                                            chk_vl = json.loads(chk_vl)
                                        for ele in chk_vl:
                                            # print ele
                                            for opt in input["options"]:
                                                if opt.get("value") == ele:
                                                    opt["checked"] = "checked"
                                    else:
                                        input["default1"] = q[0]
                                    response["inputs"].insert(indx, input)
                                else:
                                    response["inputs"].insert(indx, input)
                            elif each.has_key("type") and each.get("type") == "oneline":
                                # print "________________________________________________________________"
                                # print each
                                for inp in each.get("data").get("inputs"):
                                    indx1 = response["inputs"].index(each)
                                    indx2 = each.get("data").get("inputs").index(inp)
                                    input1 = each
                                    input2 = inp
                                    response["inputs"].remove(each)
                                    each.get("data").get("inputs").remove(inp)
                                    q = UserInputValueDb.objects.values_list("field_value").filter(
                                        taskid=project_no,
                                        subtaskid=
                                        request.session[
                                            'subtaskid'],
                                        field_name=input2[
                                            "name"]).last()
                                    if q:
                                        input2["default1"] = q[0]
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                                        # print response
                                    else:
                                        each.get("data").get("inputs").insert(indx2, input2)
                                        response["inputs"].insert(indx1, input1)
                        response["opflag"] = 1
                        # print response
                        return HttpResponse(json.dumps(response), content_type="application/json")
                    if request.GET.get("project_phase") == "Discovery":
                        response_data = {"column": "12", "newline": "yes"}
                        response_data["inputs"] = []
                        response_data["opflag"] = 1
                        inp1 = {"name": "overwrite", "desc": "Overwrite Entries",
                                'options': [{'label': "Yes", 'value': "yes"}, {'label': "No", 'value': "no"}],
                                "default1": "yes", "type": "radio"}
                        response_data["inputs"].append(inp1)
                        return HttpResponse(json.dumps(response_data), content_type="application/json")
                    if request.GET.get("project_phase") == "Verification":
                        response_data = {"column": "12", "newline": "yes"}
                        response_data["inputs"] = []
                        response_data["opflag"] = 1
                        inp1 = {"name": "old_switch", "desc": "Old Switch Name", "default1": "", "type": "text"}
                        response_data["inputs"].append(inp1)
                        inp1 = {"name": "vlan_change", "desc": "Are VLAN same?",
                                'options': [{'label': "No", 'value': "no"},
                                            {'label': "Yes", 'value': "yes", 'hide': 'hide',
                                             "trigger": ["old_vlans", "new_vlan"]}],
                                "default1": "no", "type": "radio"}
                        response_data["inputs"].append(inp1)
                        inp1 = {"name": "old_vlans", "desc": "Old VLANs", "default1": "", "type": "text"}
                        response_data["inputs"].append(inp1)
                        inp1 = {"name": "new_vlan", "desc": "New VLANs", "default1": "", "type": "text"}
                        response_data["inputs"].append(inp1)
                        return HttpResponse(json.dumps(response_data), content_type="application/json")

                # print response
                response["opflag"] = 1
                return HttpResponse(json.dumps(response), content_type="application/json")
            elif request.GET.get("action") == "clone":
                taskid = request.GET.get('project_no')
                new_taskid = request.GET.get('new_project_no')
                e1 = ServiceRequestDB.objects.filter(taskid=new_taskid, selectedvalue=3).last()
                if e1:
                    output = "Service Request " + str(new_taskid) + " Already Exist "
                    return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                else:
                    entry = ServiceRequestDB.objects.values_list('subtaskid', 'customer', 'reponsedictionary').filter(
                        taskid=taskid, selectedvalue=3).last()
                    if entry:
                        print "Existing id "
                        x_subtaskid = entry[0]
                        x_costomer = entry[1]
                        x_respdict = json.loads(entry[2])

                        q1 = ServiceRequestDB(taskid=new_taskid, subtaskid=x_subtaskid, customer=x_costomer,
                                              selectedvalue=3,
                                              reponsedictionary=json.dumps(x_respdict))
                        q1.save()
                        if UserInputValueDb.objects.filter(taskid=taskid, subtaskid=request.session['subtaskid']).all():
                            q1 = UserInputValueDb.objects.values_list("field_name", "field_value").filter(taskid=taskid,
                                                                                                          subtaskid=
                                                                                                          request.session[
                                                                                                              'subtaskid']).all()
                            if q1:
                                for val in q1:
                                    if "[" in val[1]:
                                        fval = json.loads(val[1])
                                        field_value = json.dumps(fval)
                                    else:
                                        field_value = val[1]
                                    # print "val type",val[1]
                                    field_created = UserInputValueDb(taskid=new_taskid,
                                                                     subtaskid=request.session['subtaskid'],
                                                                     field_name=val[0],
                                                                     field_value=field_value,
                                                                     customer=request.session[
                                                                         'customer'])
                                    field_created.save()

                        output = "Service Request No. " + str(new_taskid) + " Successfully Cloned "
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
                    else:
                        output = "Service Request " + str(taskid) + " Does Not Exist. Please Create New."
                        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-danger'})
                        # output = " Project Clond Sucessfully"
                        # return render(request, 'notification.html',
                        #               {'output_list': output, 'class': 'alert-success'})
    # End-to-End Troubleshooting

    elif type == "13":
        if request.GET.has_key("tech") and request.GET.get("tech") != "":
            user_ios = "Enterprise-1"
            user_plat = "na"
            user_tech = request.GET.get("tech")
            if request.GET.get("area") == "user_options":
                template = "na"
            elif request.GET.get("template"):
                template = request.GET.get("template")
            else:
                template = "na"
            output = CombinationsSubmittedTemplate(request, user_ios, user_plat, user_tech, template)
            output["opflag"] = 1
            return HttpResponse(json.dumps(output), content_type="application/json")


    # Application Connectivity
    elif type == "50":
        output_list = {}
        app_url = request.GET.get("affected_app")
        available_ip_mac = request.GET.get("available_ip_or_mac")
        # src_ip = "100.127.100.231"
        src_ip = request.GET.get("affected_user")
        dest_ip = "10.1.1.45"
        # port = "23"
        pc_name = "cap13"

        # op = get_multi_data('100.127.100.231', '10.1.1.45', '23', 'cap13', 'GigabitEthernet1/0/9')
        # # Parameters
        # return render(request, 'notification.html', {'output_list': 'completed', 'class': 'alert-success'})
        #
        with open('./mysite/Json_DATA/Application_baseline.json', 'r') as data:
            App_data = json.load(data)
            for app, val_dict in App_data.iteritems():
                if app_url == app.lower():
                    dest_ip = val_dict['ip']
                    port = val_dict['ports']
                elif app_url == val_dict['ip']:
                    dest_ip = val_dict['ip']
                    port = val_dict['ports']
                elif app_url == val_dict['url']:
                    dest_ip = val_dict['ip']
                    port = val_dict['ports']
        #
        output_list['Refrence Design'] = []

        if src_ip == '100.127.101.1':
            return render(request, 'app_connectivity_vpn1.html',
                          {'output_list': output_list, 'src_ip': src_ip, 'dest_ip': dest_ip,
                           'port': port})  # {'output_list': output_list, 'colour_dict':colour_dict, 'info_list':info_list})
        elif src_ip == '100.127.101.2':
            return render(request, 'app_connectivity_vpn2.html',
                          {'output_list': output_list, 'src_ip': src_ip, 'dest_ip': dest_ip,
                           'port': port})  # {'output_list': output_list, 'colour_dict':colour_dict, 'info_list':info_list})
        elif src_ip == '100.127.100.3':
            return render(request, 'app_connectivity_vpn3.html',
                          {'output_list': output_list, 'src_ip': src_ip, 'dest_ip': dest_ip,
                           'port': port})  # {'output_list': output_list, 'colour_dict':colour_dict, 'info_list':info_list})
        elif src_ip == '100.127.100.2':
            return render(request, 'app_connectivity_direct_connect.html',
                          {'output_list': output_list, 'src_ip': src_ip, 'dest_ip': dest_ip,
                           'port': port})  # {'output_list': output_list, 'colour_dict':colour_dict, 'info_list':info_list})
        else:
            return render(request, 'App_connectivity_backup.html',
                          {'output_list': output_list, 'src_ip': src_ip, 'dest_ip': dest_ip,
                           'port': port})  # {'output_list': output_list, 'colour_dict':colour_dict, 'info_list':info_list})

    # Application Connectivity Settings
    elif type == "51":
        request.session['user_type'] = "Application_Connectivity_settings"
        user_ios = request.session['user_ios'] = "app_conn_settings"
        request.session['user_plat'] = "na"
        request.session['user_tech'] = "na"
        action = request.GET.get('action')
        app_name = request.GET.get('select_app_name')
        if action == 'Delete':
            f = open('./mysite/Json_DATA/Application_baseline.json', )
            data = json.load(f)
            if app_name in data:
                del data[app_name]
                # key.pop(app_name, None)

            f = open('./mysite/Json_DATA/Application_baseline.json', 'w')
            data = json.dump(data, f)
        # app_name = request.GET.get('select_app_name')
        app_settings = Application_settings(action, app_name)
        response_data = app_settings.get_response_data()
        response_data["opflag"] = 1
        request.session['input_response_data'] = response_data
        return HttpResponse(json.dumps(response_data), content_type="application/json")
    # Enterprise Firewall

    elif type == "14":
        if request.GET.has_key("service") and request.GET.get("service") != "":
            user_ios = "Enterprise_Firewalls"
            user_plat = "na"
            user_tech = "na"
            template = request.GET.get("service")
            output = CombinationsSubmittedTemplate(request, user_ios, user_plat, user_tech, template)
            output["opflag"] = 1
            return HttpResponse(json.dumps(output), content_type="application/json")
    # Query

    elif type == "15":
        m = re.search(r'(\d+\.\d+\.\d+\.\d+\.\d+)', request.GET.get("devices"))
        if m:
            apic_ip = m.group(1)
        else:
            apic_ip = "10.233.29.21"
        response_data = {}
        response_data["inputs"] = []
        inp1 = {"name": "apic_ip", "send": "yes", "format": "default1", "desc": "apic_ip",
                "default1": "", "type": "hidden"}
        response_data["inputs"].append(inp1)
        inp1 = {"name": "topolody_query", "send": "yes", "format": "default1", "desc": "apic_ip",
                "default1": "", "type": "hidden"}
        response_data["inputs"].append(inp1)
        inp1 = {"name": "parameter", "send": "yes", "format": "default1", "desc": "Parameter",
                "default1": "", "type": "dropdown",
                "options": [{"value": "tenant", "label": "Tenant"},
                            {"value": "app", "label": "Application", "trigger": ["tenant"]},
                            {"value": "epg", "label": "EPG", "hide": "hide", "trigger": ["tenant"]},
                            {"value": "bd", "disabled": "yes", "label": "Bridge Domain", "hide": "hide",
                             "trigger": ["tenant"]}]}
        response_data["inputs"].append(inp1)
        tenant_list = ["All"]
        tenant_list += get_apic_data().get("tenant")
        tnt_options = []
        for each in tenant_list:
            dic = {}
            dic["label"] = each
            dic["value"] = each
            tnt_options.append(dic)
        inp1 = {"name": "tenant", "send": "yes", "format": "default1", "desc": "Tenant",
                "default1": "", "type": "dropdown", "options": tnt_options}
        response_data["inputs"].append(inp1)
        response_data["opflag"] = 1
        return HttpResponse(json.dumps(response_data), content_type="application/json")
    # Discovery

    elif type == "16":
        filename = "/home/ubuntu/prepro/mysite/mysite/data/kaiser_apic_data/output_tenant.txt"
        ip = get_device_ip(request.GET.get('devices'))
        # print ip
        json_data = getjsonfromdata(ip, filename)
        with open('/home/ubuntu/prepro/mysite/mysite/data/kaiser_apic_data/apic_data.json', 'w') as data:
            json.dump(json_data, data)
        output = "APIC Topology Discovery Successful"
        return render(request, 'notification.html', {'output_list': output, 'class': 'alert-success'})
    # Parameters- Bulk

    elif type == "19":
        action = request.GET.get('actionsr')
        location = request.GET.get('location')
        customer = request.session['customer']
        print "Customer >>> ", request.session['customer']
        print "location >>> ", location
        print "action >>> ", action
        return render(request, 'parameter_bulk_dropzone.html',
                      {'action': action, 'location': location, 'customer': customer})
    # Parameters

    elif type == "11":
        from mysite.models import SetupParameters
        from mysite.models import CommonSetupParameters
        customer = request.session['customer']
        builtinsr = ""
        customizesr = ""
        labelsr = ""
        customcondsr = ""
        customcondvalsr = ""
        actionsr = request.GET.get("actionsr")
        paratype = request.GET.get("paratype")
        variablesr = request.GET.get("variablesr")
        vtypesr = request.GET.get("vtypesr")
        location = request.GET.get("location")
        valuesr = request.GET.get("valuesr")
        # if request.GET.get("vtypesr"):
        # vtypesr = request.GET.get("vtypesr")
        regexsr = request.GET.get("regexsr")
        regex = ""
        if request.GET.get("builtinsr"):
            builtinsr = request.GET.get("builtinsr")
            regex = builtinsr
        if request.GET.get("customizesr"):
            customizesr = request.GET.get("customizesr")
            regex = customizesr
        # labelsr = request.GET.get("labelsr")
        if request.GET.get("labelsr"):
            labelsr = request.GET.get("labelsr")
        if request.GET.get("customcondsr"):
            customcondsr = request.GET.get("customcondsr")
        if request.GET.get("customcondvalsr"):
            customcondvalsr = request.GET.get("customcondvalsr")
        output = {"sequence": type}
        if actionsr == "1":
            # add a check for checking if data exists
            from django.db.models import Q
            entry = SetupParameters.objects.filter((Q(parameter=paratype) | Q(variable=variablesr)), customer=customer,
                                                   location=location).last()
            if entry:
                return render(request, 'notification.html',
                              {'output_list': "Parameter already exists", 'class': 'alert-danger'})
            else:
                entry = SetupParameters(parameter=paratype, customer=customer, location=location, variable=variablesr,
                                        value=valuesr, label=labelsr, regex=regex, type=vtypesr,
                                        cond1field=customcondsr, cond1val=customcondvalsr, regextype=regexsr)
                entry.save()
                # add a check for checking if data exists
            entry1 = CommonSetupParameters.objects.filter((Q(parameter=paratype) | Q(variable=variablesr)),
                                                          location=location).last()
            if entry1:
                print "Entry Exists"
            else:
                entry1 = CommonSetupParameters(parameter=paratype, variable=variablesr, location=location,
                                               value=valuesr, label=labelsr, regex=regex, type=vtypesr,
                                               cond1field=customcondsr, cond1val=customcondvalsr, regextype=regexsr)
                entry1.save()
            return render(request, 'notification.html',
                          {'output_list': "Setup Parameters Saved", 'class': 'alert-success'})
        elif actionsr == "2":
            from django.db.models import Q
            entry = SetupParameters.objects.filter((Q(parameter=paratype) | Q(variable=variablesr)), customer=customer,
                                                   location=location).last()
            if entry:
                q1 = SetupParameters.objects.filter(parameter=paratype, customer=customer, location=location).update(
                    variable=variablesr, value=valuesr, label=labelsr, regex=regex, type=vtypesr,
                    cond1field=customcondsr, cond1val=customcondvalsr, regextype=regexsr)
            else:
                return render(request, 'notification.html',
                              {'output_list': "Parameter Does Not exists, Please Add", 'class': 'alert-danger'})
                # add a check for checking if data exists
            entry1 = CommonSetupParameters.objects.filter((Q(parameter=paratype) | Q(variable=variablesr)),
                                                          location=location).last()
            if entry1:
                q2 = CommonSetupParameters.objects.filter(parameter=paratype, location=location).update(
                    variable=variablesr, value=valuesr, label=labelsr, regex=regex, type=vtypesr,
                    cond1field=customcondsr, cond1val=customcondvalsr, regextype=regexsr)
            else:
                print "Entry Exists"
            return render(request, 'notification.html',
                          {'output_list': "Setup Parameters Updated Successfully", 'class': 'alert-success'})
        elif actionsr == "3":
            # from django.db.models import Q
            entry = SetupParameters.objects.filter(parameter=paratype, customer=customer, location=location).last()
            if entry:
                print entry
                q1 = SetupParameters.objects.filter(parameter=paratype, customer=customer, location=location).last()
                if q1:
                    q1.delete()
            else:
                return render(request, 'notification.html',
                              {'output_list': "Parameter Does Not exists", 'class': 'alert-danger'})
                # add a check for checking if data exists
            entry1 = CommonSetupParameters.objects.filter(parameter=paratype, location=location).last()
            if entry1:
                q2 = CommonSetupParameters.objects.filter(parameter=paratype, location=location).last()
                if q2:
                    q2.delete()
            else:
                print "Entry Exists"
            return render(request, 'notification.html',
                          {'output_list': "Setup Parameters Deleted Successfully", 'class': 'alert-success'})
    # Network Connections
    elif type == "20":
        uploadtype = request.GET.get('network_connections')
        customer = request.session['customer']
        return render(request, 'patching_mat_newupload_dropzone.html',
                      {'type': uploadtype, 'customer': customer})
    # Undefined
    elif type == "22":
        msg = ""
        classn = "alert-success"
        from django.contrib.auth.models import Group, User
        from .models import UserProfile
        if request.GET.has_key('username') and request.GET.get('username') != "":
            username = request.GET.get('username')
            if is_unique_username(username):
                if request.GET.has_key('email') and request.GET.get('email') != "":
                    email = request.GET.get('email')
                    if request.GET.has_key('password') and request.GET.get('password') != "":
                        password = request.GET.get('password')
                        department = subdepartment = ""
                        if request.GET.has_key('department') and request.GET.get('department') != "":
                            department = re
                        if request.GET.has_key('subdepartment') and request.GET.get('subdepartment') != "":
                            subdepartment = request.GET.get('subdepartment')
                        # usercheck = User.objects.get(username=username).exists()
                        if not User.objects.filter(username=username).exists():
                            user = User.objects.create_user(username=username,
                                                            email=email,
                                                            password=password)
                            if user:
                                msg += 'User created successfully'
                                user_profile = UserProfile(user=user, department=department,
                                                           subdepartment=subdepartment)
                                user_profile.save()
                                # adding to group starts here
                                if request.GET.has_key('groups') and request.GET.get('groups') != "":
                                    groups = request.GET.get('groups')
                                    if groups:
                                        g = Group.objects.get(name=groups)
                                        g.user_set.add(user)
                                        msg += 'User added to group ' + groups
                                    else:
                                        msg += 'Group ' + groups + ' not found !'
                                        classn = 'alert-danger'
                                return render(request, 'notification.html',
                                              {'output_list': msg, 'class': classn})
                            else:
                                return render(request, 'notification.html',
                                              {'output_list': "User Creation failed", 'class': 'alert-danger'})
                        else:
                            return render(request, 'notification.html',
                                          {'output_list': "Username already exists", 'class': 'alert-danger'})
                    else:
                        return render(request, 'notification.html',
                                      {'output_list': "Please Enter Valid Password", 'class': 'alert-danger'})
                else:
                    return render(request, 'notification.html',
                                  {'output_list': "Please Enter Valid Email!", 'class': 'alert-danger'})
            else:
                output = {"sequence": type}
                return render(request, 'notification.html',
                              {'output_list': "Username already exists!", 'class': 'alert-danger'})
        else:
            output = {"sequence": type}
            return render(request, 'notification.html',
                          {'output_list': "Please Enter Valid Username", 'class': 'alert-danger'})
    # New Site Extension, Site Extension, Site Decomission,SD-WAN Upgrade, Wireless Upgrade,LAN Upgrade
    elif type == "28":
        response_data = {}
        response_data["inputs"] = []
        inp1 = {"name": "apic_ip", "send": "yes", "format": "default1", "desc": "apic_ip",
                "default1": "", "type": "hidden"}
        response_data["inputs"].append(inp1)
        inp1 = {"name": "topolody_query", "send": "yes", "format": "default1", "desc": "apic_ip",
                "default1": "", "type": "hidden"}
        response_data["inputs"].append(inp1)
        # inp1 = {"name": "catalog", "send": "yes", "format": "default1", "desc": "Catalog",
        #         "default1": "", "type": "dropdown","length":"full",
        #         "options": [{"value": "site_extension", "label": "Site Extension"},
        #                     {"value": "site_decomission", "label": "Site Decomission"},
        #                     {"value": "sd_wan_upgrade", "label": "SD Wan Upgrade"},
        #                     {"value": "wireless_upgrade","label": "Wireless Upgrade"},
        #                     {"value": "lan_upgrade","label": "LAN Upgrade"}]}
        # response_data["inputs"].append(inp1)
        inp1 = {"name": "region", "send": "yes", "format": "default1", "desc": "Region",
                "default1": "", "type": "dropdown", "length": "full",
                "options": [{"value": "North_America", "label": "North America"},
                            {"value": "EMEA", "label": "EMEA"},
                            {"value": "apac", "label": "APAC"},
                            {"value": "latam", "label": " LATAM"}]}
        response_data["inputs"].append(inp1)
        option = ["100", "250", "500", "1000", "1500", "2000", "2500", "3000", "4000", "5000", "6000", "7000"]
        site_options = []
        for each in option:
            dic = {}
            dic["label"] = each
            dic["value"] = each
            site_options.append(dic)
        inp1 = {"name": "site_space", "send": "yes", "format": "default1", "desc": "Site Space",
                "default1": "", "type": "dropdown", "length": "full",
                "options": site_options}
        response_data["inputs"].append(inp1)
        option1 = ["10MB", "20MB", "30MB", "40MB", "50MB", "60MB", "70MB", "80MB", "90MB", "100MB", "150MB", "200MB",
                   "250MB", "300MB"]
        bandwidth_options = []
        for each in option1:
            dic = {}
            dic["label"] = each
            dic["value"] = each
            bandwidth_options.append(dic)
        inp1 = {"name": "bandwidth", "send": "yes", "format": "default1", "desc": "Bandwidth",
                "default1": "", "type": "dropdown", "length": "full",
                "options": bandwidth_options}
        response_data["inputs"].append(inp1)
        inp1 = {"name": "lsa_expectation", "send": "yes", "format": "default1", "desc": "LSA Expectation",
                "default1": "", "type": "text", "options": "", "length": "full", }
        response_data["inputs"].append(inp1)
        option2 = ["10", "25", "50", "75", "100", "200", "300", "400", "500", "750", "1000", "1500", "2000"]
        user_options = []
        for each in option2:
            dic = {}
            dic["label"] = each
            dic["value"] = each
            user_options.append(dic)
        inp1 = {"name": "no_users", "send": "yes", "format": "default1", "desc": "Estimated No. Of Users",
                "default1": "", "type": "dropdown", "length": "full",
                "options": user_options}
        response_data["inputs"].append(inp1)
        response_data["opflag"] = 1
        return HttpResponse(json.dumps(response_data), content_type="application/json")
    # S2
    elif type == "34":
        request.session['user_type'] = "S2"
        user_ios = request.session['user_ios'] = "s2"
        request.session['user_plat'] = "na"
        request.session['user_tech'] = "na"
        response_data = {}
        sel_para = {'ios': request.session['user_ios'], 'plat': request.session['user_plat'],
                    'tech': request.session['user_tech'], 'type': request.session['user_type'],
                    'user_name': "", 'customer': customer}
        test_flag = True
        if test_flag:
            set_inputs_to_db = ParseNewTpFile(sel_para, request.session['user_type'], customer,
                                              request.session["ext_dict"])
            result = set_inputs_to_db.overwriteTlDb()
        data = ReadTemplateDb(sel_para, request.session['user_type'], customer,
                              request.session["ext_dict"])
        # inputs = data.getInputsFromDb()
        # input_list = inputs.split(' ')
        user_data = {}
        # print "###", input_list
        # for el in input_list:
        #     # print el
        #     if response_data.get(el):
        #         # print ">>", response_data.get(el)
        #         temp_str = response_data.get(el)
        #         if isinstance(temp_str, list):
        #             temp_str = ','.join(temp_str)
        #         else:
        #             temp_str = ' '.join(temp_str.split())
        #         temp_str = re.sub(r"\s+$", ' ', temp_str)
        #         user_data[el] = temp_str
        #     else:
        #         value = "<%s>" % el
        #         user_data[el] = value
        # print user_data
        new_user_dict = data.convet_inputs_to_dict(user_data, request.session['user_type'])
        # print "+=======", new_user_dict
        modified_output = data.convet_template_to_config(request, new_user_dict)
        glb_CombinationsSubmitted = request.session['user_comb']['inputs']
        questionnaire_output = get_questionnaire_tp(glb_CombinationsSubmitted, user_data, sel_para)
        questionnaire_output = modified_output + questionnaire_output
        pres = PresTemplateOutput(sel_para, questionnaire_output, False)
        pres_output = sorted(pres.getModTemplateOutput())
        outputlist = {}
        outputlist['Configuration'] = modified_output
        return render(request, 'tabs.html', {'output_list': outputlist})
    # Config based on Mac
    elif type == "35":

        conn = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
        cursor = conn.cursor()
        response_data = {}
        for el in request.GET:
            print el
            if "[" in el:
                element_value = request.GET.getlist(el)
                if element_value:
                    new_el = el.split("[]")[0]
                    response_data[new_el] = element_value
            else:
                response_data[el] = request.GET.get(el)
        print response_data
        if not response_data["config_scope"]:
            return render(request, 'notification.html',
                          {'output_list': "Select Scope of Configuration", 'class': 'alert-danger'})

        if response_data["config_scope"] == "Floor":
            print " Hello I m here "
            op_list = []
            op_dict = {}
            switch_ip_list = []
            floor = response_data["floor_no"]
            file = open('/home/ubuntu/prepro/mysite/mysite/patching data/Switch.json', 'r')
            file_data = json.load(file)
            for k, v in file_data.iteritems():
                m1 = re.search(r'-(\S)\S+-', k)
                if m1 and m1.group(1) in floor:
                    switch_ip_list.append(v['loopback'])
            switch_mac_dict = {}
            for ip_add in switch_ip_list:
                cursor.execute("SELECT mac, vlan, port FROM mysite_mac_db WHERE sw_ip=?", [ip_add])
                macdb_rows = cursor.fetchall()
                switch_mac_dict[ip_add] = macdb_rows

        elif "Site" == response_data["config_scope"]:
            site = response_data["site_type"]
            switch_ip_list = []
            file = open('/home/ubuntu/prepro/mysite/mysite/patching data/Switch.json', 'r')
            file_data = json.load(file)
            for k, v in file_data.iteritems():
                if v["site_name"] == site:
                    switch_ip_list.append(v['loopback'])

            switch_mac_dict = {}
            for ip_add in switch_ip_list:
                cursor.execute("SELECT mac, vlan, port FROM mysite_mac_db WHERE sw_ip=?", [ip_add])
                macdb_rows = cursor.fetchall()
                switch_mac_dict[ip_add] = macdb_rows
            # return render(request, 'notification.html',{'output_list': "Enter into the Site section", 'class': 'alert-danger'})

        elif "Switch" == response_data["config_scope"]:
            if "switch_name" in response_data:
                switch = response_data["switch_name"]
            else:
                return render(request, 'notification.html',
                              {'output_list': "Please select switch from list", 'class': 'alert-danger'})
            switch_ip_list = []
            file = open('/home/ubuntu/prepro/mysite/mysite/patching data/Switch.json', 'r')
            file_data = json.load(file)
            for k, v in file_data.iteritems():
                if k in switch:
                    switch_ip_list.append(v['loopback'])
            switch_ip_list.append('74.95.1.202')

            switch_mac_dict = {}
            for ip_add in switch_ip_list:
                cursor.execute("SELECT mac, vlan, port FROM mysite_mac_db WHERE sw_ip=?", [ip_add])
                macdb_rows = cursor.fetchall()
                switch_mac_dict[ip_add] = macdb_rows
            # print switch_mac_dict
            # return render(request, 'notification.html',{'output_list': "Enter into the Site section", 'class': 'alert-danger'})

        sorted_dict = sort_ip_mac_dict(switch_mac_dict)
        for switch_ip, data in sorted_dict.iteritems():
            if data:
                login_class = SSH_Switch(switch)
                for vlan, port_list in data.iteritems():
                    deconfig_cmd = login_class.deconfig_ports_fun(port_list)
                    config_ports = login_class.config_vlan_on_port(vlan, port_list)

        switch_count = {"total_sw_config": "2", "total_port_config": "192"}
        op_list = {
            "STNNSH-001-SA01": [],
            "STNNSH-001-SA02": []
        }
        return render(request, 'mac_config_table.html',
                      {'entry': op_list, 'class': 'alert-success', 'ftype': '1', 'cost': switch_count})
    # Access switch HW Request
    elif type == "36":
        service = request.GET.get("service")
        response_data = {}
        response_data["inputs"] = []
        response_data["opflag"] = 1
        inp1 = {}
        if service == "Precheck":
            conn_type = request.GET.get("conn_type")
            precheck_sw = request.GET.get("precheck_sw")
            if conn_type == "Upload":
                return render(request, 'hw_refresh_dropzone.html', {'type': service, 'precheck_sw': precheck_sw})
            else:
                inp1 = {"name": "precheck_access_switch_refresh", "format": "default1",
                        "desc": "Access Switch HW Refresh",
                        "default1": "", "type": "hidden"}
                response_data["inputs"].append(inp1)
                inp1 = {"name": "precheck_switches", "format": "default1", "desc": "Pre-check Switches",
                        "default1": "", "type": "text"}
                response_data["inputs"].append(inp1)

            # inp1 = {"name": "idf_number", "format": "default1", "desc": "IDF Numbers",
            #         "default1": "", "type": "text"}
            # response_data["inputs"].append(inp1)
        elif service == "Postcheck":
            conn_type = request.GET.get("conn_type")
            if conn_type == "Upload":
                # pre_sw_name = request.GET.get("precheck_switch")
                # return render(request, 'hw_refresh_dropzone.html',{'type':service, 'precheck_sw':pre_sw_name})
                inp1 = {"name": "postcheck_access_type", "format": "default1", "desc": "Access Switch HW Refresh",
                        "default1": conn_type, "type": "hidden"}
                response_data["inputs"].append(inp1)
                inp1 = {"name": "postcheck_access_switch_refresh", "format": "default1",
                        "desc": "Access Switch HW Refresh",
                        "default1": service, "type": "hidden"}
                response_data["inputs"].append(inp1)
                inp1 = {"name": "precheck_switches", "format": "default1", "desc": "Precheck Switches",
                        "default1": "", "type": "text"}
                response_data["inputs"].append(inp1)
                response_data["inputs"].append({"type": 'line', "label": 'Exception'})
                response_data["inputs"].append({"type": 'hline', "newline": 'yes'})

                inp1 = {"name": "existing_vlan", "format": "default1", "desc": "Existing VLAN",
                        "default1": "", "type": "text"}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "new_vlan", "format": "default1", "desc": "New VLAN",
                        "default1": "", "type": "text"}
                response_data["inputs"].append(inp1)
            else:

                inp1 = {"name": "postcheck_access_switch_refresh", "format": "default1",
                        "desc": "Access Switch HW Refresh",
                        "default1": "", "type": "hidden"}
                response_data["inputs"].append(inp1)
                inp1 = {"name": "postcheck_switches", "format": "default1", "desc": "Post-check Switches",
                        "default1": "", "type": "text"}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "precheck_switches", "format": "default1", "desc": "Precheck Switches",
                        "default1": "", "type": "text"}
                response_data["inputs"].append(inp1)
                response_data["inputs"].append({"type": 'line', "label": 'Exception'})
                response_data["inputs"].append({"type": 'hline', "newline": 'yes'})

                inp1 = {"name": "existing_vlan", "format": "default1", "desc": "Existing VLAN",
                        "default1": "", "type": "text"}
                response_data["inputs"].append(inp1)

                inp1 = {"name": "new_vlan", "format": "default1", "desc": "New VLAN",
                        "default1": "", "type": "text"}
                response_data["inputs"].append(inp1)
        return HttpResponse(json.dumps(response_data), content_type="application/json")
    # CUCM
    elif type == "43":
        service = request.GET.get('services')
        print service
        cucm_class = CUCM_Inputs(service)
        response_data = cucm_class.get_response_data()
        response_data["opflag"] = 1
        return HttpResponse(json.dumps(response_data), content_type="application/json")
    # ACI_Port_Provision_by_API
    elif type == "45":
        
        # General User session declaration
        request.session['user_type'] = "ACI_Port_Provision_by_API"
        user_ios = request.session['user_ios'] = "apic_services"
        request.session['user_plat'] = "na"
        request.session['user_tech'] = "na"
        action = request.GET.get('action')
        epic_service = request.GET.get('apic_services')
        port_type = request.GET.get('port_type')
        if epic_service == "Available Ports":
            output_list = []
            response_data ={}
            for el in request.GET:
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            leaf_node_list = response_data.get('leaf_id')
            apic_auth = ACIconfig_by_API(ACI_IP, Username, Password)
            
            for leaf_node in leaf_node_list:
                port_details = apic_auth.get_port_details(leaf_node)
                output_dict = {}
                output_dict['leaf'] = leaf_node
                output_dict['ports'] = []
                avail_count = 0
                not_avail_count = 0
                # sorted(port_details.items(), key=lambda x: x[1])
                for num in range(1, 49):
                    port = 'eth1/'+str(num)
                    details = port_details[port]
                    port_list = {}
                    if details['oper_state'] == 'up'  and not details['description']:
                        port_list['int'] = details['port'].title()
                        port_list['labal'] = "danger"
                        not_avail_count+=1
                    elif details['oper_state'] == 'down'  and  details['description']:
                        port_list['int']=details['port'].title()
                        port_list['labal']="danger"
                        not_avail_count+=1
                    elif details['oper_state'] == 'down'  and not details['description']:
                        port_list['int']=details['port'].title()
                        port_list['labal']="success"
                        avail_count+=1
                    
                    output_dict['ports'].append(port_list)
                output_dict['avail_count']=avail_count
                output_dict['not_avail_count']= not_avail_count
            # print output_dict
            
                output_list.append(output_dict)
            # print output_list 
            return render(request, 'available_port_table.html',
                          {'output_list':output_list , 'class': 'alert-danger'})
        
        elif epic_service == "Add Or Modify Tenant":
            action = "add_modify_tenent"    
        
        elif epic_service == 'Leaf Port Status':
            apic_auth = ACIconfig_by_API(ACI_IP, Username, Password)
            outputlist = collections.OrderedDict()
            response_data = {}
            leaf_node = request.GET.get('leaf_id')
            physical_port = request.GET.get('phy_ports')
            for el in request.GET:
                if "[" in el:
                    element_value = request.GET.getlist(el)
                    if element_value:
                        new_el = el.split("[]")[0]
                        response_data[new_el] = element_value
                else:
                    response_data[el] = request.GET.get(el)
            print response_data, 'Deprrrrrrrrrrrrrrroooooooooooooooo'
            physical_port = response_data.get('phy_ports')

            for phy_port in physical_port:
                port_details = apic_auth.leaf_status_details(leaf_node,phy_port)
                oper_state = apic_auth.oper_status(leaf_node,phy_port)
                policy = apic_auth.get_policy_get(leaf_node,phy_port.replace(' ',''))
                port_data = []
                if port_details.has_key('descr'):

                    rex = re.search(r'(CHG.+)', port_details.get('descr'))
                    if rex:
                        print(rex.group(1))

                        port_data.append(
                            "<strong>Work Order No. : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                            rex.group(1) + "</span>")
                else:
                    port_data.append(
                        "<strong>Description : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")

                if port_details.has_key('id'):
                    port_data.append(
                        "<strong> Leaf ID : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        leaf_node + "</span>")
                    
                if port_details.has_key('id'):
                    port_data.append(
                        "<strong>Physical Port : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        port_details['id'] + "</span>")
                else:
                    port_data.append(
                        "<strong>Physical Port : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                if port_details.has_key('speed'):
                    if port_details['speed'] == "inherit":
                        speed = "Auto"
                    else:
                        speed = port_details['speed']
                    port_data.append(
                        "<strong>Speed: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        speed + "</span>")
                else:
                    port_data.append(
                        "<strong>Speed : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                
                if policy:
                    
                    port_data.append(
                        "<strong>Policy Group: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        policy + "</span>")
                else:
                    port_data.append(
                        "<strong>Policy Group : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + " " + "</span>")
                
                if port_details.has_key('descr'):
                    port_data.append(
                        "<strong>Description : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        port_details['descr'] + "</span>")
                else:
                    port_data.append(
                        "<strong>Description : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                if port_details.has_key('descr'):

                    rex = re.search(r'(Reservation|Provision)', port_details.get('descr'))
                    if rex:
                        port_data.append(
                            "<strong>State. : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                            rex.group(1) + "</span>")
                else:
                    port_data.append(
                        "<strong>Description : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                if port_details.has_key('adminSt'):
                    port_data.append(
                        "<strong>Admin State : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        port_details['adminSt'] + "</span>")
                else:
                    port_data.append(
                        "<strong>Admin State : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                if oper_state:
                    port_data.append(
                        "<strong>Operational State : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        oper_state.title() + "</span>")
                    
                if port_details.has_key('mode'):
                    port_data.append(
                        "<strong>Mode : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        port_details['mode'] + "</span>")
                else:
                    port_data.append(
                        "<strong>Mode : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " + "NA" + "</span>")
                if port_details.has_key('EPG'):
                    port_data.append(
                        "<strong>EPG : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'> " +
                        port_details['mode'] + "</span>")
                    
                
                    
                outputlist[phy_port.title()] = port_data
            return render(request, 'tabs.html', {'output_list': outputlist})
        
        else:
            action = request.GET.get('action')
        
        service_now_check = request.GET.get('service_now_check')
        print " Here in ACTION  ", action
        aci_auth = ACIconfig_by_API(ACI_IP, Username, Password)
        if not aci_auth.test_connection():
            return render(request, 'notification.html',
                          {'output_list': "ACI Connection Failed", 'class': 'alert-danger'})
        aci_class = ACI_Inputs(epic_service, port_type, action, pre_response={'service_now_check': service_now_check})
        response_data = aci_class.get_response_data()
        response_data["opflag"] = 1
        request.session['input_response_data'] = response_data
        return HttpResponse(json.dumps(response_data), content_type="application/json")
    
    elif type == "44":
        service = request.GET.get('services')
        print service
        return render(request, 'cisco_ucm_configuration_bulk.html',
                      {'service': service, 'upload_type': "Cisco UCM Configuration"})
    # ACI Port Provisioing = Bulk
    elif type == "46":
        service = request.GET.get('apic_services')
        service_now_req = request.GET.get('service_now_check')
        if service_now_req == "yes":
            change_req_no = request.GET.get('work_order_no')
            FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/user_uploads/"
            name = FILE_UPLOAD_DIR + change_req_no + ".csv"
            with open(name, 'r') as csvfile:
                csv_file = csv.DictReader(csvfile)
                apic_port_list = []
                op_list = []
                for row in csv_file:
                    apic_dict = {}
                    apic_dict['work_order_no'] = row['config_name']
                    apic_dict['description'] = row['desc']
                    apic_dict['policy_grp'] = row['policy_group']
                    apic_dict['leaf'] = row['leaf_node']
                    apic_dict['port'] = row['physical_ports'].lower()
                    apic_dict['admin_state'] = row['admin_state']
                    apic_dict['action'] = row['action']
                    apic_dict['vlan_id'] = row['vlan_id']
                    apic_dict['tenant_name'] = row['tenant_name']
                    apic_dict['port_mode'] = row['port_mode']
                    apic_port_list.append(apic_dict)

                request.session['apic_data_dict'] = {'apic_services': 'ACI_Bulk_Upload',
                                                     'response_dict': apic_port_list}

                return render(request, 'apic_api_bulk_upload.html',
                              {'output_list': apic_port_list, 'class': 'alert-success'})
        else:
            return render(request, 'apic_port_provision_bulk.html',
                          {'action': service, 'upload_type': "ACI_Bulk_upload"})
    else:
        output = {"sequence": type}
        return render(request, 'notification.html', {'output_list': "invalid inputs", 'class': 'alert-danger'})


def resend_inputs_sr(request):
    if request.GET:
        req_type = request.session['service_request_type']

        pre_response = request
        in_data = ServiceRequest_InputData(req_type, pre_response)
        response = in_data.get_response_data()
    return HttpResponse(json.dumps(response), content_type="application/json")


def Apic_apply_config(request, section):
    if request.method == "GET":
        dest = Racket.objects.all()
        print dest
    print ">>>>>>>>>>----------- hello There"


def changetohtmltags(request, list1, dictionary={}):
    # print dictionary
    list = []
    list += list1
    if dictionary:
        leaf_list = dictionary.get('Leaf')
        if dictionary.has_key("EPG"):
            epg_list = [dictionary.get('EPG')]
        if dictionary.has_key("Tenant"):
            tenant = dictionary.get('Tenant')
        if dictionary.has_key("Application"):
            app = dictionary.get('Application')
        if dictionary.has_key("Vlanid"):
            vlanid = dictionary.get('Vlanid')
        else:
            vlanid = ""
        phy_port = dictionary.get('Physical Port')
        portch = dictionary.get('Port Channel Num')
        pc_mode = dictionary.get('Port Channel Mode')
        swport = dictionary.get('Port Mode')
    else:
        if request.GET.get('leaf[]'):
            leaf_list = request.GET.getlist('leaf[]')
        if request.GET.get('epg[]'):
            epg_list = request.GET.getlist('epg[]')
        if request.GET.get('physical_port'):
            phy_port = request.GET.get('physical_port')
        if request.GET.get('tenant'):
            tenant = request.GET.get('tenant')
        if request.GET.get('application'):
            app = request.GET.get('application')
        if request.GET.has_key('portch'):
            portch = request.GET.get('portch')
        else:
            # portch = request.GET.get('changeid') // changed on 8-8-2017 -
            portch = ""
        if request.GET.has_key('pc_mode'):
            pc_mode = request.GET.get('pc_mode')
        else:
            pc_mode = "on"
        if request.GET.get('switchport'):
            swport = request.GET.get('switchport')
        else:
            swport = ""
        if request.GET.get('vrf'):
            vrf_list = request.GET.get('vrf')
        else:
            vrf_list = [""]
        if request.GET.has_key('bd_domain'):
            bd_domain = request.GET.get('bd_domain')
        else:
            bd_domain = ""
        if request.GET.has_key('features[]'):
            features_list = request.GET.getlist('features[]')
        else:
            features_list = []
        if request.GET.get('ip'):
            ip = request.GET.get('ip')
        else:
            ip = ""
        if request.GET.get('ip_addr'):
            ip_addr = request.GET.get('ip_addr')
        else:
            ip = ""
        if request.GET.has_key('vlanid'):
            vlanid = request.GET.get('vlanid')
        else:
            vlanid = ""
    arp_count = 0
    pim_count = 0
    l2_count = 0
    for line in list:
        if '\r\n' in line:
            indx = list.index(line)
            line = line.strip('\n')
            list[indx] = line
    for line in list:
        if line == '\r':
            indx = list.index(line)
            list.pop(indx)
            continue
        if '<node_id>' in line:
            indx = list.index(line)
            if type(leaf_list) == str:
                leaf = leaf_list
            elif len(leaf_list) != 0:
                leaf = ""
                for each in leaf_list:
                    if leaf == "":
                        leaf = each
                    else:
                        leaf += "," + each
            line = line.replace("<node_id>", "555" + leaf + "666")
            list[indx] = line
            # else:
            # line = line.replace('<node_id>', leaf_list[0])
            # list.insert( indx, line)
        # if
        if '<interface>' in line:
            indx = list.index(line)
            if "," in phy_port:
                new_port_list = []
                port_list = phy_port.split(",")
                print "---- >>", port_list
                for port in port_list:
                    port = port.strip()
                    port = port.lstrip("eth")
                    new_port_list.append(port.strip())
                phy_port = "eth " + ",".join(new_port_list)
            elif "-" in phy_port:
                phy_port = phy_port

            line = line.replace('<interface>', "555" + phy_port + "666")
            list[indx] = line
        if '<channel_name>' in line:
            indx = list.index(line)
            line = line.replace('<channel_name>', "555" + portch + "666")
            list[indx] = line
        if '<change_id>' in line:
            indx = list.index(line)
            line = line.replace('<change_id>', "555" + portch + "666")
            list[indx] = line
        if '<pc_mode>' in line:
            indx = list.index(line)
            line = line.replace('<pc_mode>', "555" + pc_mode.lower() + "666")
            list[indx] = line
        if '<switch_port>' in line:
            indx = list.index(line)
            if swport == "trunk":
                line = line.replace('<switch_port>', "555" + swport + "666 allowed")
            else:
                line = line.replace('<switch_port>', "555" + swport + "666")
            list[indx] = line
        if '<bd_name>' in line:
            indx = list.index(line)
            line = line.replace('<bd_name>', "555" + bd_domain + "666")
            list[indx] = line
            if len(features_list) > 0:
                for ele in features_list:
                    if ele == "arp_flooding" and arp_count == 0:
                        list.insert(indx + 1, "   arp flooding")
                        arp_count += 1
                    # if ele == "pim" and pim_count ==0:
                    # list.insert( indx+1,  "   ip multicast")
                    # pim_count +=1
                    if ele == "l2_flooding" and l2_count == 0:
                        list.insert(indx + 1, "   l2-unknown-unicast flood")
                        l2_count += 1
        if '<vrf_name>' in line:
            indx = list.index(line)
            vrf = vrf_list
            line = line.replace("<vrf_name>", "555" + vrf + "666")
            list[indx] = line
            # print line
        # if '<ip_addr>' in line:
        # indx = list.index(line)
        # line = line.replace('<ip_addr>', "555"+ip+"666")
        # list[indx] = line
        if '<ip_addr>' in line:
            indx = list.index(line)
            line = line.replace('<ip_addr>', "555" + ip_addr + "666")
            list[indx] = line
        if vlanid == "" or request.GET.has_key('vlanid'):
            if '<tenant_name>' in line:
                if request.GET.has_key('vlanid'):
                    vlanid = request.GET.get('vlanid')
                if "," in vlanid:
                    vlanid = vlanid.split(",")
                elif "-" in vlanid:
                    vlanrange = vlanid.split("-")
                    vlanid = []
                    for id in range(int(vlanrange[0]), int(vlanrange[1]) + 1):
                        vlanid.append(str(id))
                else:
                    vlanid = [vlanid]
                tenant_data = get_vlan_id2(vlanid)
                if tenant_data == False:
                    return list
                print tenant_data
                i = 0
                indx = list.index(line)
                list.pop(indx)
                for each_dict in tenant_data:
                    newline = line.replace('<tenant_name>', "555" + each_dict['tenant'] + "666")
                    newline = newline.replace('<application_name>', "555" + each_dict['application'] + "666")
                    newline = newline.replace('<epg_name>', "555" + each_dict['epg'] + "666")
                    newline = newline.replace('<vlan_id>', "555" + each_dict['vlanid'] + "666")
                    list.insert(indx + i, newline)
                    i += 1
        else:
            if '<tenant_name>' in line:
                indx = list.index(line)
                line = line.replace('<tenant_name>', "555" + tenant + "666")
                list[indx] = line
            if '<application_name>' in line:
                indx = list.index(line)
                line = line.replace('<application_name>', "555" + app + "666")
                list[indx] = line
            if '<epg_name>' in line:
                print "In EPG name"
                i = 0
                indx = list.index(line)
                num = len(epg_list)
                list.pop(indx)
                print epg_list
                if len(epg_list) > 1:
                    for each in epg_list:
                        vlanid = get_id(tenant, app, each)
                        print vlanid + "  here "
                        newline = line.replace('<epg_name>', "555" + each + "666")
                        if "<vlan_id>" in newline:
                            newline = newline.replace('<vlan_id>', "555" + vlanid + "666")
                        list.insert(indx + i, newline)
                        i += 1
                else:
                    if vlanid == "":
                        vlanid = get_id(tenant, app, epg_list[0])
                        print vlanid + " Herer"
                    line = line.replace('<epg_name>', "555" + epg_list[0] + "666")
                    line = line.replace('<vlan_id>', "555" + vlanid + "666")
                    list.insert(indx, line)
    return list


def get_vlan_id2(vlan_list):
    filename = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_json_data/tenant.json"
    with open(filename) as json_data:
        tenant_json_data = json.load(json_data)
    list = []
    for vlanid in vlan_list:
        for tenant, ten_val in tenant_json_data.iteritems():
            for key, val in ten_val.iteritems():
                if key == "app":
                    for v in val:
                        for app, app_val in v.iteritems():
                            for epg in app_val:
                                for each_epg, val_epg in epg.iteritems():
                                    if vlanid == val_epg.get("vlan"):
                                        dict = {}
                                        dict['tenant'] = tenant
                                        dict['application'] = app
                                        dict['epg'] = each_epg
                                        dict['vlanid'] = vlanid
                                        list.append(dict)
    print list
    if len(list) == 0:
        return False
    else:
        return list


def get_id(tenant, app, para_epg):
    print tenant, app, para_epg
    filename = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_json_data/tenant.json"
    with open(filename) as json_data:
        tenant_json_data = json.load(json_data)
    vlan_id = ""
    if tenant_json_data.has_key(tenant):
        for list_app in tenant_json_data.get(tenant).get("app"):
            if list_app.has_key(app):
                for list_epg in list_app.get(app):
                    if list_epg.has_key(para_epg):
                        vlan_id = list_epg.get(para_epg).get("vlan")
    return vlan_id


def change_var_tso_provision(cmd_list, dictionary):
    new_cmd_list = []
    for line in cmd_list:
        print line
        m = re.search(r'(<\S+>)', line)
        if m:
            new_line = line
            exp = "<\S+>"
            for match in re.finditer(exp, line):
                var = match.group().replace('<', '').replace('>', '')
                var = re.sub(' ', '', var)
                # print var
                if dictionary.has_key(var):
                    variable_value = dictionary.get(var)
                    new_line = re.sub('<' + var + '>', variable_value, new_line)
                else:
                    variable_value = "<" + var + ">"
                    new_line = re.sub('<' + var + '>', variable_value, new_line)

            new_cmd_list.append(new_line)
        else:
            new_cmd_list.append(line)
    return new_cmd_list


def change_variables(request, list, dictionary={}):
    if dictionary:
        leaf_list = dictionary.get('Leaf')
        if dictionary.has_key("EPG"):
            epg_list = [dictionary.get('EPG')]
        if dictionary.has_key("Tenant"):
            tenant = dictionary.get('Tenant')
        if dictionary.has_key("Application"):
            app = dictionary.get('Application')
        if dictionary.has_key("Vlanid"):
            vlanid = dictionary.get('Vlanid')
        else:
            vlanid = ""
        phy_port = dictionary.get('Physical Port')
        portch = dictionary.get('Port Channel Num')
        pc_mode = dictionary.get('Port Channel Mode')
        swport = dictionary.get('Port Mode')
    else:
        if request.GET.get('leaf[]'):
            leaf_list = request.GET.getlist('leaf[]')
        if request.GET.get('epg[]'):
            epg_list = request.GET.getlist('epg[]')
        if request.GET.get('physical_port'):
            phy_port = request.GET.get('physical_port')
        if request.GET.get('tenant'):
            tenant = request.GET.get('tenant')
        if request.GET.get('application'):
            app = request.GET.get('application')
        if request.GET.has_key('portch'):
            portch = request.GET.get('portch')
        else:
            portch = ""
            # portch = request.GET.get('changeid')
        if request.GET.has_key('pc_mode'):
            pc_mode = request.GET.get('pc_mode')
        else:
            pc_mode = "on"
        if request.GET.get('switchport'):
            swport = request.GET.get('switchport')
        else:
            swport = ""
        if request.GET.has_key('vrf'):
            vrf_list = request.GET.get('vrf')
        if request.GET.has_key('features[]'):
            features_list = request.GET.getlist('features[]')
        else:
            features_list = []
        if request.GET.has_key('bd_domain'):
            bd_domain = request.GET.get('bd_domain')
        else:
            bd_domain = ""
        if request.GET.get('ip'):
            ip = request.GET.get('ip')
        else:
            ip = ""
        if request.GET.get('ip_addr'):
            ip_addr = request.GET.get('ip_addr')
        else:
            ip = ""
        if request.GET.has_key('vlanid'):
            vlanid = request.GET.get('vlanid')
        else:
            vlanid = ""
    arp_count = 0
    pim_count = 0
    l2_count = 0
    for line in list:
        if '\r\n' in line:
            indx = list.index(line)
            line = line.strip('\n')
            list[indx] = line
    for line in list:
        if line == '\r':
            indx = list.index(line)
            list.pop(indx)
            continue
        if '<node_id>' in line:
            indx = list.index(line)
            if type(leaf_list) == str:
                leaf = leaf_list
            elif len(leaf_list) != 0:
                leaf = ""
                for each in leaf_list:
                    if leaf == "":
                        leaf = each
                    else:
                        leaf += "," + each
            line = line.replace("<node_id>", leaf)
            list[indx] = line
            # else:
            # line = line.replace('<node_id>', leaf_list[0])
            # list.insert( indx, line)
        # if
        if '<interface>' in line:
            indx = list.index(line)
            if "," in phy_port:
                new_port_list = []
                port_list = phy_port.split(",")
                for port in port_list:
                    port = port.strip(" ")
                    port = port.lstrip("eth")
                    new_port_list.append(port.strip(" "))
                phy_port = "eth " + ",".join(new_port_list)
            elif "-" in phy_port:
                match = re.match(r'(\w+)-(\d/\d+)', phy_port)
                if match:
                    phy_port = match.group(1) + " " + match.group(2)
            if " " in phy_port:
                match = re.match(r'(\w+)(\d/\d+)', phy_port)
                if match:
                    phy_port = match.group(1) + " " + match.group(2)
            if "eth" in phy_port:
                portl = phy_port.replace("eth", "")
                phy_port = "eth " + portl
            line = line.replace('<interface>', phy_port)
            list[indx] = line
        if '<channel_name>' in line:
            indx = list.index(line)
            line = line.replace('<channel_name>', portch)
            list[indx] = line
        if '<change_id>' in line:
            indx = list.index(line)
            line = line.replace('<change_id>', portch)
            list[indx] = line
        if '<pc_mode>' in line:
            indx = list.index(line)
            line = line.replace('<pc_mode>', pc_mode.lower())
            list[indx] = line
        if '<switch_port>' in line:
            indx = list.index(line)
            if swport == "trunk":
                line = line.replace('<switch_port>', swport + " allowed")
            else:
                line = line.replace('<switch_port>', swport)
            list[indx] = line
        if '<bd_name>' in line:
            indx = list.index(line)
            line = line.replace('<bd_name>', bd_domain)
            list[indx] = line
            if len(features_list) > 0:
                for ele in features_list:
                    if ele == "arp_flooding" and arp_count == 0:
                        list.insert(indx + 1, "   arp flooding")
                        arp_count += 1
                    if ele == "pim" and pim_count == 0:
                        list.insert(indx + 1, "   ip multicast")
                        pim_count += 1
                    if ele == "l2_flooding" and l2_count == 0:
                        list.insert(indx + 1, "   l2-unknown-unicast flood")
                        l2_count += 1
        if '<vrf_name>' in line:
            indx = list.index(line)
            vrf = vrf_list
            line = line.replace("<vrf_name>", vrf)
            list[indx] = line
        # if '<ip_addr>' in line:
        # indx = list.index(line)
        # line = line.replace('<ip_addr>', ip)
        # list[indx] = line
        if '<ip_addr>' in line:
            indx = list.index(line)
            line = line.replace('<ip_addr>', ip_addr)
            list[indx] = line
        if vlanid != "" or request.GET.has_key('vlanid'):
            if '<tenant_name>' in line:
                if request.GET.has_key('vlanid'):
                    vlanid = request.GET.get('vlanid')
                if "," in vlanid:
                    vlanid = vlanid.split(",")
                elif "-" in vlanid:
                    vlanrange = vlanid.split("-")
                    vlanid = []
                    for id in range(int(vlanrange[0]), int(vlanrange[1]) + 1):
                        vlanid.append(str(id))
                else:
                    vlanid = [vlanid]
                tenant_data = get_vlan_id2(vlanid)
                if tenant_data == False:
                    return list
                i = 0
                indx = list.index(line)
                list.pop(indx)
                for each_dict in tenant_data:
                    newline = line.replace('<tenant_name>', each_dict['tenant'])
                    newline = newline.replace('<application_name>', each_dict['application'])
                    newline = newline.replace('<epg_name>', each_dict['epg'])
                    newline = newline.replace('<vlan_id>', each_dict['vlanid'])
                    list.insert(indx + i, newline)
                    i += 1
        else:
            if '<tenant_name>' in line:
                indx = list.index(line)
                line = line.replace('<tenant_name>', tenant)
                list[indx] = line
            if '<application_name>' in line:
                indx = list.index(line)
                line = line.replace('<application_name>', app)
                list[indx] = line
            if '<epg_name>' in line:
                i = 0
                indx = list.index(line)
                num = len(epg_list)
                list.pop(indx)
                if len(epg_list) > 1:
                    for each in epg_list:
                        vlanid = get_id(tenant, app, each)
                        newline = line.replace('<epg_name>', each)
                        if "<vlan_id>" in newline:
                            newline = newline.replace('<vlan_id>', vlanid)
                        list.insert(indx + i, newline)
                        i += 1
                else:
                    vlanid = get_id(tenant, app, epg_list[0])
                    line = line.replace('<epg_name>', epg_list[0])
                    line = line.replace('<vlan_id>', vlanid)
                    list.insert(indx, line)


def parse_configuration(filename):  # Parsing Output of following command "cmd"
    output = {'config': [], 'precheck': [], 'postcheck': [], 'rollback': [], 'activate_config': []}
    config_match = False
    precheck_match = False
    postcheck_match = False
    activate_flag = False
    rollback_match = False
    infile = open(filename, 'r+')
    cmd_line = [i for i in infile.readlines()]
    for line in cmd_line:
        line = line.strip('\n\r')
        if re.search('Configuration:', line) or config_match:
            if re.search('Configuration end', line):
                config_match = False
            else:
                output['config'].append(line)
                config_match = True

        if re.search('Pre Check Verification:', line) or precheck_match:
            if re.search('Pre Check Verification end', line):
                precheck_match = False
            else:
                output['precheck'].append(line)
                precheck_match = True

        if re.search('Post Check Verification:', line) or postcheck_match:
            if re.search('Post Check Verification end', line):
                postcheck_match = False
            else:
                output['postcheck'].append(line)
                postcheck_match = True

        if line == '!- Activate Configuration:' or activate_flag:
            if line == '!- Activate Configuration end':
                activate_flag = False
            else:
                output['activate_config'].append(line)
                activate_flag = True

        if line == '!- Roll-back Configuration:' or rollback_match:
            if line == '!- Roll-back Configuration end:':
                rollback_match = False
            else:
                output['rollback'].append(line)
                rollback_match = True
    if '!- Roll-back Configuration end' in output['rollback']:
        output['rollback'].remove('!- Roll-back Configuration end')
    return output


def parse_configuration_2(cmd_list):
    '''
    Description:
        Function help to get dictionary of output 'config', 'precheck', 'postcheck', 'activate_config'.
	inputs: cmd_list
	Output: Return output

    :param cmd_list:
    :return:
    '''
    # Parsing Output of following command "cmd"
    output = {'config': [], 'precheck': [], 'postcheck': [], 'activate_config': []}
    config_match = True
    precheck_match = True
    postcheck_match = True
    activate_flag = True
    rollback_match = True
    # infile = open(filename, 'r+')
    cmd_line = cmd_list
    for line in cmd_line:
        line = line.strip('\n\r')
        if line == 'Configuration:' or not config_match:
            if line == 'Post Check Verification:':
                config_match = True
            else:
                output['config'].append(line)
                config_match = False

        if line == 'Pre Check Verification:' or not precheck_match:
            if line == 'Prerequisites and Assumptions:':
                precheck_match = True
            else:
                output['precheck'].append(line)
                precheck_match = False

        if re.search("Activate Configuration", line) or activate_flag:
            if re.search("Activate Configuration end", line):
                activate_flag = True
            else:
                output['activate_config'].append(line)
                activate_flag = False

        if line == 'Post Check Verification:' or not postcheck_match:
            if line == 'Roll-back Configuration:':
                postcheck_match = True
            else:
                output['postcheck'].append(line)
                postcheck_match = False
    return output


def parse_configuration_bulk(filename):  # Parsing Output of following command "cmd"
    output = {'config': [], 'precheck': [], 'postcheck': [], 'rollback': []}
    config_match = False
    precheck_match = False
    postcheck_match = False
    rollback_match = False
    infile = open(filename, 'r+')
    cmd_line = [i for i in infile.readlines()]
    for line in cmd_line:
        line = line.strip('\n\r')
        if line == '!- Configuration:' or config_match:
            if line == '!- Configuration end':
                config_match = False
            else:
                output['config'].append(line)
                config_match = True

        if line == '!- Pre Check Verification:' or precheck_match:
            if line == '!- Pre Check Verification end':
                precheck_match = False
            else:
                output['precheck'].append(line)
                precheck_match = True

        if line == '!- Post Check Verification:' or postcheck_match:
            if line == '!- Post Check Verification end':
                postcheck_match = False
            else:
                output['postcheck'].append(line)
                postcheck_match = True

        if line == '!- Roll-back Configuration:' or rollback_match:
            if line == '!- Roll-back Configuration end:':
                rollback_match = False
            else:
                output['rollback'].append(line)
                rollback_match = True
    if '!- Roll-back Configuration end' in output['rollback']:
        output['rollback'].remove('!- Roll-back Configuration end')
    return output


def check_apic_login_exist(request):
    import base64
    returnarr = {}
    taskid = request.session["taskid"]
    subtaskid = request.session["subtaskid"]
    username = request.GET.get("username")
    password = request.GET.get("password")
    customer = request.session["customer"]
    is_bulk = request.session["is_bulk"]
    # ip = "198.18.133.200"
    # devices = request.GET.get("device")
    if request.session.has_key("devices"):
        devices = request.session["devices"]
        if "," in devices:
            devices = devices.split(",")
        elif type(devices) == list:
            devices = devices
        else:
            devices = [devices]
        entry = DeviceModel.objects.filter(name=devices[0]).values_list('ip').last()
        if entry:
            ip = entry[0]
        elif re.search(r'\d+\.\d+\.\d+\.\d+', devices[0]):
            ip = devices[0]
        else:
            ip = devices[0]
            # returnarr["status"] = 0
            # returnarr["message"] = " Invalid IP Address"
            # return HttpResponse(json.dumps(returnarr), content_type="application/json")
    if is_bulk:
        q1 = CronDB.objects.filter(taskid=taskid, customer=customer).update(
            username=username, password=base64.b64encode(password))
        returnarr["status"] = 1
        returnarr["message"] = "Login Successfull"
    elif re.search(r'192.1.1', ip):
        q1 = CronDB.objects.filter(taskid=taskid, subtaskid=subtaskid, customer=customer).update(
            username=username, password=base64.b64encode(password))
        returnarr["status"] = 1
        returnarr["message"] = "Login Successfull"
    elif apic_authentication(username, password, ip):
        q1 = CronDB.objects.filter(taskid=taskid, subtaskid=subtaskid, customer=customer).update(
            username=username, password=base64.b64encode(password))
        returnarr["status"] = 1
        returnarr["message"] = "Login Successfull"
    else:
        returnarr["status"] = 0
        returnarr["message"] = "Login Invalid / Host Not Reachable"
    # except Exception as e:
    #     returnarr["status"] = 0
    #     returnarr["message"] = e.message
    #     return HttpResponse(json.dumps(returnarr), content_type="application/json")
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


def get_username_by_user_id(request, id):
    from django.contrib.auth.models import User
    user = User.objects.get(id=id)
    return user


def get_user_id_by_username(request, the_username):
    from django.contrib.auth.models import User
    try:
        entry = User.objects.values_list('id').filter(username=the_username).last()
        return entry[0]
    except  User.DoesNotExist:
        return "0"


def get_device_ip(device):
    entry = DeviceModel.objects.filter(name=device).values_list('ip').last()
    if entry:
        ip = entry[0]
        return ip
    else:
        ip = device
        return ip


@login_required(login_url='/login/')
def tenant_upload_apply(request):
    from mysite.models import TenantDB
    from mysite.fabric_config import config_fun
    import json
    taskid = request.POST.get('taskid')
    if request.session.has_key('taskid'):
        taskid = request.session["taskid"]
    ip = request.POST.get('ip')
    config_action = request.POST.get('config_action')
    current_user = request.user
    uid = current_user.id
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/data/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    status_dict = {}
    # error_list = []
    count = 0
    # updt_count = 0
    # merge_count = 0
    cmplt_config_list = []
    cmplt_verify_list = []
    cmplt_rollback_list = []
    cmplt_activate_cmd = []
    newcmplt_config_list = []
    newcmplt_verify_list = []
    newcmplt_rollback_list = []
    newcmplt_activate_cmd = []
    chngId = 1
    if filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            response = get_info_dict(name)
            for dicts in response:
                if dicts.has_key("Vlanid"):
                    vlanid = [dicts.get("Vlanid")]
                    print vlanid
                    temp_dict = get_vlan_id2(vlanid)
                    print temp_dict
                    tenant = temp_dict[0]["tenant"]
                    application = temp_dict[0]["application"]
                    epg = temp_dict[0]["epg"]
                else:
                    tenant = dicts["Tenant"]
                    application = dicts["Application"]
                    epg = dicts["EPG"]
                dicts['Port Channel Num'] = taskid + "_" + str(chngId)
                chngId += 1
                if dicts.get("Port Type") == "physical":
                    config_file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configure Physical Ports.txt"
                elif dicts.get("Port Type") == "portchannel":
                    config_file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuring Port Channels in Leaf Nodes.txt"
                elif dicts.get("Port Type") == "vpc":
                    config_file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuring Virtual Port Channels in Leaf Nodes.txt"
                out_dict = parse_configuration(config_file)
                config_list = out_dict['config']
                verify_list = out_dict['precheck'] + out_dict['postcheck']
                activate_config = out_dict['activate_config']
                rollback = out_dict['rollback']
                appling_config = out_dict['precheck'] + out_dict['config'] + out_dict['postcheck']
                newlistconfig = changetohtmltags(request, appling_config, dicts)
                newlistactivate = changetohtmltags(request, activate_config, dicts)
                newlistverify = changetohtmltags(request, verify_list, dicts)
                newlistrollback = changetohtmltags(request, rollback, dicts)
                change_variables(request, config_list, dicts)
                change_variables(request, appling_config, dicts)
                change_variables(request, activate_config, dicts)
                change_variables(request, verify_list, dicts)
                change_variables(request, rollback, dicts)
                cmplt_config_list += appling_config
                cmplt_verify_list += verify_list
                cmplt_activate_cmd += activate_config
                cmplt_rollback_list += rollback
                newcmplt_config_list += newlistconfig
                newcmplt_verify_list += newlistverify
                newcmplt_activate_cmd += newlistactivate
                newcmplt_rollback_list += newlistrollback
                print "Tenant : " + tenant
                print "application : " + application
                print "epg: " + epg
                entry = TenantDB.objects.values_list('serialno').filter(pcnum=dicts.get("Port Channel Num")).last()

                if entry:
                    print "entyr" + entry[0]
                    print "sr no " + dicts.get("Sr No")
                    print "PC Num " + dicts.get("Port Channel Num")
                    try:
                        q1 = TenantDB.objects.filter(pcnum=dicts.get("Port Channel Num")).update(tenant=tenant,
                                                                                                 application=application,
                                                                                                 epg=application,
                                                                                                 serialno=dicts.get(
                                                                                                     "Sr No"),
                                                                                                 leaf=dicts.get("Leaf"),
                                                                                                 porttype=dicts.get(
                                                                                                     "Port Type"),
                                                                                                 portmode=dicts.get(
                                                                                                     "Port Mode"),
                                                                                                 fexnum=dicts.get(
                                                                                                     "Fex Num"),
                                                                                                 speed=dicts.get(
                                                                                                     "Speed"),
                                                                                                 ip=dicts.get("IP"),
                                                                                                 gatewayip=dicts.get(
                                                                                                     "Gateway IP"),
                                                                                                 computetype=dicts.get(
                                                                                                     "Compute Type"),
                                                                                                 config_list=json.dumps(
                                                                                                     appling_config),
                                                                                                 rollback_list=json.dumps(
                                                                                                     rollback),
                                                                                                 activate_cmd_list=json.dumps(
                                                                                                     activate_config))
                    except Exception:
                        print "Update Failed"
                        print Exception
                else:
                    print "sr no 2" + dicts.get("Sr No")
                    print "PC Num 2" + dicts.get("Port Channel Num")
                    q1 = TenantDB(serialno=dicts.get("Sr No"), tenant=tenant, application=application, epg=epg,
                                  leaf=dicts.get("Leaf"), porttype=dicts.get("Port Type"),
                                  pcnum=dicts.get("Port Channel Num"), portmode=dicts.get("Port Mode"),
                                  fexnum=dicts.get("Fex Num"), speed=dicts.get("Speed"), ip=dicts.get("IP"),
                                  gatewayip=dicts.get("Gateway IP"), computetype=dicts.get("Compute Type"),
                                  config_list=json.dumps(appling_config), rollback_list=json.dumps(rollback),
                                  activate_cmd_list=json.dumps(activate_config))
                    q1.save()
                insert_entry(taskid, count, cmplt_config_list, cmplt_rollback_list, 4, 2, 1)
                count += 1
                cmplt_config_list += ["!<-- ------------------------------------ -->!"]
                cmplt_verify_list += ["!<-- ------------------------------------ -->!"]
                cmplt_activate_cmd += ["!<-- ------------------------------------ -->!"]
                cmplt_rollback_list += ["!<-- ------------------------------------ -->!"]
                newcmplt_config_list += ["!<-- ------------------------------------ -->!"]
                newcmplt_verify_list += ["!<-- ------------------------------------ -->!"]
                newcmplt_activate_cmd += ["!<-- ------------------------------------ -->!"]
                newcmplt_rollback_list += ["!<-- ------------------------------------ -->!"]

            outputlist = {}
            outputlist["Implementation Plan"] = newcmplt_config_list
            outputlist["Pre & Post Verification"] = newcmplt_verify_list
            outputlist["Activate Configuration"] = newcmplt_activate_cmd
            outputlist["Roll-back Configuration"] = newcmplt_rollback_list
            # insert_entry(taskid,"00",cmplt_config_list,cmplt_rollback_list,cmplt_activate_cmd,4,2,1)
            # print outputlist

            return render(request, 'new_aci_config_tabs.html',
                          {'output_list': outputlist, 'action': "cmplt_config_apply"})
            # status_dict["status"] = 1
            # status_dict["added"] = count
            # status_dict["updated"] = updt_count
            # status_dict["merge"] = merge_count
            # status_dict["error_list"] = error_list
            # outputlist = {}
            # outputlist["Implementation Plan"] = cmplt_config_list
            # outputlist["Pre & Post Verification"] = cmplt_verify_list
            # outputlist["Roll-back Configuration"] = cmplt_rollback_list
            # return render(request, 'tabs.html', {'output_list': outputlist,'action':"fabric_apply"})
            # return HttpResponse(json.dumps(status_dict), content_type="application/json")
    else:
        array["status"] = 0
    returnarr = {}
    returnarr["status"] = 0;
    returnarr["msg"] = "Invalid input";
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


@login_required(login_url='/login/')
def tenant_upload_apply_old(request):
    from mysite.models import TenantDB
    from mysite.fabric_config import config_fun
    import json
    taskid = request.POST.get('taskid')
    subtaskid = request.POST.get('subtaskid')
    ip = request.POST.get('ip')
    config_action = request.POST.get('config_action')
    current_user = request.user
    uid = current_user.id
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/data/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    status_dict = {}
    # error_list = []
    count = 0
    # updt_count = 0
    # merge_count = 0
    cmplt_config_list = []
    cmplt_verify_list = []
    cmplt_rollback_list = []
    cmplt_activate_cmd = []
    newcmplt_config_list = []
    newcmplt_verify_list = []
    newcmplt_rollback_list = []
    newcmplt_activate_cmd = []
    chngId = 1
    if filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            response = get_info_dict(name)
            for dicts in response:
                if dicts.has_key("Vlanid"):
                    vlanid = [dicts.get("Vlanid")]
                    print vlanid
                    temp_dict = get_vlan_id2(vlanid)
                    print temp_dict
                    tenant = temp_dict[0]["tenant"]
                    application = temp_dict[0]["application"]
                    epg = temp_dict[0]["epg"]
                else:
                    tenant = dicts["Tenant"]
                    application = dicts["Application"]
                    epg = dicts["EPG"]
                dicts['Port Channel Num'] = taskid + "_" + subtaskid + "_" + str(chngId)
                chngId += 1
                if dicts.get("Port Type") == "physical":
                    config_file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configure Physical Ports.txt"
                elif dicts.get("Port Type") == "portchannel":
                    config_file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuring Port Channels in Leaf Nodes.txt"
                elif dicts.get("Port Type") == "vpc":
                    config_file = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/Configuring Virtual Port Channels in Leaf Nodes.txt"
                out_dict = parse_configuration(config_file)
                config_list = out_dict['config']
                verify_list = out_dict['precheck'] + out_dict['postcheck']
                activate_config = out_dict['activate_config']
                rollback = out_dict['rollback']
                appling_config = out_dict['precheck'] + out_dict['config'] + out_dict['postcheck']
                newlistconfig = changetohtmltags(request, appling_config, dicts)
                newlistactivate = changetohtmltags(request, activate_config, dicts)
                newlistverify = changetohtmltags(request, verify_list, dicts)
                newlistrollback = changetohtmltags(request, rollback, dicts)
                change_variables(request, config_list, dicts)
                change_variables(request, appling_config, dicts)
                change_variables(request, activate_config, dicts)
                change_variables(request, verify_list, dicts)
                change_variables(request, rollback, dicts)
                cmplt_config_list += appling_config
                cmplt_verify_list += verify_list
                cmplt_activate_cmd += activate_config
                cmplt_rollback_list += rollback
                newcmplt_config_list += newlistconfig
                newcmplt_verify_list += newlistverify
                newcmplt_activate_cmd += newlistactivate
                newcmplt_rollback_list += newlistrollback
                print "Tenant : " + tenant
                print "application : " + application
                print "epg: " + epg
                entry = TenantDB.objects.values_list('serialno').filter(pcnum=dicts.get("Port Channel Num")).last()
                if entry:
                    print "entyr" + entry[0]
                    print "sr no " + dicts.get("Sr No")
                    print "PC Num " + dicts.get("Port Channel Num")
                    try:
                        q1 = TenantDB.objects.filter(pcnum=dicts.get("Port Channel Num")).update(tenant=tenant,
                                                                                                 application=application,
                                                                                                 epg=application,
                                                                                                 serialno=dicts.get(
                                                                                                     "Sr No"),
                                                                                                 leaf=dicts.get("Leaf"),
                                                                                                 porttype=dicts.get(
                                                                                                     "Port Type"),
                                                                                                 portmode=dicts.get(
                                                                                                     "Port Mode"),
                                                                                                 fexnum=dicts.get(
                                                                                                     "Fex Num"),
                                                                                                 speed=dicts.get(
                                                                                                     "Speed"),
                                                                                                 ip=dicts.get("IP"),
                                                                                                 gatewayip=dicts.get(
                                                                                                     "Gateway IP"),
                                                                                                 computetype=dicts.get(
                                                                                                     "Compute Type"),
                                                                                                 config_list=json.dumps(
                                                                                                     appling_config),
                                                                                                 rollback_list=json.dumps(
                                                                                                     rollback),
                                                                                                 activate_cmd_list=json.dumps(
                                                                                                     activate_config))
                    except Exception:
                        print "Update Failed"
                        print Exception
                else:
                    print "sr no 2" + dicts.get("Sr No")
                    print "PC Num 2" + dicts.get("Port Channel Num")
                    q1 = TenantDB(serialno=dicts.get("Sr No"), tenant=tenant, application=application, epg=epg,
                                  leaf=dicts.get("Leaf"), porttype=dicts.get("Port Type"),
                                  pcnum=dicts.get("Port Channel Num"), portmode=dicts.get("Port Mode"),
                                  fexnum=dicts.get("Fex Num"), speed=dicts.get("Speed"), ip=dicts.get("IP"),
                                  gatewayip=dicts.get("Gateway IP"), computetype=dicts.get("Compute Type"),
                                  config_list=json.dumps(appling_config), rollback_list=json.dumps(rollback),
                                  activate_cmd_list=json.dumps(activate_config))
                    q1.save()
                count += 1
                cmplt_config_list += ["!<-- ------------------------------------ -->!"]
                cmplt_verify_list += ["!<-- ------------------------------------ -->!"]
                cmplt_activate_cmd += ["!<-- ------------------------------------ -->!"]
                cmplt_rollback_list += ["!<-- ------------------------------------ -->!"]
                newcmplt_config_list += ["!<-- ------------------------------------ -->!"]
                newcmplt_verify_list += ["!<-- ------------------------------------ -->!"]
                newcmplt_activate_cmd += ["!<-- ------------------------------------ -->!"]
                newcmplt_rollback_list += ["!<-- ------------------------------------ -->!"]
                outputlist = {}
                outputlist["Implementation Plan"] = newcmplt_config_list
                outputlist["Pre & Post Verification"] = newcmplt_verify_list
                outputlist["Activate Configuration"] = newcmplt_activate_cmd
                outputlist["Roll-back Configuration"] = newcmplt_rollback_list
                # insert_entry(request,cmplt_config_list,cmplt_rollback_list,cmplt_activate_cmd,4,2,1)
                insert_entry(request, cmplt_config_list, cmplt_rollback_list, 4, 2, 1)
                return render(request, 'new_aci_config_tabs.html',
                              {'output_list': outputlist, 'action': "cmplt_config_apply"})
    else:
        array["status"] = 0
    returnarr = {}
    returnarr["status"] = 0;
    returnarr["msg"] = "Invalid input";
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


def get_info_dict(filename):
    infile = open(filename, 'r+')
    line = [i for i in infile.readlines()]
    # print line
    csv_data = []
    try:
        colum = re.split(r',', line[0])
        for i in colum:
            indx = colum.index(i)
            i = i.lower().strip()
            i = re.sub(" ", "_", i)
            colum[indx] = i
        for ele in line:
            row_dict = {}
            if ele == line[0]:
                continue
            else:
                match = re.split(r',', ele)
                if match:
                    loop = len(colum)
                    for v in range(0, loop):
                        if ";" in match[v]:
                            match[v] = match[v].replace(";", ",")
                        if colum[v] == "parameter":
                            match[v] = match[v].lower()
                            match[v] = re.sub(" ", "_", match[v])
                        row_dict[colum[v].strip('')] = match[v].strip('\r\n')
                    csv_data.append(row_dict)
        return csv_data
    except:
        return "File Empty or Format Error"


def get_info_dict1():
    op_dict = {}
    col_list = []
    df = pd.read_csv('/home/netserv/Webapp/mysite/data/Firewall_new.csv')
    col = df.columns
    for col1 in col:
        col_list.append(col1)
    op_dict['column'] = col_list
    result = df.to_dict('records')
    op_dict['Result'] = result
    return op_dict


def get_info_dict2(filename):
    infile = open(filename, 'r+')
    line = [i for i in infile.readlines()]
    # print line
    field_list = []
    colum = re.split(r',', line[0])
    for i in colum:
        indx = colum.index(i)
        i = i.lower().strip()
        i = re.sub(" ", "_", i)
        colum[indx] = i
    temp_dict = {}
    for ele in line:
        field_dict = {}
        if ele == line[0]:
            continue
        else:
            match = re.split(r',', ele)
            if match:
                loop = len(colum)
                for v in range(0, loop):
                    if "+" in colum[v]:
                        temp = colum[v].split("+")
                        key = temp[0]
                        increment = int(temp[1])
                        if re.match(r'\d+.\d+.\d+.\d+', match[v]):
                            temp_dict["ip_flag_" + key] = True

                        if temp_dict.get("ip_flag_" + key):
                            if temp_dict.has_key('pre' + key):
                                field_val = str(IPAddress(temp_dict.get('pre' + key)) + increment)
                                temp_dict['pre' + key] = field_val
                            else:

                                field_val = str(IPAddress(match[v]))
                                temp_dict['pre' + key] = field_val
                        else:
                            if temp_dict.has_key('pre' + key):
                                field_val = str(int(temp_dict.get('pre' + key)) + increment)
                                temp_dict['pre' + key] = field_val
                            else:
                                field_val = str(match[v])
                                temp_dict['pre' + key] = field_val
                        field_dict[key] = field_val
                        # if pre
                    else:
                        if ";" in match[v]:
                            value = match[v].replace(";", ",")
                        else:
                            value = match[v]
                        field_dict[colum[v].strip()] = value
                field_list.append(field_dict)
            else:
                continue
    return field_list


def update_username(request, username):
    from mysite.models import CronDB
    taskid = request.GET.get('taskid')
    subtaskid = request.GET.get('subtaskid')
    ip = request.session['sship']
    username = request.GET.get('username')
    print "updating username " + username
    print "updating ip " + ip
    # print "updating changeid "+changeid
    q1 = CronDB.objects.filter(taskid=taskid, subtaskid=subtaskid, ip=ip).update(username=username)
    if q1:
        return True
    else:
        return False;


def filter_log_1(filename):
    # session_id = request.session._get_or_create_session_key()
    # current_user = request.user
    # uid = current_user.id
    # file_upload_dir = "/home/ubuntu/prepro/mysite/mysite/data/Fabric_config/"
    # filename = file_upload_dir+ request.GET.get('changeid')+"_"+request.GET.get('ip')+ ".txt"
    if filename:
        infile = open(filename, "r+")
        log_list = [i for i in infile.readlines()]
        infile.close()
        filter_log_list = []
        for each in log_list:
            each = re.sub(r'((\^[A-Z])|(\[[A-Z])|(\^\[\[\d+m)|(\^\[\[[A-Z])|(\%)|(\[\d+m)|([a-z]\x08))', '', each)
            each = re.sub(r'\s+a', ' a', each)
            filter_log_list.append(each.translate(None, "\r\x1b"))
        data = open(filename, "w+")
        print filter_log_list
        for line in filter_log_list:
            if line == '\n':
                continue
            data.write(line)
        data.close()
    else:
        return "File Does Not Exist"


def filter_switch(each_sw):
    if re.search(r'SA01|SA03|SA05', each_sw):
        return each_sw
    elif re.search(r'SA02|SA04|SA06', each_sw):
        return ""


@login_required(login_url='/login/')
def aci_bulk_upload_new(request):
    print "aci_bulk_upload_New Function "
    action = request.POST.get('action')
    taskid = request.POST.get('taskid')
    request.session["is_bulk"] = True
    customer = request.session['customer']
    count = 0
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    display_op = []
    br_config1 = []
    br_config2 = []
    cmplt_config_list = []
    cmplt_rollback_list = []
    outputlist = {}
    if filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            response = get_info_dict2(name)
            subtaskid = 0
            # Code to eleminate odd/even switch - Temporary
            new_response = response
            for dicts in response:
                if dicts.has_key('switchname'):
                    if filter_switch(dicts.get('switchname')) == "":
                        new_response.remove(dicts)

            for dicts in new_response:
                subtaskid += 1
                dicts.update(request.session['action_selected'])
                dicts['user_type'] = request.session['sel_para']['type']
                dicts['user_ios'] = request.session['sel_para']['ios']
                dicts['user_plat'] = request.session['sel_para']['plat']
                dicts['ext_dict'] = request.session["ext_dict"]
                print dicts
                if dicts.has_key('user_type') and dicts.get('user_type') == "Access Campus Switch Provisioning - Bulk":
                    if dicts.has_key("type"):
                        # print "getting this !!!!!!!!!!!!!!!!!!!!!!!!"
                        if dicts.get("type").lower() == "9400":
                            request.session["ext_dict"]["ext_name"] = "9400"
                        elif dicts.get("type").lower() == "9300":
                            request.session["ext_dict"]["ext_name"] = "9300"
                    # print request.session["ext_dict"]
                    output = inputsSubmitted_Bulk(request, dicts, request.session["ext_dict"])
                    outputlist[dicts.get('hostname')] = output[0][0].get('Implementation Plan').get("line")
                    # cmplt_config_list = cmplt_config_list+output[1]
                    # cmplt_rollback_list = cmplt_rollback_list+output[2]
                    save_to_file(taskid, session_id, dicts.get('hostname'), outputlist[dicts.get('hostname')])
                elif dicts.has_key('user_type') and dicts.get(
                        'user_type') == "Access Campus Switch Provisioning - Bulk(NEW)":
                    request.session["ext_dict"]["ext_name"] = "9300"
                    if dicts.has_key("type"):
                        # print "getting this !!!!!!!!!!!!!!!!!!!!!!!!"
                        if dicts.get("type").lower() == "9400":
                            request.session["ext_dict"]["ext_name"] = "9400"
                        elif dicts.get("type").lower() == "9300":
                            request.session["ext_dict"]["ext_name"] = "9300"
                    # print request.session["ext_dict"]
                    output = inputsSubmitted_Bulk(request, dicts, request.session["ext_dict"])
                    outputlist[dicts.get('hostname')] = output[0][0].get('Implementation Plan').get("line")
                    # cmplt_config_list = cmplt_config_list+output[1]
                    # cmplt_rollback_list = cmplt_rollback_list+output[2]
                    save_to_file(taskid, session_id, dicts.get('hostname'), outputlist[dicts.get('hostname')])
                elif dicts.has_key('user_type') and dicts.get('user_type') == "Switch Consolidation":
                    request.session["ext_dict"]["ext_name"] = "9400"
                    if dicts.has_key("type"):
                        # print "getting this !!!!!!!!!!!!!!!!!!!!!!!!"
                        if dicts.get("type").lower() == "9400":
                            request.session["ext_dict"]["ext_name"] = "9400"
                        elif dicts.get("type").lower() == "9300":
                            request.session["ext_dict"]["ext_name"] = "9300"
                    output = inputsSubmitted_Bulk(request, dicts, request.session["ext_dict"])
                    outputlist[dicts.get('hostname')] = output[0][0].get('Implementation Plan').get("line")
                    save_to_file(taskid, session_id, dicts.get('hostname'), outputlist[dicts.get('hostname')])
                elif dicts.has_key('user_type') and dicts.get('user_type') == "Cisco-SDA Bulk":
                    if dicts.has_key("type"):
                        print customer
                        dicts["username"] = ""
                        dicts["password"] = ""
                        dicts["domain_name"] = ""
                        dicts["snmp_rw"] = ""
                        dicts["snmp_ro"] = ""
                        qry = template_db.objects.values_list("ext_label", "ext_value").filter(
                            template="Cisco-SDA", ios=dicts['user_ios'], customer__contains=customer).last()
                        print customer
                        if qry:
                            et_lbl = qry[0].split(",")
                            et_vlu = qry[1].split(",")
                            ext_dict = dict(zip(et_lbl, et_vlu))
                            print ext_dict
                            request.session["ext_dict"]["ext_name"] = ext_dict[dicts.get("type")]
                        if dicts.get("type").lower() == "fe":

                            request.session["ext_dict"]["ext_name"] = "fe"
                            op_temp = inputsSubmitted_Bulk(request, dicts, {"ext_name": "ds1_int"})
                            op = op_temp[0][0].get('Implementation Plan').get("line")
                            saving_op = parse_configuration_2(op)["config"]
                            for ele in saving_op:
                                if re.search(r'Configuration:', ele):
                                    saving_op.remove(ele)
                            save_to_file(taskid, session_id, "XXX-CORE-BR-01", saving_op)
                            br_config1 += saving_op
                            op_temp = inputsSubmitted_Bulk(request, dicts, {"ext_name": "ds2_int"})
                            op = op_temp[0][0].get('Implementation Plan').get("line")
                            saving_op = parse_configuration_2(op)["config"]
                            for ele in saving_op:
                                if re.search(r'Configuration:', ele):
                                    saving_op.remove(ele)
                            save_to_file(taskid, session_id, "XXX-CORE-BR-02", saving_op)
                            br_config2 += saving_op
                    output = inputsSubmitted_Bulk(request, dicts, request.session["ext_dict"])
                    print "?????? Oputu in Bulk Function "
                    print output[0][0].get('Implementation Plan').get("line")
                    outputlist[dicts.get('hostname')] = output[0][0].get('Implementation Plan').get("line")
                    # cmplt_config_list = cmplt_config_list+output[1]
                    # cmplt_rollback_list = cmplt_rollback_list+output[2]
                    save_to_file(taskid, session_id, dicts.get('hostname'), outputlist[dicts.get('hostname')])

                else:
                    if dicts.has_key('vlan_id'):
                        from mysite.models import ACI_EPG_Mapping
                        e1 = ACI_EPG_Mapping.objects.values_list('tenant_name', 'app_profile', 'epg_name').filter(
                            vlan=dicts.get('vlan_id')).last()
                        if e1:
                            dicts["tenant_name"] = e1[0]
                            dicts["application_name"] = e1[1]
                            dicts["epg_name"] = e1[2]
                    if dicts.has_key("port_type"):
                        if dicts.get("port_type").lower() == "physical":
                            request.session["ext_dict"]["ext_name"] = "phy"
                        elif dicts.get("port_type").lower() == "portchannel":
                            request.session["ext_dict"]["ext_name"] = "pc"
                        elif dicts.get("port_type").lower() == "vpc":
                            request.session["ext_dict"]["ext_name"] = "vpc"
                        elif dicts.get("port_type").lower() == "fex":
                            request.session["ext_dict"]["ext_name"] = "fex"
                    elif dicts.has_key("leaf_type"):
                        if dicts.get("leaf_type").lower() == "Compute-Fiber":
                            request.session["ext_dict"]["ext_name"] = "fiber"
                        elif dicts.get("leaf_type").lower() == "Compute-Copper":
                            request.session["ext_dict"]["ext_name"] = "copper"
                        elif dicts.get("leaf_type").lower() == "Service":
                            request.session["ext_dict"]["ext_name"] = "service"
                        elif dicts.get("leaf_type").lower() == "Boarder":
                            request.session["ext_dict"]["ext_name"] = "boarder"

                    # print request.session["ext_dict"]
                    # logging.info(dicts)
                    output = inputsSubmitted_Bulk(request, dicts, request.session["ext_dict"])
                    # print output
                    # return HttpResponse(output)
                    cmplt_config_list = cmplt_config_list + output[1]
                    cmplt_rollback_list = cmplt_rollback_list + output[2]
                    if len(display_op) == 0:
                        display_op = output[0]
                    else:
                        for el in output[0]:
                            tempdict = {}
                            for key, val in el.iteritems():
                                print key
                                if type(val) is dict:
                                    for k, v in val.iteritems():
                                        print k
                                        if type(v) is list:
                                            for ele in display_op:
                                                if ele.has_key(key):
                                                    indx = display_op.index(ele)
                                                    display_op[indx][key][k] = display_op[indx].get(key).get(k) + [
                                                        "!<-------------------------END---------------------------->!"] + v
                                                    print display_op[indx].get(key).get(k)
                                else:
                                    for ele in display_op:
                                        if ele.has_key(key):
                                            indx = display_op.index(ele)
                                            display_op[indx][key] = display_op[indx].get(key) + [
                                                "!<----------------------------------------------------->!"] + val
                insert_entry(taskid, subtaskid, customer, dicts, dicts.get("ip"), output[1],
                             output[2], 4, 2, 1)

            if request.session["ext_dict"]["ext_name"] == "fe":
                print  "Hee in Fe template BR"
                outputlist['XXX-CORE-BR-01'] = br_config1
                outputlist['XXX-CORE-BR-02'] = br_config2
            if dicts.has_key('hostname'):
                print " Here is the locatrion ?????"
                # print outputlist
                return render(request, 'collapse.html',
                              {'output_list': outputlist, 'action': "cmplt_activate_apply"})
            else:
                return render(request, 'old_template_output_tabs.html',
                              {'output_list': display_op, "var_flag": False, "id_flag": request.session['id_flag']})
    else:
        array["status"] = 0
    returnarr = {}
    returnarr["status"] = 0;
    returnarr["msg"] = "Invalid input";
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


@login_required(login_url='/login/')
def aci_bulk_upload(request):
    print  " In Bulk Upload "
    action = request.POST.get('action')
    taskid = request.POST.get('taskid')
    subtaskid = request.POST.get('subtaskid')
    customer = request.POST.get('customer')
    count = 0
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/data/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    display_op = []
    cmplt_config_list = []
    cmplt_rollback_list = []
    outputlist = {}
    if filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            response = get_info_dict(name)
            for dicts in response:
                print dicts
                if dicts.has_key('hostname'):
                    if dicts.has_key("type"):
                        print "getting this !!!!!!!!!!!!!!!!!!!!!!!!"
                        if dicts.get("type").lower() == "9400":
                            request.session["ext_dict"]["ext_name"] = "9400"
                        elif dicts.get("type").lower() == "9300":
                            request.session["ext_dict"]["ext_name"] = "9300"
                    print request.session["ext_dict"]
                    output = inputsSubmitted_Bulk(request, dicts, request.session["ext_dict"])
                    outputlist[dicts.get('hostname')] = output[0][0].get('Implementation Plan').get("line")
                    # cmplt_config_list = cmplt_config_list+output[1]
                    # cmplt_rollback_list = cmplt_rollback_list+output[2]
                    save_to_file(taskid, session_id, dicts.get('hostname'), outputlist[dicts.get('hostname')])
                else:
                    if dicts.has_key('vlan_id'):
                        from mysite.models import ACI_EPG_Mapping
                        e1 = ACI_EPG_Mapping.objects.values_list('tenant_name', 'app_profile', 'epg_name').filter(
                            vlan=dicts.get('vlan_id')).last()
                        if e1:
                            dicts["tenant_name"] = e1[0]
                            dicts["application_name"] = e1[1]
                            dicts["epg_name"] = e1[2]
                    if dicts.has_key("port_type"):
                        if dicts.get("port_type").lower() == "physical":
                            request.session["ext_dict"]["ext_name"] = "phy"
                        elif dicts.get("port_type").lower() == "portchannel":
                            request.session["ext_dict"]["ext_name"] = "pc"
                        elif dicts.get("port_type").lower() == "vpc":
                            request.session["ext_dict"]["ext_name"] = "vpc"
                        elif dicts.get("port_type").lower() == "fex":
                            request.session["ext_dict"]["ext_name"] = "fex"
                    elif dicts.has_key("leaf_type"):
                        if dicts.get("leaf_type").lower() == "Compute-Fiber":
                            request.session["ext_dict"]["ext_name"] = "fiber"
                        elif dicts.get("leaf_type").lower() == "Compute-Copper":
                            request.session["ext_dict"]["ext_name"] = "copper"
                        elif dicts.get("leaf_type").lower() == "Service":
                            request.session["ext_dict"]["ext_name"] = "service"
                        elif dicts.get("leaf_type").lower() == "Boarder":
                            request.session["ext_dict"]["ext_name"] = "boarder"

                    print request.session["ext_dict"]
                    output = inputsSubmitted_Bulk(request, dicts, request.session["ext_dict"])
                    # print output
                    cmplt_config_list = cmplt_config_list + output[1]
                    cmplt_rollback_list = cmplt_rollback_list + output[2]
                    if len(display_op) == 0:
                        display_op = output[0]
                    else:
                        for el in output[0]:
                            tempdict = {}
                            for key, val in el.iteritems():
                                print key
                                if type(val) is dict:
                                    for k, v in val.iteritems():
                                        print k
                                        if type(v) is list:
                                            for ele in display_op:
                                                if ele.has_key(key):
                                                    indx = display_op.index(ele)
                                                    display_op[indx][key][k] = display_op[indx].get(key).get(k) + [
                                                        "!<----------------------------------------------------->!"] + v
                                                    print display_op[indx].get(key).get(k)
                                else:
                                    for ele in display_op:
                                        if ele.has_key(key):
                                            indx = display_op.index(ele)
                                            display_op[indx][key] = display_op[indx].get(key) + [
                                                "!<----------------------------------------------------->!"] + val
            if dicts.has_key('hostname'):
                return render(request, 'new_aci_config_tabs.html',
                              {'output_list': outputlist, 'action': "cmplt_activate_apply"})
            else:
                insert_entry(taskid, subtaskid, customer, [], "", cmplt_config_list, cmplt_rollback_list, 4, 2, 1)
                return render(request, 'old_template_output_tabs.html',
                              {'output_list': display_op, "var_flag": False, "id_flag": request.session['id_flag']})

    else:
        array["status"] = 0
    returnarr = {}
    returnarr["status"] = 0;
    returnarr["msg"] = "Invalid input";
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


@login_required(login_url='/login/')
def bulk_tso_provision(request):
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    # try:
    if filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            response = get_info_dict(name)
            overwrite_flag = request.POST.get("overwrite")
            print overwrite_flag
            output_dic = bulk_ts_provision_fun(response, overwrite_flag)
            if output_dic["flag"]:
                return render(request, 'notification.html', {'output_list': output_dic["op"], 'class': 'alert-danger'})
            else:
                return render(request, 'patching_output.html',
                              {'output_dict': output_dic["op"], 'passed': output_dic["passed"],
                               "failed": output_dic["failed"]})
    else:
        returnarr = {}
        returnarr["status"] = 0
        returnarr["msg"] = "Invalid File"
        return HttpResponse(json.dumps(returnarr), content_type="application/json")
        # except Exception as e:
        #     returnarr = {}
        #     returnarr["status"] = 0;
        #     returnarr["msg"] = e.message;
        #     return HttpResponse(json.dumps(returnarr), content_type="application/json")


def bulk_ts_provision_fun(response, overwrite_flag):
    op_dict = {}
    config_flag = True
    passed = 0
    failed = 0
    err_flag = False
    for dicts in response:
        # print dicts
        if dicts.has_key("tso_id") and dicts.has_key("device_type"):
            var_dict = {}
            from mysite.models import StationDb
            entry = StationDb.objects.values_list('stationid', 'switch', 'blade', 'portno',
                                                  'overwrite_flag', 'userid').filter(
                stationid=dicts.get("tso_id")).last()
            if not entry:
                output = "TSO : " + str(dicts.get("tso_id")) + " Does not Exist "
                failed += 1
                op_dict[var_dict["tso_id"]] = {'validation_flag': "NA",
                                               'config_status': output,
                                               'validation_detail': ["NA"],
                                               "precheck_detail": ["NA"],
                                               'precheck_flag': "NA", "switch": "NA"}
            # else:
            #     var_dict = {}
            #     var_dict["tsoid"] = entry[0]
            #     var_dict["hostname"] = entry[1]
            #     var_dict["interface"] = "g" + entry[2] + "/0/" + entry[3]
            #     var_dict["devicetype"] = entry[4]
            #     # put Update statement for manufacuture and model get from user
            #     if dicts.get("tso_id") !="":
            #         config_op = "TSOID " + str(dicts.get("tso_id")) + " successfully provisioned on " + \
            #                     var_dict["interface"]
            #         validation_op = ["-	Verified Link is UP","-	Verified Connectivity to the device"]
            #         precheck_op = []
            #         op_dict[var_dict["tsoid"]] = {'validation_flag': True,
            #                                       'config_status': config_op,
            #                                       'validation_detail': validation_op,
            #                                       "precheck_detail": precheck_op,
            #                                       'precheck_flag': True, "switch": var_dict["hostname"]}
            #         # print op_dict
            else:
                var_dict["tso_id"] = entry[0]
                var_dict["hostname"] = entry[1]
                if str(var_dict["hostname"]) == "NA":
                    output = "Switch Not Assigned to TSOID"
                    failed += 1
                    op_dict[var_dict["tso_id"]] = {'validation_flag': "NA",
                                                   'config_status': output,
                                                   'validation_detail': ["NA"],
                                                   "precheck_detail": ["NA"],
                                                   'precheck_flag': "NA", "switch": "NA"}
                    continue
                else:
                    with open("/home/ubuntu/prepro/mysite/mysite/patching data/Switch.json", "r") as data:
                        sw_data = json.load(data)
                        var_dict["host_ip"] = sw_data.get(var_dict["hostname"]).get('loopback')
                device_type = dicts.get("device_type")
                with open("/home/ubuntu/prepro/mysite/mysite/patching data/tso_vlan.json", "r") as vlan_data:
                    device_data = json.load(vlan_data)
                    var_dict["vrf"] = device_data.get(device_type).get('vrf')
                    var_dict["vlan"] = device_data.get(device_type).get('vlanid')
                var_dict["interface"] = "g" + entry[2] + "/0/" + entry[3]

                tso_login = ProvisionTSO(var_dict["tso_id"], var_dict["host_ip"])
                status = tso_login.get_login_status()
                if not status["flag"]:
                    op_dict[var_dict["tso_id"]] = {'validation_flag': "NA",
                                                   'config_status': status["msg"],
                                                   'validation_detail': ["NA"],
                                                   "precheck_detail": ["NA"],
                                                   'precheck_flag': "skip",
                                                   "switch": var_dict["hostname"]}
                    return render(request, 'patching_output.html',
                                  {'output_dict': op_dict, "passed": passed, "failed": failed})
                else:
                    if overwrite_flag == "no":
                        if entry[4] == "1":
                            print entry[5]
                            output = "TSO : " + str(dicts.get("tso_id")) + " is already provisioned by " + \
                                     entry[5]
                            failed += 1
                            op_dict[var_dict["tso_id"]] = {'validation_flag': "NA",
                                                           'config_status': output,
                                                           'validation_detail': ["NA"],
                                                           "precheck_detail": ["NA"],
                                                           'precheck_flag': "skip",
                                                           "switch": var_dict["hostname"]}
                            continue
                        else:
                            precheck = tso_login.tso_precheck_fun(var_dict["host_ip"], var_dict["interface"])
                            if not precheck["flag"]:
                                failed += 1
                                pre_output = "TSO : " + str(dicts.get("tso_id")) + " " + precheck["msg"]
                    else:
                        precheck = tso_login.tso_precheck_fun(var_dict["host_ip"], var_dict["interface"])
                        if not precheck["flag"]:
                            pre_output = "TSO : " + str(dicts.get("tso_id")) + " " + precheck["msg"]
                    if config_flag:
                        file = "/home/ubuntu/prepro/mysite/mysite/user_templates/tso_templates/" + var_dict[
                            "vlan"] + "_template.txt"
                        infile = open(file, "r")
                        filelines = [i.strip('\r\n') for i in infile.readlines()]
                        command_list = change_var_tso_provision(filelines, var_dict)
                        print command_list
                        output = tso_login.tso_config_fun(command_list)
                        if output["flag"]:
                            passed += 1
                            q = StationDb.objects.filter(stationid=var_dict["tso_id"]).update(
                                overwrite_flag="1", userid=str(getusersubdept(request)).upper())
                        if dicts.has_key("connectivity") and dicts.get(
                                "connectivity").lower() == "yes" and dicts.has_key("test_ip"):
                            print " In Validation "
                            post_op = tso_login.tso_postcheck_fun(var_dict, dicts.get("test_ip"))
                            validation_op = post_op['msg']
                            validation_flag = post_op['flag']
                        else:
                            validation_op = ["NA"]
                            validation_flag = "NA"
                        config_op = output["msg"]
                        # validation_op = ["Verified Link is UP", "Verified Connectivity to the device"]
                        precheck_op = [precheck["msg"]]
                        op_dict[var_dict["tso_id"]] = {'validation_flag': validation_flag,
                                                       'config_status': config_op,
                                                       'validation_detail': validation_op,
                                                       "precheck_detail": precheck_op,
                                                       'precheck_flag': precheck["flag"],
                                                       "switch": var_dict["hostname"]}
                        # return render(request, 'patching_output.html',
                        #               {'output_dict': op_dict, "passed":"1", "failed":"0"})
                        # else:
                        #     config_op = "TSOID " + str(var_dict["tso_id"]) + " successfully provisioned on " + var_dict["interface"]
                        #     validation_op = []
                        #     precheck_op = []
                        #     op_dict[var_dict["tso_id"]] = {'validation_flag': True,
                        #                                 'config_status': config_op,
                        #                                 'validation_detail': validation_op, "precheck_detail":precheck_op,
                        #                                 'precheck_flag': True, "switch": var_dict["hostname"]}
                        # print op_dict
                        # return render(request, 'patching_output.html',
                        #           {'output_dict': op_dict, "passed":"1", "failed":"0"})
        else:
            err_flag = True
            output = "Please check the column names in the file."
            return {"flag": err_flag, "op": output}
    return {"flag": err_flag, "op": op_dict, "passed": passed, "failed": failed}


def save_to_file(taskid, session_id, hostname, op_list):
    FILE_DL_DIR = "/home/ubuntu/prepro/mysite/mysite/data/" + str(taskid)
    if not os.path.isdir(FILE_DL_DIR):
        os.makedirs(FILE_DL_DIR)
    fname = FILE_DL_DIR + "/" + str(hostname) + ".txt"
    data = open(fname, "a+")
    output_list = filter_command_list(op_list)
    print "saving to file "
    for line in output_list:
        data.write(line.encode('utf8') + "\n")
    data.close()


def zip_folder(folder_path, output_path):
    # Retrieve the paths of the folder contents.
    contents = os.walk(folder_path)
    try:
        zip_file = zipfile.ZipFile(output_path, 'w')
        lenDirPath = len(folder_path)
        for root, folders, files in contents:
            for file_name in files:
                absolute_path = os.path.join(root, file_name)
                print "Adding '%s' to archive." % absolute_path
                zip_file.write(absolute_path, absolute_path[lenDirPath:])
        print "'%s' created successfully." % output_path
    except IOError, message:
        print message
        sys.exit(1)
    except OSError, message:
        print message
        sys.exit(1)
    except zipfile.BadZipfile, message:
        print message
        sys.exit(1)
    finally:
        zip_file.close()


def export_zip(request):
    print " Comng to zip fiction"
    if request.session.has_key("taskid"):
        taskid = request.session['taskid']
        session_id = request.session._get_or_create_session_key()
        FILE_ZIP_DIR = "/home/ubuntu/prepro/mysite/mysite/data/" + str(taskid)
        zip_folder(FILE_ZIP_DIR, FILE_ZIP_DIR + ".zip")
        filename = FILE_ZIP_DIR + ".zip"
        response = HttpResponse(file(filename))
        response['Content-Type'] = 'application/force-download'
        response['Content-Length'] = os.path.getsize(filename)
        response['Content-Disposition'] = 'attachment; filename=\"Configuration.zip\"'
        response['Accept-Ranges'] = 'bytes'
        return response
    else:
        pres_output = 'Nothing To download'
        return render(request, 'notification.html', {'output_list': pres_output, 'class': 'alert-danger'})


def precheck_interface(request, interface=""):
    returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
    return HttpResponse(json.dumps(returnarr), content_type="application/json")
    template = request.session["user_type"]
    extension = request.session["ext_dict"]
    username = request.GET.get('username')
    password = request.GET.get('password')
    devices = request.GET.get('devices')
    print extension
    ip = get_device_ip(devices)
    returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
    return HttpResponse(json.dumps(returnarr), content_type="application/json")
    if re.search(r'192.1.1', ip):
        returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
        return HttpResponse(json.dumps(returnarr), content_type="application/json")
    if "ACI" in template and extension.has_key("action") and extension["action"] == "reserve":
        # returnarr = {"msg":"Interface is up", "status":"0", "flag":True}
        # return HttpResponse(json.dumps(returnarr), content_type="application/json")
        port = request.GET.get('physicalport')
        cmd_list = []
        if port is None:
            returnarr = {"msg": "Interface is down", "status": "0", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
        if "-" in port:
            m = re.search(r"\S+\s?(\d)\/(\d+)-(\d+)", port)
            if m:
                lc = m.group(1)
                p_strt = m.group(2)
                p_end = m.group(3)
                for i in range(int(p_strt), int(p_end) + 1):
                    cmd_list.append("fabric 101 show interface eth" + str(lc) + "/" + str(i))
        else:
            cmd_list.append("fabric 101 show interface " + str(port))
        print cmd_list

    elif extension.has_key("action") and extension["action"] == "reserve":
        port = request.GET.get('physicalport')
        if port is None:
            returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
        cmd_list = []
        if "-" in port:
            m = re.search(r"\S+\s?(\d)\/(\d+)-(\d+)", port)
            if m:
                lc = m.group(1)
                p_strt = m.group(2)
                p_end = m.group(3)
                for i in range(int(p_strt), int(p_end) + 1):
                    cmd_list.append("show interface ethernet " + str(lc) + "/" + str(i))
        else:
            cmd_list.append("show interface " + str(port))
    else:
        port = interface
        if port is None:
            returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
        cmd_list = []
        cmd_list.append("show interface " + str(port))
    if len(cmd_list) > 0:
        ip = get_device_ip(devices)
        addr = username + "@" + ip
        COMMAND_PROMPT = '\S+#'
        child = pexpect.spawn('ssh -c aes256-ctr -oHostKeyAlgorithms=+ssh-dss ' + addr, timeout=30)
        i = child.expect([pexpect.TIMEOUT, COMMAND_PROMPT, 'password:'])
        if i == 0:
            print 'ERROR! could not login with SSH. '
            returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
        elif i == 1:
            child.sendline('\r')
            returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
        elif i == 2:
            # print child.before, child.after
            child.sendline(password)
            child.expect(COMMAND_PROMPT)
            child.sendline('terminal len 0')
            child.expect(COMMAND_PROMPT)
            for line in cmd_list:
                child.sendline(line)
                child.expect(COMMAND_PROMPT)
                print child.before + child.after
                outp = child.before
                outp = outp.split("\n")
                for line in outp:
                    match = re.search(r'Eth\S+ is (\w+)', line)
                    if match:
                        state = match.group(1)
                        print match.group(1)
                        if state == "up":
                            returnarr = {"msg": "Interface is up", "status": "0", "flag": True}
                            return HttpResponse(json.dumps(returnarr), content_type="application/json")
                        else:
                            returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
                    else:
                        returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
        return HttpResponse(json.dumps(returnarr), content_type="application/json")
    else:
        returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
        return HttpResponse(json.dumps(returnarr), content_type="application/json")


def Policy_Check(request):
    template = request.session["user_type"]
    extension = request.session["ext_dict"]
    username = request.GET.get('username')
    password = request.GET.get('password')
    devices = request.GET.get('devices')
    print "Policy check \n", extension
    ip = get_device_ip(devices)
    returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
    return HttpResponse(json.dumps(returnarr), content_type="application/json")
    if re.search(r'192.1.1', ip):
        returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
        return HttpResponse(json.dumps(returnarr), content_type="application/json")
    if "ACI" in template and extension.has_key("action") and extension["action"] == "reserve":
        leaf_id = request.GET.get('leaf_id')
        port = request.GET.get('physicalport')
        print port
        if port is None:
            returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
        cmd_list = []
        if "-" in port:
            m = re.search(r"\S+\s?(\d)\/(\d+)-(\d+)", port)
            if m:
                lc = m.group(1)
                p_strt = m.group(2)
                p_end = m.group(3)
                for i in range(int(p_strt), int(p_end) + 1):
                    cmd_list.append("show running-config leaf " + leaf_id + " interface eth" + str(lc) + "/" + str(i))
        else:
            cmd_list.append("show running-config leaf " + leaf_id + " interface " + str(port))
        print cmd_list
        ip = get_device_ip(devices)
        addr = username + "@" + ip
        print 'ssh -c aes256-ctr -oHostKeyAlgorithms=+ssh-dss ' + addr
        COMMAND_PROMPT = '\S+#'
        child = pexpect.spawn('ssh -c aes256-ctr -oHostKeyAlgorithms=+ssh-dss ' + addr, timeout=30)
        i = child.expect([pexpect.TIMEOUT, COMMAND_PROMPT, 'password:'])
        if i == 0:
            print 'ERROR! could not login with SSH. '
            returnarr = {"msg": "Error SSH", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
        elif i == 1:
            child.sendline('\r')
            returnarr = {"msg": "UnExpected Error", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
        elif i == 2:
            # print child.before, child.after
            child.sendline(password)
            child.expect(COMMAND_PROMPT)
            child.sendline('terminal len 0')
            child.expect(COMMAND_PROMPT)
            for line in cmd_list:
                child.sendline(line)
                child.expect(COMMAND_PROMPT)
                print child.before + child.after
                outp = child.before
                outp = outp.split("\n")
                for line in outp:
                    match = re.search(r'Policy-group configured', line)
                    if match:
                        returnarr = {"msg": "Policy Group Configured", "status": "0", "flag": True}
                        return HttpResponse(json.dumps(returnarr), content_type="application/json")
                    else:
                        returnarr = {"msg": "Policy Group Not Configured", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
    else:
        returnarr = {"msg": "Policy Group Not Configured", "status": "1", "flag": False}
        return HttpResponse(json.dumps(returnarr), content_type="application/json")


def MAC_table_Check(request):
    template = request.session["user_type"]
    extension = request.session["ext_dict"]
    username = request.GET.get('username')
    password = request.GET.get('password')
    devices = request.GET.get('devices')
    print extension
    if "ACI" in template and extension.has_key("action") and extension["action"] == "reserve":
        port = request.GET.get('physicalport')
        if port is None:
            returnarr = {"msg": "Interface is down", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
        cmd_list = []
        if "-" in port:
            m = re.search(r"\S+\s?(\d)\/(\d+)-(\d+)", port)
            if m:
                lc = m.group(1)
                p_strt = m.group(2)
                p_end = m.group(3)
                for i in range(int(p_strt), int(p_end) + 1):
                    cmd_list.append("show mac address-table interface eth" + str(lc) + "/" + str(i))
        else:
            cmd_list.append("show mac address-table interface " + str(port))
        print cmd_list
        ip = get_device_ip(devices)
        addr = username + "@" + ip
        COMMAND_PROMPT = '\S+#'
        child = pexpect.spawn('ssh -c aes256-ctr -oHostKeyAlgorithms=+ssh-dss ' + addr, timeout=30)
        i = child.expect([pexpect.TIMEOUT, COMMAND_PROMPT, 'password:'])
        if i == 0:
            print 'ERROR! could not login with SSH. '
            returnarr = {"msg": "Error SSH", "status": "1", "flag": False}
        elif i == 1:
            child.sendline('\r')
            returnarr = {"msg": "UnExpected Error", "status": "1", "flag": False}
        elif i == 2:
            # print child.before, child.after
            child.sendline(password)
            child.expect(COMMAND_PROMPT)
            child.sendline('terminal len 0')
            child.expect(COMMAND_PROMPT)
            for line in cmd_list:
                child.sendline(line)
                child.expect(COMMAND_PROMPT)
                print child.before + child.after
                outp = child.before
                outp = outp.split("\n")
                for line in outp:
                    match = re.search(
                        r'(([a-fA-F0-9]{2}-){5}[a-fA-F0-9]{2}|([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}|([0-9A-Fa-f]{4}\.){2}[0-9A-Fa-f]{4})',
                        line)
                    if match:
                        returnarr = {"msg": "MAC table exist", "status": "0", "flag": True}
                        return HttpResponse(json.dumps(returnarr), content_type="application/json")
                    else:
                        returnarr = {"msg": "MAC table does not exist", "status": "1", "flag": False}
            return HttpResponse(json.dumps(returnarr), content_type="application/json")
    else:
        returnarr = {"msg": "MAC table does not exist", "status": "1", "flag": False}
        return HttpResponse(json.dumps(returnarr), content_type="application/json")


def upload_switch_info(request, store_no, filename):
    status_dict = {"status": 0, "msg": ""}
    count = 0
    exist_count = 0
    error_count = 0
    error_list = []
    info_list = get_deviceinfo_list(filename)
    for line in info_list:
        if line.has_key('juniperinterface') and re.search(r'\S+/\d+', line.get('juniperinterface')):
            # print line
            entry = SwitchMigrationDB.objects.filter(storeno=store_no, newswitch=line['juniperswitch'],
                                                     newinterface=line['juniperinterface']).order_by('timestamp').last()
            if entry:
                # print "updated"
                exist_count += 1
                q1 = SwitchMigrationDB.objects.filter(storeno=store_no, newswitch=line['juniperswitch'],
                                                      newinterface=line['juniperinterface']).update(
                    existingswitch=line['ciscoswitch'], newswitch=line['juniperswitch'],
                    oldinterface=line['ciscointerface'])
                count += 1
            else:
                # print "New Added/"
                q1 = SwitchMigrationDB(storeno=store_no, newinterface=line['juniperinterface'],
                                       existingswitch=line['ciscoswitch'], newswitch=line['juniperswitch'],
                                       oldinterface=line['ciscointerface'])
                q1.save()
                count += 1
            status_dict["status"] = 1
            status_dict["error_list"] = error_list
            status_dict["exist"] = exist_count
            status_dict["error"] = error_count
            status_dict["added"] = count
    print status_dict
    return status_dict


def upload_network_connections(request, filename):
    customer = request.session["customer"]
    status_dict = {"status": 0}
    # count = 0
    # exist_count = 0
    # error_count = 0
    # error_list = []
    info_list = get_deviceinfo_list(filename)
    for line in info_list:
        if line.has_key('sourcedevice') and line.get('sourcedevice') != "":
            # print line
            entry = NetworkConnectionDB.objects.filter(name=line['name'], customer=customer,
                                                       source_device=line['sourcedevice']).order_by('timestamp').last()
            if entry:
                # print "updated"
                # exist_count += 1
                q1 = NetworkConnectionDB.objects.filter(name=line['name'], customer=customer,
                                                        source_device=line['sourcedevice']).update(
                    source_interface=line['sourceinterface'], destination_device=line['destinationdevice'],
                    destination_interface=line['destinationinterface'], subnet=line['subnet'], vlan=line['vlan'],
                    connection_number=line["connectionnumber"])
                # count += 1
            else:
                # print "New Added/"
                q1 = NetworkConnectionDB(name=line['name'], customer=customer, source_device=line['sourcedevice'],
                                         source_interface=line['sourceinterface'],
                                         destination_device=line['destinationdevice'],
                                         destination_interface=line['destinationinterface'], subnet=line['subnet'],
                                         vlan=line['vlan'], connection_number=line["connectionnumber"])
                q1.save()
                # count += 1
            status_dict["status"] = 1
            # status_dict["error_list"] = error_list
            # status_dict["exist"] = exist_count
            # status_dict["error"] = error_count
            # status_dict["added"] = count
    print status_dict
    return status_dict


def get_input_type(type):
    print type
    if type == "Text":
        return "0"
    elif type == "Radio":
        return "1"
    elif type == "Dropdown":
        return "2"
    elif type == "Fixed":
        return "3"


def parameter_upload(request):
    action = request.POST.get('action')
    location = request.POST.get('location')
    # customer = request.POST.get('customer')
    customer = request.session['customer']
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    if filename.endswith('.csv') and request.POST.get('upload_type') == "greenfield":
        project_no = request.POST.get('project_no')
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            # response = upload_switch_info(request, store, name)
            status_dict = {"status": 0, "msg": ""}
            count = 0
            exist_count = 0
            error_count = 0
            error_list = []
            info_list = get_info_dict(name)
            print info_list
            for dicts in info_list:
                from django.db.models import Q
                # print dicts
                query = SetupParameters.objects.filter(variable=dicts["parameter"], customer=customer,
                                                       location="all").last()
                if query:
                    if "," in dicts["value"]:
                        value = dicts["value"].split(',')
                        value = json.dumps(value)
                    else:
                        value = dicts["value"]

                    if action == "add":
                        entry = UserInputValueDb.objects.filter(field_name=dicts["parameter"], customer=customer,
                                                                taskid=project_no).last()
                        if entry:
                            error_list.append("Parameter value already exists : %s" % dicts["parameter"])
                            error_count += 1
                        else:
                            entry = UserInputValueDb(field_name=dicts["parameter"], customer=customer,
                                                     taskid=project_no, field_value=value)
                            entry.save()
                            count += 1
                    elif action == "update":
                        entry = UserInputValueDb.objects.filter(field_name=dicts["parameter"], customer=customer,
                                                                taskid=project_no).last()
                        if entry:
                            entry = UserInputValueDb.objects.filter(field_name=dicts["parameter"], customer=customer,
                                                                    taskid=project_no).update(field_value=value)
                            exist_count += 1

                        else:
                            error_list.append("Parameter Does NOT exists , Please Add New: %s" % dicts["parameter"])
                            error_count += 1
                else:
                    error_list.append("Parameter Does NOT exists in input list: %s" % dicts["parameter"])
                    error_count += 1

            status_dict["status"] = 1
            status_dict["error_list"] = error_list
            status_dict["exist"] = exist_count
            status_dict["error"] = error_count
            status_dict["added"] = count
            return HttpResponse(json.dumps(status_dict), content_type="application/json")
    if filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            # response = upload_switch_info(request, store, name)
            status_dict = {"status": 0, "msg": ""}
            count = 0
            exist_count = 0
            error_count = 0
            error_list = []
            info_list = get_deviceinfo_list(name)
            for dicts in info_list:
                from django.db.models import Q
                print dicts
                input_type = get_input_type(dicts["inputtype"])
                print input_type
                if action == "add":
                    entry = SetupParameters.objects.filter(
                        (Q(parameter=dicts["parametername"]) | Q(variable=dicts["variable"])),
                        customer=customer, project_id=dicts["projectid"],
                        location=location).last()
                    if entry:
                        error_list.append("Parameter already exists : %s" % dicts["parametername"])
                        error_count += 1
                    else:
                        entry = SetupParameters(parameter=dicts["parametername"], customer=customer, location=location,
                                                variable=dicts["variable"], project_id=dicts["projectid"],
                                                value=dicts["value"], label=dicts["label"], type=input_type)
                        entry.save()
                        count += 1
                elif action == "update":
                    entry = SetupParameters.objects.filter(
                        (Q(parameter=dicts["parametername"]) | Q(variable=dicts["variable"])),
                        customer=customer, project_id=dicts["projectid"],
                        location=location).last()
                    if entry:
                        entry = SetupParameters.objects.filter(
                            (Q(parameter=dicts["parametername"]) | Q(variable=dicts["variable"])),
                            customer=customer, location=location).update(variable=dicts["variable"],
                                                                         project_id=dicts["projectid"],
                                                                         value=dicts["value"], label=dicts["label"],
                                                                         type=input_type)
                        exist_count += 1

                    else:
                        error_list.append("Parameter Does NOT exists , Please Add New: %s" % dicts["parametername"])
                        error_count += 1
                elif action == "delete":
                    q1 = SetupParameters.objects.filter(parameter=dicts["parametername"], project_id=dicts["projectid"],
                                                        customer=customer, location=location).last()
                    if q1:
                        q1.delete()
                        error_list.append("Parameter Deleted Successfully: %s" % dicts["parametername"])

            status_dict["status"] = 1
            status_dict["error_list"] = error_list
            status_dict["exist"] = exist_count
            status_dict["error"] = error_count
            status_dict["added"] = count
            return HttpResponse(json.dumps(status_dict), content_type="application/json")


def conversion_function(file_lines, new_platform, upling_mod):
    port_matrix_list = []
    remove_indexes = []
    display_data = {'hostname': [], 'new_uplinks': []}
    m_flag = False
    trunk_count = 0
    for line in file_lines:
        port_matrix = {}
        vlan = "-"
        port_type = "-"
        description = ""
        trunk_flag = False
        # print "Line --->"+line
        m1 = re.search("boot system", line)
        if m1:
            # print line
            indx = file_lines.index(line)
            line = line.replace(line, "boot system bootflash:packages.conf")
            # print file_lines[indx]
            file_lines[indx] = line

        m = re.search(
            "boot-start-marker|license boot level entservices|boot-end-marker|vlan internal allocation policy ascending|mtu|no mop enabled",
            line)
        if m:
            # print line, " removed line"
            # file_lines.remove(line)
            indx = file_lines.index(line)
            remove_indexes.append(indx)
        m1_1 = re.search("(\S+)#", line)
        if m1_1:
            display_data['hostname'] = m1_1.group(1)
            indx = file_lines.index(line)
            remove_indexes.append(indx)

        m2 = re.search("ip vrf forwarding (\S+)", line)
        if m2:
            # print m2.group(1)
            # print line
            indx = file_lines.index(line)
            line = "vrf forwarding " + m2.group(1)
            file_lines[indx] = line
        m3 = re.search("interface\s([G|T][A-z]+)(\d+)/(\d+)", line)
        if m3:
            new_int = ""
            interface = m3.group().split(" ")[1]
            indx = file_lines.index(line)
            cmd_line = int_config(file_lines, interface)
            for e_line in cmd_line:
                if re.search('switchport mode trunk', e_line):
                    trunk_count += 1
                    trunk_flag = True
                    port_type = "trunk "
                if re.search('switchport access vlan (\d+)', e_line):
                    match_1 = re.search('switchport access vlan (\d+)', e_line)
                    if match_1:
                        vlan = match_1.group(1)
                        port_type = "access"
                if re.search(r'description\s', e_line):
                    match_2 = re.search(r'description\s(.+)', e_line)
                    if match_2:
                        description = match_2.group(1)

            if upling_mod == '1G':
                int_type = "GigabitEthernet"
            elif upling_mod == '10G':
                int_type = "TenGigabitEthernet"
            elif upling_mod == '40G':
                int_type = "FortyGigabitEthernet"
            elif upling_mod == 'copper':
                int_type = m3.group(1)
            if new_platform == '9300':
                if trunk_flag and trunk_count == 1:
                    new_int = int_type + '1/1/1'
                    line = 'interface ' + int_type + '1/1/1'
                    display_data['new_uplinks'].append(new_int)

                elif trunk_flag and trunk_count == 2:
                    line = 'interface ' + int_type + '1/1/2'
                    new_int = int_type + '1/1/2'
                    display_data['new_uplinks'].append(new_int)
                else:
                    new_slot = int(m3.group(2))
                    line = line.replace(interface,
                                        m3.group(1) + str(new_slot) + "/0/" + m3.group(3))
                    new_int = m3.group(1) + str(new_slot) + "/0/" + m3.group(3)
            elif new_platform == '9300-stack':
                if trunk_flag and trunk_count == 1:
                    line = 'interface ' + int_type + '1/1/1'
                    new_int = int_type + '1/1/1'
                    display_data['new_uplinks'].append(new_int)
                elif trunk_flag and trunk_count == 2:
                    line = 'interface ' + int_type + '2/1/1'
                    new_int = int_type + '1/1/2'
                    display_data['new_uplinks'].append(new_int)
                else:
                    new_slot = int(m3.group(2))
                    line = line.replace(interface,
                                        m3.group(1) + str(new_slot) + "/0/" + m3.group(3))
                    new_int = m3.group(1) + str(new_slot) + "/0/" + m3.group(3)
            elif new_platform in ['9410', '9404', '9407']:
                if trunk_flag and trunk_count == 1:
                    line = 'interface ' + int_type + '5/0/1'
                    new_int = int_type + '5/0/1'
                    display_data['new_uplinks'].append(new_int)
                elif trunk_flag and trunk_count == 2:
                    line = 'interface ' + int_type + '6/0/1'
                    new_int = int_type + '6/0/1'
                    display_data['new_uplinks'].append(new_int)
                else:
                    new_slot = int(m3.group(2))
                    line = line.replace(interface,
                                        m3.group(1) + str(new_slot) + "/0/" + m3.group(3))
                    new_int = m3.group(1) + str(new_slot) + "/0/" + m3.group(3)

            # Chnages for short interface in Exixiting  Interface
            if re.search(r'^T', interface):
                m_int = re.search(r'^T[A-z]+(\d\S+)', interface)
                if m_int:
                    port_matrix['existing_int'] = "Ten" + m_int.group(1)
            elif re.search(r'^G', interface):
                m_int = re.search(r'^G[A-z]+(\d\S+)', interface)
                if m_int:
                    port_matrix['existing_int'] = "Gig" + m_int.group(1)
            elif re.search(r'^F', interface):
                m_int = re.search(r'^F[A-z]+(\d\S+)', interface)
                if m_int:
                    port_matrix['existing_int'] = "For" + m_int.group(1)

            # Chnages for short interface in New Interface
            if re.search(r'^T', new_int):
                m_int = re.search(r'^T[A-z]+(\d\S+)', new_int)
                if m_int:
                    port_matrix['new_int'] = "Ten" + m_int.group(1)
            elif re.search(r'^G', new_int):
                m_int = re.search(r'^G[A-z]+(\d\S+)', new_int)
                if m_int:
                    port_matrix['new_int'] = "Gig" + m_int.group(1)
            elif re.search(r'^F', new_int):
                m_int = re.search(r'^F[A-z]+(\d\S+)', new_int)
                if m_int:
                    port_matrix['new_int'] = "For" + m_int.group(1)
            # port_matrix['existing_int'] = interface
            # port_matrix['new_int'] = new_int
            port_matrix['vlan'] = vlan
            port_matrix['port_type'] = port_type
            port_matrix['description'] = description
            file_lines[indx] = line
            port_matrix_list.append(port_matrix)
        m4 = re.search("vrrp\s+\d+\s+ip\s+(\S+)", line)
        if m4 and not m_flag:
            # print m4.group(1)
            m_flag = True
            indx = file_lines.index(line)
            file_lines.insert(indx + 1, "vrrp 1 address-family ipv4")
            line = "address " + m4.group(1) + " primary"
            file_lines[indx] = line
            # print line

    for index in sorted(remove_indexes, reverse=True):
        del file_lines[index]

    # print display_data
    return file_lines, port_matrix_list, display_data


def port_conversion_function(file_lines, inputs_dict):
    remove_indexes = []
    hostname = ''
    json_data = {}
    platform = inputs_dict['new_platform']
    all_skip_interface = []
    if inputs_dict['sw01_skip_interface']:
        sw1_skip_int = inputs_dict['sw01_skip_interface'].replace(" ", "").split(',')
    else:
        sw1_skip_int = []
    if inputs_dict['sw02_skip_interface']:
        sw2_skip_int = inputs_dict['sw02_skip_interface'].replace(" ", "").split(',')
    else:
        sw2_skip_int = []
    skip_lc = []
    device_list = []
    if platform == "9300":
        skip_lc = [""]
    elif platform == "9400":
        skip_lc = ["3", "4"]
    interface_list = []
    for line in file_lines:

        m1_1 = re.search("(\S+)#", line)
        if m1_1:
            hostname = m1_1.group(1)
            if hostname not in json_data:
                json_data[hostname] = {}
            if hostname not in device_list:
                device_list.append(hostname)
            indx = file_lines.index(line)
            remove_indexes.append(indx)
    blade = 1
    port = 0
    new_file_lines = []
    port_mapping = []
    for device in device_list:
        if "sa01" in device.lower():
            all_skip_interface = sw1_skip_int
        if "sa02" in device.lower():
            all_skip_interface = sw2_skip_int
        device_data = device_config(file_lines, device)
        for each_line in device_data:
            port_matrix = {}
            vlan = "-"
            port_type = "-"
            description = ""
            duplex = ""
            speed = ""
            m3 = re.search("interface\s([G|T][A-z]+)(\d+)/(\d+)", each_line)
            if m3 and m3.group(2) not in skip_lc and m3.group(2) + "/" + m3.group(3) not in all_skip_interface:
                interface = m3.group().split(" ")[1]
                indx = device_data.index(each_line)
                cmd_line = int_config(device_data, interface)
                for e_line in cmd_line:
                    if re.search('switchport mode trunk', e_line):
                        port_type = "trunk "
                    if re.search('switchport access vlan (\d+)', e_line):
                        match_1 = re.search('switchport access vlan (\d+)', e_line)
                        if match_1:
                            vlan = match_1.group(1)
                            port_type = "access"
                    if re.search(r'description\s', e_line):
                        match_2 = re.search(r'description\s(.+)', e_line)
                        if match_2:
                            description = match_2.group(1)
                    if re.search(r'duplex\s', e_line):
                        match_3 = re.search(r'duplex\s(\S+)', e_line)
                        if match_3:
                            duplex = match_3.group(1)
                    if re.search(r'speed\s', e_line):
                        match_4 = re.search(r'speed\s(\d+)', e_line)
                        if match_4:
                            speed = match_4.group(1)

                int_type = m3.group(1)
                if port >= 48:
                    blade += 1
                    port = 1
                else:
                    port += 1
                new_slot = int(m3.group(2))
                if blade == 5:
                    blade += 2
                if blade == 6:
                    blade += 1

                if platform == "9400":
                    new_int = m3.group(1) + str(blade) + "/0/" + str(port)
                else:
                    new_int = m3.group(1) + str(blade) + "/" + str(port)
                each_line = each_line.replace(interface, new_int)
                interface_list.append(new_int)

                # Chnages for short interface in Exixiting  Interface
                if re.search(r'^T', interface):
                    m_int = re.search(r'^T[A-z]+(\d\S+)', interface)
                    if m_int:
                        port_matrix['existing_int'] = "Ten" + m_int.group(1)
                elif re.search(r'^G', interface):
                    m_int = re.search(r'^G[A-z]+(\d\S+)', interface)
                    if m_int:
                        port_matrix['existing_int'] = "Gig" + m_int.group(1)
                elif re.search(r'^F', interface):
                    m_int = re.search(r'^F[A-z]+(\d\S+)', interface)
                    if m_int:
                        port_matrix['existing_int'] = "For" + m_int.group(1)

                # Chnages for short interface in New Interface
                if re.search(r'^T', new_int):
                    m_int = re.search(r'^T[A-z]+(\d\S+)', new_int)
                    if m_int:
                        port_matrix['new_int'] = "Ten" + m_int.group(1)
                elif re.search(r'^G', new_int):
                    m_int = re.search(r'^G[A-z]+(\d\S+)', new_int)
                    if m_int:
                        port_matrix['new_int'] = "Gig" + m_int.group(1)
                elif re.search(r'^F', new_int):
                    m_int = re.search(r'^F[A-z]+(\d\S+)', new_int)
                    if m_int:
                        port_matrix['new_int'] = "For" + m_int.group(1)
                # port_matrix['existing_int'] = interface
                # port_matrix['new_int'] = new_int
                port_matrix['vlan'] = vlan
                port_matrix['port_type'] = port_type
                port_matrix['description'] = description
                port_matrix['duplex'] = duplex
                port_matrix['speed'] = speed
                port_matrix['color'] = ""
                port_matrix['cable'] = ""
                file_lines[indx] = line
                port_matrix['oldhostname'] = device
                port_matrix['newhostname'] = device_list[0]
                # print ">>>>>>>>>>>"
                # print port_matrix
                device_data[indx] = each_line
                port_mapping.append(port_matrix)

        # print device_data
        for intfc in interface_list:
            new_file_lines += int_config(device_data, intfc)

    for key_device in json_data.keys():
        device_output = device_config(file_lines, key_device)
        # print key_device
        for cmd_line in device_output:
            match_vlan = re.search(r"^interface\s([V|Lo]\S+)", cmd_line)
            if match_vlan:
                data_1 = {}
                # print "???",match_vlan.group(), match_vlan.group(1)
                lo_int = match_vlan.group(1)
                lo_cmd_line = int_config(device_output, lo_int)
                for e_line in lo_cmd_line:
                    m_ip = re.search(r'ip address (\S+) (\S+)\s?(\w+)?', e_line)
                    if m_ip:
                        # if "700" in lo_int:
                        # print e_line, ".........;>>", m_ip.group(1)
                        data_1["ip"] = m_ip.group(1)
                        data_1["mask"] = m_ip.group(2)
                        # if m_ip.group(3):
                        #     subnet = m_ip.group(1) + "/" + str(IPAddress(m_ip.group(1)).netmask_bits())
                        #     json_data[hostname][lo_int+"_sec"] = subnet
                    m_vip = re.search(r'standby 0 ip\s+(\S+)', e_line)
                    if "ip" in data_1:
                        if m_vip:
                            data_1["vip"] = m_vip.group(1)

                # print data_1
                json_data[key_device][lo_int] = data_1

    if platform == "9400":
        port_matrix['existing_int'] = ""
        port_matrix['new_int'] = "Ten5/0/1"
        port_matrix['vlan'] = ""
        port_matrix['port_type'] = ""
        port_matrix['description'] = "Uplink Interface to Upstream Router 1"
        port_matrix['duplex'] = ""
        port_matrix['speed'] = ""
        port_matrix['color'] = ""
        port_matrix['cable'] = ""
        file_lines[indx] = line
        port_matrix['oldhostname'] = ""
        port_matrix['newhostname'] = ""
        device_data[indx] = each_line
        port_mapping.append(port_matrix)
        if inputs_dict['no_of_device'] == "2":
            port_matrix = {}
            port_matrix['existing_int'] = ""
            port_matrix['new_int'] = "Ten6/0/1"
            port_matrix['vlan'] = ""
            port_matrix['port_type'] = ""
            port_matrix['description'] = "Uplink Interface to Upstream Router 2"
            port_matrix['duplex'] = ""
            port_matrix['speed'] = ""
            port_matrix['color'] = ""
            port_matrix['cable'] = ""
            file_lines[indx] = line
            port_matrix['oldhostname'] = ""
            port_matrix['newhostname'] = ""
            device_data[indx] = each_line
            port_mapping.append(port_matrix)
    if platform == "9300":
        port_matrix['existing_int'] = ""
        port_matrix['new_int'] = "Ten1/1/1"
        port_matrix['vlan'] = ""
        port_matrix['port_type'] = ""
        port_matrix['description'] = "Uplink Interface to Upstream Router 1"
        port_matrix['duplex'] = ""
        port_matrix['speed'] = ""
        port_matrix['color'] = ""
        port_matrix['cable'] = ""
        file_lines[indx] = line
        port_matrix['oldhostname'] = ""
        port_matrix['newhostname'] = ""
        device_data[indx] = each_line
        port_mapping.append(port_matrix)
        if inputs_dict['no_of_device'] == "2":
            port_matrix = {}
            port_matrix['existing_int'] = ""
            port_matrix['new_int'] = "Ten2/1/1"
            port_matrix['vlan'] = ""
            port_matrix['port_type'] = ""
            port_matrix['description'] = "Uplink Interface to Upstream Router 2"
            port_matrix['duplex'] = ""
            port_matrix['speed'] = ""
            port_matrix['color'] = ""
            port_matrix['cable'] = ""
            file_lines[indx] = line
            port_matrix['oldhostname'] = ""
            port_matrix['newhostname'] = ""
            device_data[indx] = each_line
            port_mapping.append(port_matrix)
    # device_cmd = device_config(file_lines, hostname)
    with open('/home/ubuntu/prepro/mysite/mysite/Json_DATA/device_subnet.json') as subnet_json_data:
        subnet_data = json.load(subnet_json_data)
    subnet_data.update(json_data)
    with open('/home/ubuntu/prepro/mysite/mysite/Json_DATA/device_subnet.json', 'w') as data:
        json.dump(subnet_data, data)

    return new_file_lines, port_mapping, device_list


def int_config(cmd_line, interface):
    count = 0
    add_flag = False
    int_config_cmds = []
    for line in cmd_line:
        if re.search('interface\s' + interface, line) and count < 1:
            add_flag = True
            count += 1
        if add_flag:
            if re.search("!", line):
                int_config_cmds.append(line)
                add_flag = False
            else:
                int_config_cmds.append(line)
    return int_config_cmds


def device_config(cmd_line, hostname):
    add_flag = False
    device_config_cmds = []
    for line in cmd_line:
        match = re.search('(\S+)#\s?show running-config', line)
        if match:
            if match.group(1).strip() == hostname.strip():
                add_flag = True
        if add_flag:
            match2 = re.search('(\S+)#', line)
            if match2:
                if match2.group(1).strip() != hostname.strip():
                    add_flag = False
            else:
                device_config_cmds.append(line)
    return device_config_cmds


def config_conversion_upload(request):
    taskid = request.POST.get('taskid')
    subtaskid = "00"
    customer = request.POST.get('customer')
    type = request.POST.get('type')
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/data/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    outputlist = {}
    if filename.endswith('.txt') and type == "migration":
        inputs_d = request.POST.get('input_values')
        # {'new_platform': '9300', 'skip_slots': '5,7'}
        inputs_d = inputs_d.replace('&quot;', '"')
        inputs = json.loads(str(inputs_d))
        print "Inputs >>>>>>>", inputs
        new_platform = inputs['new_platform']
        uplink_module = inputs['uplink_module']
        display_type = inputs['config_display']
        name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
        infile = open(name, 'r+')
        file_lines = [i.rstrip("\r\n") for i in infile.readlines()]
        # print file_lines
        oplines = conversion_function(file_lines, new_platform, uplink_module)
        output_lines = oplines[0]
        port_matrix_data = oplines[1]
        # print port_matrix_data
        display_dt = oplines[2]
        print ">>>>>>", display_dt
        # insert_entry(taskid, subtaskid, customer, {}, "", output_lines, {}, [], 4, 2, 1)
        # port_matrix_display = ["<strong>Exisiting    |    New    |    Vlan    |    Port Type</strong>"]
        # for e_dict in port_matrix_data:
        #     print e_dict
        #     port_matrix_display.append(e_dict['existing_int']+"    |    "+e_dict['new_int']+"    |    "+e_dict['vlan']+"    |    "+e_dict['port_type'])
        outputlist["Configuration"] = []
        outputlist["Configuration"].append('<strong># Following is ' + new_platform + ' Configuration</strong>')
        outputlist["Configuration"].append('<strong># Hostname "' + display_dt['hostname'] + '" </strong>')
        outputlist["Configuration"].append('<strong># Management IP <' + "--" + '> </strong>'
                                                                                '')
        new_uplink = ", ".join(display_dt['new_uplinks'])
        outputlist["Configuration"].append('<strong># New Uplinks "' + new_uplink + '" </strong>')
        outputlist["Configuration"] += output_lines
        # outputlist["Port Matrix"] = port_matrix_display
        var_flag = get_variable_flag(output_lines)
        # txt_download = 1

        rem_ind = []
        for e_dict in port_matrix_data:
            if e_dict['port_type'] == '-':
                # if e_dict['vlan'] == '-' :
                indx = port_matrix_data.index(e_dict)
                rem_ind.append(indx)

        for index in sorted(rem_ind, reverse=True):
            del port_matrix_data[index]

        return render(request, 'tabs_table.html', {'output_list': outputlist, 'tablelist': port_matrix_data})
    if filename.endswith('.txt') and type == "port_migration":
        name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
        infile = open(name, 'r+')

        file_lines = [i.rstrip("\r\n") for i in infile.readlines()]
        inputs = request.POST.get('input_values').replace('&quot;', '"')

        inputs_dict = json.loads(inputs)
        inputs_dict = ast.literal_eval(json.dumps(inputs_dict))
        print "<<<<<<<<<<elconfig_dict"
        print inputs_dict
        # print inputs["sr_no"]
        # print file_lines
        # inputs_dict = inputs.replace('&quot;',"")
        oplines = port_conversion_function(file_lines, inputs_dict)
        output_lines = oplines[0]
        port_matrix_data = oplines[1]
        hostname_list = oplines[2]
        # print hostname_list
        inputs_dict['sr_no'] = "1"
        inputs_dict['hostname'] = hostname_list
        inputs_dict['user_type'] = request.session['sel_para']['type']
        request.session["ext_dict"]['ext_name'] = inputs_dict['new_platform']
        output = inputsSubmitted_Bulk(request, inputs_dict, request.session["ext_dict"])

        for each in output[0]:
            for k, v in each.iteritems():
                if k == "Implementation Plan":
                    outputlist[k] = v['line']

                else:
                    if inputs_dict['no_of_device'] == "1":
                        if "1" in k:
                            outputlist[k] = v
                    else:
                        outputlist[k] = v

        outputlist["Configuration"] = []
        outputlist["Configuration"] += output_lines

        print outputlist.keys()
        return render(request, 'tabs_table.html', {'output_list': outputlist, 'tablelist': port_matrix_data})
    if filename.endswith('.txt') and type == "Consolidation":
        a = 2

    if filename.endswith('.txt') and type == "cisco_to_juniper":
        request.session["type"] = type
        skip_ints = request.POST["skip_int"]
        if "," in skip_ints:
            skip_interface = skip_ints.split(",")
        else:
            skip_interface = [skip_ints]
        name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
        print skip_interface
        op_list = []
        C2J_data = Cisco_to_Juniper(name, skip_interface)
        op_list = C2J_data.create_output_file()
        csv_download = C2J_data.create_csv()
        sw_name = C2J_data.get_switch_name()
        request.session["sw_name"] = sw_name
        # for k, v in data_dict.iteritems():
        #     op_list.append( str(k)+" >>>>>>>> "+ str(v))
        outputlist["Configuration"] = op_list
        var_flag = False
        # txt_download = 1
        return render(request, 'tabs_configuration.html',
                      {'output_list': outputlist, "var_flag": var_flag, "txt_download": 1})
    if filename.endswith('.txt') and type == "cisco_to_juniper_by_vlan":
        request.session["type"] = type
        skip_ints = request.POST["skip_int"]
        if "," in skip_ints:
            skip_interface = skip_ints.split(",")
        else:
            skip_interface = [skip_ints]
        name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
        print skip_interface
        op_list = []
        C2J_data = Cisco_to_Juniper_by_VLAN_Assignment(name, skip_interface)
        op_list = C2J_data.create_output_file()
        csv_download = C2J_data.create_csv()
        sw_name = C2J_data.get_switch_name()
        request.session["sw_name"] = sw_name
        # for k, v in data_dict.iteritems():
        #     op_list.append( str(k)+" >>>>>>>> "+ str(v))
        outputlist["Configuration"] = op_list
        var_flag = False
        # txt_download = 1
        return render(request, 'tabs_configuration.html',
                      {'output_list': outputlist, "var_flag": var_flag, "txt_download": 1})
    # yml_info cisco_to_juniper_by_vlan
    if filename.endswith('.txt') and type == "yml_info":
        request.session["type"] = type
        # if "," in skip_ints:
        #     skip_interface = skip_ints.split(",")
        # else:
        #     skip_interface = [skip_ints]
        name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
        op_list = []
        yml_data = YML_Parser(name)
        parsed_data = yml_data.get_info_data()
        print parsed_data
        # for k, v in parsed_data.iteritems():
        #     op_list.append(
        #         "<strong>" + k + ":</strong> <span style='text-transform'>" + v + "</span>")
        if parsed_data.has_key('store_name'):
            op_list.append(
                "<strong>store_name: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + parsed_data[
                    'store_name'] + "  </span>")
        else:
            op_list.append(
                "<strong>store_name: </strong> <span color:#5e8ff7;'>  " + 'NA' + "  </span>")
        if parsed_data.has_key('type'):
            op_list.append(
                "<strong> type : </strong> <span style:'text-transform:capitalize;color:#5e8ff7;'>  " + parsed_data[
                    'type'] + "</span>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   # fls or rack   ")
        else:
            op_list.append(
                "<strong> type : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + "  </span>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # fls or rack  ")
        if parsed_data.has_key('circuit_size'):
            op_list.append(
                "<strong>circuit_size: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'circuit_size'] + "  </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 1,2 for FLS; 3 for rack   ")
        else:
            op_list.append(
                "<strong>circuit_size: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + "  </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
        if parsed_data.has_key('ip_address'):
            op_list.append(
                "<strong>ip_adress: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + parsed_data[
                    'ip_address'] + "  </span> nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
        else:
            op_list.append(
                "<strong>ip_adress: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + "  </span> nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")

        op_list.append(
            "<strong>js_routing_engine</strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Serial number of device  </span>")
        op_list.append(
            " <span style='text-transform:capitalize;color:#5e8ff7;'>  &nbsp;&nbsp;&nbsp;&nbsp;" + '- NY0217330001' + " </span> ")
        op_list.append(
            " <span style='text-transform:capitalize;color:#5e8ff7;'>   &nbsp;&nbsp;&nbsp;&nbsp;" + '- NY0217330002' + "</span> ")

        if parsed_data.has_key('iface_format'):
            op_list.append(
                "<strong> iface_format : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'iface_format'] + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  # 1 for 0/0 and 2 for 0/0/0 format ")
        else:
            op_list.append(
                "<strong> iface_format : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + "</span>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  # 1 for 0/0 and 2 for 0/0/0 format ")
        if parsed_data.has_key('router_type'):
            op_list.append(
                "<strong> router_type : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'router_type'] + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #1 for 4300, 2 for 2900 ")
        else:
            op_list.append(
                "<strong> router_type : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #1 for 4300, 2 for 2900  ")
        if parsed_data.has_key('serialnum_cr_1a'):
            op_list.append(
                "<strong> serialnum_cr_1a : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'serialnum_cr_1a'] + "</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #License UDI Serial number for 1a router  ")
        else:
            op_list.append(
                "<strong> serialnum_cr_1a : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #License UDI Serial number for 1a router ")
        if parsed_data.has_key('serialnum_cr_1b'):
            op_list.append(
                "<strong> serialnum_cr_1b : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'serialnum_cr_1b'] + "</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #License UDI Serial number for 1b router ")
        else:
            op_list.append(
                "<strong>serialnum_cr_1b : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + "</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #License UDI Serial number for 1b router ")
        if parsed_data.has_key('master_circuit_ip'):
            op_list.append(
                "<strong> master_circuit_ip : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'master_circuit_ip'] + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #crXXX-1a tun900 IP ")
        else:
            op_list.append(
                "<strong> master_circuit_ip : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #crXXX-1a tun900 IP  ")
        if parsed_data.has_key('master_uplink'):
            op_list.append(
                "<strong> master_uplink : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'master_uplink'] + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #crXXX-1a int gi0/0/2 network address ")
        else:
            op_list.append(
                "<strong> master_uplink : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #crXXX-1a int gi0/0/2 network address  ")
        if parsed_data.has_key('master_circuit_id'):
            op_list.append(
                "<strong> master_circuit_id : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'master_circuit_id'] + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #crXXX-1a circuit ID  ")
        else:
            op_list.append(
                "<strong> master_circuit_id : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #crXXX-1a circuit ID  ")
        if parsed_data.has_key('backup_circuit_ip'):
            op_list.append(
                "<strong> backup_circuit_ip : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'backup_circuit_ip'] + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #link to tun901 ")
        else:
            op_list.append(
                "<strong> backup_circuit_ipp : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #link to tun901 ")
        if parsed_data.has_key('backup_uplink'):
            op_list.append(
                "<strong> backup_uplink : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'backup_uplink'] + "</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # crXXX-1b int gi0/0/2 network address ")
        else:
            op_list.append(
                "<strong> backup_uplink : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # crXXX-1b int gi0/0/2 network address  ")
        if parsed_data.has_key('backup_circuit_id'):
            op_list.append(
                "<strong> backup_circuit_id : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                parsed_data[
                    'backup_circuit_id'] + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #crXXX-1b circuit ID ")
        else:
            op_list.append(
                "<strong> backup_circuit_id : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + 'NA' + " </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  #crXXX-1b circuit ID ")
        outputlist["Configuration"] = op_list
        var_flag = False
        # txt_download = 1
        return render(request, 'tabs_configuration.html',
                      {'output_list': outputlist, "var_flag": var_flag, "txt_download": 1})
    if filename.endswith('.txt') and type == "juniper_duplicates":
        name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
        infile = open(name, 'r+')
        file_lines = [i for i in infile.readlines()]
        op_lines = []
        found_list = []
        not_found_int = []
        duplicate_lines = []
        print " In Juniper Fund Duplicates "
        for b1 in range(0, 5):
            for port in range(0, 48):
                nxt_line_flag = False
                intface = "ge-" + str(b1) + "/" + "0" + "/" + str(port)
                # print intface
                duplicate_flag = False
                for line in file_lines:
                    if intface not in duplicate_lines:
                        match = re.search('member\s+(\S+)', line)
                        if match:
                            intf = match.group(1)
                            if intf == intface and not duplicate_flag:
                                duplicate_flag = True
                            elif intf == intface and duplicate_flag:
                                print line
                                duplicate_lines.append(intface)
                                duplicate_flag = False
                                # a =12
                    if re.search('\s' + intface + '\s', line):
                        found_list.append(intface)
                        op_lines.append(line)
                        nxt_line_flag = True
                if intface not in found_list:
                    not_found_int.append(intface)
                if nxt_line_flag:
                    op_lines.append("\n")
        op_lines.append("Interfaces Not Found : \n")
        counter = 1
        for ele in not_found_int:
            add_str = str(counter) + " _______ " + ele + "\n"
            op_lines.append(add_str)
            counter += 1
        op_lines.append("Duplicate Interfaces : \n")
        print duplicate_lines
        for ele in duplicate_lines:
            add_str = ele + "\n"
            op_lines.append(add_str)
        outputlist["Configuration"] = op_lines
        var_flag = False
        return render(request, 'tabs_configuration.html',
                      {'output_list': outputlist, "var_flag": var_flag, "txt_download": 1})


def infoblox_test(request):
    iba_api = infoblox.Infoblox('74.95.1.203', 'admin', 'NGnetServ', '1.0', 'internal', 'default')

    try:
        ip = iba_api.create_host_record('192.168.0.0/24', 'mytest.example.com')
        print ip
    except Exception as e:
        print e
    returnarr = {"msg": "MAC table does not exist", "status": "1", "flag": False}
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


def Port_Map_Validtion(request):
    print " IN Por Mapping Validation "
    taskid = request.POST.get('taskid')
    subtaskid = "00"
    customer = request.POST.get('customer')
    type = request.POST.get('type')
    store = request.POST.get('store')
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/data/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    print "store Name ", store
    outputlist = {}
    extrcted_files = {}
    if filename.endswith('.txt'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            # with zipfile.ZipFile(file, "r") as zf:
            #     for name in zf.namelist():
            #         localFilePath = zf.extract(name, FILE_UPLOAD_DIR+'/zip_extract')
            #         if os.path.isdir(localFilePath):
            #             continue
            #         print localFilePath
            #         if "cisco" in localFilePath:
            #             extrcted_files["cs"] = localFilePath
            #         if "juniper" in localFilePath:
            #             extrcted_files["js"] = localFilePath
            # name = localFilePath.replace(FILE_UPLOAD_DIR+"/zip_extract","")
            # extrcted_files.append(localFilePath)

            # if len(extrcted_files) == 2 and store in extrcted_files['cs'] and store in extrcted_files["js"] :
            #     mapping = Port_Mapping(extrcted_files['cs'], extrcted_files["js"])
            mapping = Port_Mapping(name)
            cs_dict = mapping.get_cisco_dict()
            js_dict = mapping.get_juniper_dict()
            js_down_interface = mapping.get_juniper_down_int()
            js_mac_list = []
            for e_dict in js_dict:
                if e_dict["mac"].replace(":", '') not in js_mac_list:
                    js_mac_list.append(e_dict["mac"].replace(":", ''))

            result_list = {}
            for dict1 in cs_dict:
                if dict1["mac"].replace(".", '') not in js_mac_list:
                    newdict = {"mac": dict1["mac"], "vlan": dict1["vlan"], "interface": dict1["cs_intf"],
                               "device": dict1["switch"]}
                    # result_list.append(newdict)
                    if result_list.has_key(dict1["vlan"]):
                        result_list[dict1["vlan"]].append(newdict)
                    else:
                        result_list[dict1["vlan"]] = []
                        result_list[dict1["vlan"]].append(newdict)
                else:
                    for dict2 in js_dict:
                        if dict2["mac"].replace(":", '') == dict1["mac"].replace(".", '') and dict2["vlan"] != dict1[
                            "vlan"]:
                            newdict = {"mac": dict1["mac"], "vlan": dict1["vlan"], "jsvlan": dict2["vlan"],
                                       "v_flag": True, "interface": dict1["cs_intf"], "device": dict1["switch"],
                                       "jsdevice": dict2["switch"], "jsinterface": dict2["js_intf"]}
                            # result_list.append(newdict)
                            if result_list.has_key(dict1["vlan"]):
                                result_list[dict1["vlan"]].append(newdict)
                            else:
                                result_list[dict1["vlan"]] = []
                                result_list[dict1["vlan"]].append(newdict)
            result_list1 = sorted(result_list)
            op_lines = []
            # print result_list
            for vlan in result_list1:
                # print rstl_dict
                thisvlandictlist = result_list[vlan]
                op_lines.append("Vlan {} :".format(vlan))
                for dict in thisvlandictlist:
                    if dict.has_key("v_flag"):
                        op_lines.append(
                            "Vlan {} --> {} --> {}  does not match for {} --> {} --> {}".format(dict["jsvlan"],
                                                                                                dict["jsdevice"],
                                                                                                dict["jsinterface"],
                                                                                                dict["mac"],
                                                                                                dict["device"],
                                                                                                dict["interface"]))
                    else:
                        if re.search(r'Gi|gi', dict["interface"]):
                            temp_int = dict["interface"].split("/")
                            m = re.search(r'\w+(\d)', temp_int[0])
                            cs_interface = 'GigabitEthernet' + m.group(1) + '/' + temp_int[1] + '/' + temp_int[2]
                        elif re.search(r'Fa|fa', dict["interface"]):
                            temp_int = dict["interface"].split("/")
                            m = re.search(r'\w+(\d)', temp_int[0])
                            cs_interface = 'FastEthernet' + m.group(1) + '/' + temp_int[1]
                        else:
                            cs_interface = dict["interface"]
                        print cs_interface, dict["device"]
                        entry = SwitchMigrationDB.objects.filter(existingswitch=dict["device"],
                                                                 oldinterface=cs_interface).values('newswitch',
                                                                                                   'newinterface')
                        if entry:
                            js_sw = entry[0]['newswitch']
                            js_interface = entry[0]['newinterface']
                            op_lines.append(
                                " {} --> {} --> {} ({} {})".format(dict["mac"], dict["device"], dict["interface"],
                                                                   js_sw, js_interface))
                        else:
                            print "ONly Cisco info "
                            op_lines.append(
                                " {} --> {} --> {}".format(dict["mac"], dict["device"], dict["interface"]))
            op_lines.append("Total Cisco MACs {} ".format(str(len(cs_dict))))
            # op_lines.append("-------------------------------- ")
            if len(js_down_interface) != 0:
                op_lines.append("Juniper Interfaces Down on store {} : {}".format(store, ',  '.join(js_down_interface)))

        # else:
        #     return render(request, 'notification.html', {'output_list': "Store no. not matching with files name",'class':'alert-danger'})
        if len(op_lines) == 0:
            outputlist["Mapping "] = [" All Matched ", " NO Errors Found"]
        else:
            outputlist["Mapping "] = op_lines
        var_flag = False
        return render(request, 'tabs_configuration.html',
                      {'output_list': outputlist, "var_flag": var_flag, "txt_download": 1})


def patching_upload_new(request):
    idfno = request.POST.get('idfno')
    overwrite = request.POST.get('overwrite')
    type = request.POST.get('type')
    current_user = request.user
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    array = {}
    if filename.endswith('.csv') and type == "upload_sw_info":
        store = request.POST.get('store_no')
        print store
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            response = upload_switch_info(request, store, name)

            return HttpResponse(json.dumps(response), content_type="application/json")
    if filename.endswith('.csv') and type == "network_connections":
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            response = upload_network_connections(request, name)
            if response["status"] == 1:
                entry = NetworkConnectionDB.objects.all()[:2000]
                if entry:
                    # , 'filtername': filtername, 'value': value, 'date': request.GET.get('datetime'),
                    print entry
                    return render(request, 'netwrk_connections_filter.html',
                                  {'entry': entry, 'class': 'alert-success', 'ftype': '1'})
                else:
                    entry = "No entry found"
                    pres_output = 'Entry Added Successfully'
                    return render(request, 'notification.html', {'output_list': entry, 'class': 'alert-success'})
            else:

                return HttpResponse(json.dumps(response), content_type="application/json")
    elif filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            response = upload_device_data(request, idfno, name, overwrite)
            return HttpResponse(json.dumps(response), content_type="application/json")
    else:
        array["status"] = 0
    returnarr = {}
    returnarr["status"] = 0
    returnarr["msg"] = "Invalid input"

    return HttpResponse(json.dumps(returnarr), content_type="application/json")


def brownfield_upload_function(request):
    taskid = request.POST.get('taskid')
    subtaskid = "00"
    customer = request.POST.get('customer')
    opt_type = request.POST.get('type')
    overwrite = request.POST.get('overwrite')
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/data/user_uploads/"
    # FILE_UPLOAD_DIR = "/home/netserv/PycharmProjects/netserv/mysite/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    outputlist = {}
    flag1 = False
    flag2 = False
    if opt_type == "Discovery":
        output_list = {}
        data_info = []
        if filename.endswith('.txt'):
            name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
            with open(name, 'wb') as dest:
                shutil.copyfileobj(file, dest)
                dest.close()
            infile = open(name, 'r+')
            file_lines = [i.rstrip("\r\n") for i in infile.readlines()]
            for line in file_lines:
                if re.search(r'sh\S+\s+mac\s+address-table', line):
                    print " Getting it "
                    flag1 = True
                    break
                elif re.search(r'hostname', line):
                    print " Getting it2 "
                    flag2 = True
                    break

            if flag1:
                mac_dict = get_mac_dict(file_lines)
                port = ""
                print overwrite
                try:
                    for each_d in mac_dict:
                        if each_d["interface"].count("/") == 2:
                            m = re.search(r"\w+(\d).\d.(\d+)", each_d["interface"])
                            if m:
                                port = m.group(1) + "/" + m.group(2)
                        elif each_d["interface"].count("/") == 1:
                            m = re.search(r"\w+(\d).(\d+)", each_d["interface"])
                            if m:
                                port = m.group(1) + "/" + m.group(2)
                        elif each_d["interface"].count("/") == 0:
                            port = each_d["interface"]
                        if overwrite == "no":
                            q1 = SwitchMACMigrationDB(taskid=taskid, mac_addr=each_d["mac"],
                                                      hostname=each_d["hostname"], vlan=each_d["vlan"],
                                                      port=port)
                            q1.save()
                        if overwrite == "yes":
                            if SwitchMACMigrationDB.objects.filter(mac_addr=each_d["mac"]):
                                q1 = SwitchMACMigrationDB.objects.filter(mac_addr=each_d["mac"]).update(taskid=taskid,
                                                                                                        hostname=each_d[
                                                                                                            "hostname"],
                                                                                                        vlan=each_d[
                                                                                                            "vlan"],
                                                                                                        port=port)
                            else:
                                q1 = SwitchMACMigrationDB(taskid=taskid, mac_addr=each_d["mac"],
                                                          hostname=each_d["hostname"], vlan=each_d["vlan"],
                                                          port=port)
                                q1.save()
                except:
                    print each_d["mac"]
                    return render(request, 'notification.html',
                                  {'output_list': "Duplicate MAC Address Error", 'class': 'alert-danger'})
                return render(request, 'notification.html',
                              {'output_list': "MAC Table Uploaded Sucessfully ", 'class': 'alert-success'})
            elif flag2:
                print " In Device Parsing Condition"
                device_parse = ParseSwitchConfiguration(file_lines, taskid)
                output = device_parse.main_fun()
                for d1, d2 in output.iteritems():
                    if d1 == 'output':
                        data = d2['NGA_Core']
                        if data.has_key("logging_server") and data.get("logging_server") != "":
                            data_info.append(
                                "<strong>Logging Server : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " +
                                data['logging_server'] + "  </span>")
                        else:
                            data_info.append(
                                "<strong>Logging Server : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + "NA" + "  </span>")
                        if data.has_key("ntp_server") and len(data.get("ntp_server")) != 0:
                            data_info.append(
                                "<strong>NTP Server : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + ','.join(
                                    data['ntp_server']) + "  </span>")
                        else:
                            data_info.append(
                                "<strong>NTP Server : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + "NA" + "  </span>")
                        if data.has_key("ntp_server") and len(data.get("ntp_server")) != 0:
                            data_info.append(
                                "<strong>DNS Server : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + ','.join(
                                    data['dns_server']) + "  </span>")
                        else:
                            data_info.append(
                                "<strong>DNS Server : </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + "NA" + "  </span>")
                        if 'vlans' in data:
                            key_list = []
                            new_vlan_dict = {}
                            for d3, d4 in data['vlans'].iteritems():
                                para_dict = {}
                                key_list.append(d3)
                                for k, v in d4.iteritems():
                                    if type(v) == list:
                                        para_dict[k.replace('_', ' ').title()] = ','.join(v)
                                        if len(v) == 0:
                                            para_dict[k.replace('_', ' ').title()] = 'NA'
                                    else:
                                        para_dict[k.replace('_', ' ').title()] = str(v)
                                new_vlan_dict[d3] = para_dict
                            if len(key_list) != 0:
                                data_info.append(
                                    "<strong>VLAN: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + ','.join(
                                        key_list) + "  </span>")
                            else:
                                data_info.append(
                                    "<strong>VLAN: </strong> <span style='text-transform:capitalize;color:#5e8ff7;'>  " + "NA" + "  </span>")
                            for key_l, val_l in new_vlan_dict.iteritems():
                                data_info.append("<strong>" + key_l + " </strong> ")
                                for k_l, v_l in val_l.iteritems():
                                    data_info.append(
                                        "    " + k_l + ": <span style='text-transform:capitalize;color:#5e8ff7;'>  " + v_l + "  </span>")

                output_list['data'] = data_info
                if output['flag']:
                    return render(request, 'discovery_template.html',
                                  {'output_list': output_list, 'class': 'alert-success'})
            else:
                return render(request, 'notification.html',
                              {'output_list': "No Data Uploaded ", 'class': 'alert-danger'})
    elif opt_type == "Verification":
        if filename.endswith('.txt'):
            name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
            with open(name, 'wb') as dest:
                shutil.copyfileobj(file, dest)
                dest.close()
            infile = open(name, 'r+')
            file_lines = [i.rstrip("\r\n") for i in infile.readlines()]
            new_data = get_mac_dict(file_lines)
            # op_lines = Compare_MAC_output(request, file_lines)
            op_lines = []
            mac_with_wrg_vlan = []
            missing_mac = []
            total_count = 0
            for new_d in new_data:
                device_type = get_mac_device_type(new_d['mac'])
                q1 = SwitchMACMigrationDB.objects.filter(mac_addr=new_d["mac"]).values('hostname', 'mac_addr',
                                                                                       'vlan',
                                                                                       'port').last()
                if q1:
                    old_data = q1
                    total_count += 1
                    hostname = old_data['hostname']
                    if old_data['vlan'] != new_d["vlan"]:
                        mac_with_wrg_vlan.append(
                            " {} Vendor : '{}' Old: {} New: {}".format(new_d['mac'], device_type, old_data["vlan"],
                                                                       new_d["vlan"]))
                else:
                    # print new_d
                    missing_mac.append(" {} Vendor : '{}' ".format(new_d["mac"], device_type))

            op_lines.append("<b>Device Name : {}</b>".format(hostname))
            op_lines.append("<b>Total MACs of New Switch : {}</b>".format(str(total_count)))
            op_lines.append("<b>MACs Missing : {}</b>".format(str(len(missing_mac))))
            op_lines = op_lines + missing_mac
            op_lines.append("<b>MAC with Wrong VLAN : {}</b>".format(str(len(mac_with_wrg_vlan))))
            op_lines = op_lines + mac_with_wrg_vlan
            # return render(request, 'notification.html',
            #               {'output_list': "In process ", 'class': 'alert-danger'})
            outputlist["Result"] = op_lines
            return render(request, 'tabs_configuration.html',
                          {'output_list': outputlist, "var_flag": 2, "txt_download": 1})
        elif filename.endswith('.zip'):
            file_list = []
            with zipfile.ZipFile(file, "r") as zf:
                for name in zf.namelist():
                    print name
                    localFilePath = zf.extract(name, FILE_UPLOAD_DIR + '/zip_extract')
                    if os.path.isdir(localFilePath):
                        continue
                    file_list.append(localFilePath)

            outputlist = {"Result": []}
            for new_file in file_list:
                op_lines = []
                infile = open(new_file, 'r+')
                file_lines = [i.rstrip("\r\n") for i in infile.readlines()]
                # op_lines = Compare_MAC_output(request, file_lines)
                # op_line+=op_linesop_lines = []
                new_data = get_mac_dict(file_lines)
                mac_with_wrg_vlan = []
                missing_mac = []
                total_count = 0
                for new_d in new_data:
                    device_type = get_mac_device_type(new_d['mac'])
                    q1 = SwitchMACMigrationDB.objects.filter(mac_addr=new_d["mac"]).values('hostname', 'mac_addr',
                                                                                           'vlan',
                                                                                           'port').last()
                    if q1:
                        old_data = q1
                        total_count += 1
                        hostname = old_data['hostname']
                        if old_data['vlan'] != new_d["vlan"]:
                            mac_with_wrg_vlan.append(
                                " {} Vendor : '{}' Old: {} New: {}".format(new_d['mac'], device_type, old_data["vlan"],
                                                                           new_d["vlan"]))
                    else:
                        # print new_d
                        missing_mac.append(" {} Vendor : '{}' ".format(new_d["mac"], device_type))

                op_lines.append("<b>Total MACs of New Switch : {}</b>".format(str(total_count)))
                op_lines.append("<b>MACs Missing : {}</b>".format(str(len(missing_mac))))
                op_lines = op_lines + missing_mac
                op_lines.append("<b>MAC with Wrong VLAN : {}</b>".format(str(len(mac_with_wrg_vlan))))
                op_lines = op_lines + mac_with_wrg_vlan
                # return render(request, 'notification.html',
                #               {'output_list': "In process ", 'class': 'alert-danger'})
                outputlist["Result"] += op_lines
                # return render(request, 'tabs_configuration.html',
                #               {'output_list': outputlist, "var_flag": 2, "txt_download": 1})
                # outputlist["Result"] = op_line
            return render(request, 'tabs_configuration.html',
                          {'output_list': outputlist, "var_flag": 2, "txt_download": 1})

        else:
            return render(request, 'notification.html',
                          {'output_list': "File Type Error ", 'class': 'alert-danger'})
    else:
        return render(request, 'notification.html',
                      {'output_list': "Phase Not Correct - Redirected to Wrong Page", 'class': 'alert-danger'})


def Compare_MAC_output(request, file_lines):
    new_data = get_mac_dict(file_lines)
    old_data = request.session.get('old_data')
    old_vlan_list = []
    new_vlan_list = []
    if old_data['vlan_change'] == "yes":
        old_vlan_list = old_data['old_vlans'].replace(" ", "").split(',')
        new_vlan_list = old_data['new_vlan'].replace(" ", "").split(',')
    port = ""
    old_mac_count = 0
    new_mac_count = len(new_data)
    missing_mac = []
    checked_mac = []
    mac_with_wrg_vlan = []
    print old_vlan_list, new_vlan_list
    q1 = SwitchMACMigrationDB.objects.filter(hostname=old_data["old_switch"]).values('hostname', 'mac_addr', 'vlan',
                                                                                     'port').all()
    if q1:
        query_data = q1
        old_mac_count = len(q1)

        for new_d in new_data:
            device_type = get_mac_device_type(new_d['mac'])
            if new_d["interface"].count("/") == 2:
                m = re.search(r"\w+(\d).\d.(\d+)", new_d["interface"])
                if m:
                    port = m.group(1) + "/" + m.group(2)
            elif new_d["interface"].count("/") == 1:
                m = re.search(r"\w+(\d).(\d+)", new_d["interface"])
                if m:
                    port = m.group(1) + "/" + m.group(2)
            elif new_d["interface"].count("/") == 0:
                port = new_d["interface"]
            mac_wrn_vlan = []
            for old_d in query_data:
                if old_d["mac_addr"] == new_d['mac']:
                    checked_mac.append(new_d['mac'])
                    if len(old_vlan_list) >= 1 and len(new_vlan_list) == 1:
                        for indx in range(0, len(old_vlan_list)):
                            if old_vlan_list[indx] == old_d["vlan"] and old_vlan_list[indx] != new_d["vlan"] and \
                                    new_vlan_list[0] == new_d["vlan"]:
                                print ">>>>", indx, new_d['mac'], old_d["vlan"], new_d["vlan"]
                                continue
                            if old_vlan_list[indx] == old_d["vlan"] and new_vlan_list[0] != new_d["vlan"]:
                                mac_with_wrg_vlan.append(
                                    "mac: {} Device type: '<b>{}</b>' Old: {} New: {}".format(new_d['mac'],
                                                                                              device_type,
                                                                                              old_d["vlan"],
                                                                                              new_d["vlan"]))
                                continue
                            if old_d["vlan"] == new_d["vlan"]:
                                continue
                            # else:
                            print "1---->", indx, new_d['mac'], old_d["vlan"], new_d["vlan"]
                            mac_with_wrg_vlan.append(
                                "mac: {} Device type: '<b>{}</b>' Old: {} New: {}".format(new_d['mac'], device_type,
                                                                                          old_d["vlan"], new_d["vlan"]))
                    elif len(old_vlan_list) == 1 and len(new_vlan_list) >= 1:

                        for indx in range(0, len(new_vlan_list)):
                            if old_vlan_list[0] == old_d["vlan"] and old_vlan_list[0] != new_d["vlan"] and \
                                    new_vlan_list[indx] == new_d["vlan"]:
                                print ">>>>", indx, new_d['mac'], old_d["vlan"], new_d["vlan"]
                                continue
                            if old_vlan_list[0] == old_d["vlan"] and new_vlan_list[indx] != new_d["vlan"] and new_d[
                                'mac'] not in mac_wrn_vlan:
                                print new_vlan_list[indx], mac_wrn_vlan
                                mac_with_wrg_vlan.append(
                                    "mac: {} Device type: '<b>{}</b>' Old: {} New: {}".format(new_d['mac'],
                                                                                              device_type,
                                                                                              old_d["vlan"],
                                                                                              new_d["vlan"]))
                                mac_wrn_vlan.append(new_d['mac'])
                                continue
                            if old_d["vlan"] == new_d["vlan"]:
                                continue

                            # else:
                            print "2---->", indx, new_d['mac'], old_d["vlan"], new_d["vlan"]
                            mac_with_wrg_vlan.append(
                                "mac: {} Device type: '<b>{}</b>' Old: {} New: {}".format(new_d['mac'], device_type,
                                                                                          old_d["vlan"], new_d["vlan"]))
                    elif len(old_vlan_list) > 0:
                        # print  ">>>>>>", new_d['mac'], old_d["vlan"], new_d["vlan"]
                        for indx in range(0, len(old_vlan_list)):
                            if old_vlan_list[indx] == old_d["vlan"] and old_vlan_list[indx] != new_d["vlan"] and \
                                    new_vlan_list[indx] == new_d["vlan"]:
                                print ">>>>", indx, new_d['mac'], old_d["vlan"], new_d["vlan"]
                                continue
                            if old_vlan_list[indx] == old_d["vlan"] and new_vlan_list[indx] != new_d["vlan"] and new_d[
                                'mac'] not in mac_wrn_vlan:
                                mac_with_wrg_vlan.append(
                                    "mac: {} Device type: '<b>{}</b>' Old: {} New: {}".format(new_d['mac'],
                                                                                              device_type,
                                                                                              old_d["vlan"],
                                                                                              new_d["vlan"]))
                                mac_wrn_vlan.append(new_d['mac'])
                                continue
                            if old_d["vlan"] == new_d["vlan"]:
                                continue
                            # else:
                            if new_d['mac'] not in mac_wrn_vlan:
                                print "3---->", indx, new_d['mac'], old_d["vlan"], new_d["vlan"]
                                mac_with_wrg_vlan.append(
                                    "mac: {} Device type: '<b>{}</b>' Old: {} New: {}".format(new_d['mac'], device_type,
                                                                                              old_d["vlan"],
                                                                                              new_d["vlan"]))
                                mac_wrn_vlan.append(new_d['mac'])
                        continue
                    else:
                        if old_d["vlan"] != new_d["vlan"]:
                            mac_with_wrg_vlan.append(
                                "mac: {} Device Type: '<b>{}</b>' Old: {} New: {}".format(new_d['mac'], device_type,
                                                                                          old_d["vlan"],
                                                                                          new_d["vlan"]))
                            continue
            if new_d["mac"] not in checked_mac:
                missing_mac.append("mac: {} Device Type: '<b>{}</b>' ".format(new_d["mac"], device_type))
    op_lines = []
    op_lines.append("<b>Total MACs of Old Switch : {}</b>".format(str(old_mac_count)))
    op_lines.append("<b>Total MACs of New Switch : {}</b>".format(str(new_mac_count)))
    op_lines.append("<b>MACs Missing : {}</b>".format(str(len(missing_mac))))
    op_lines = op_lines + missing_mac
    op_lines.append("<b>MAC with Wrong VLAN : {}</b>".format(str(len(mac_with_wrg_vlan))))
    op_lines = op_lines + mac_with_wrg_vlan
    return op_lines


def encrypt_pass(request):
    import base64
    getval = request.GET.get("pass")
    encoded = base64.b64encode(getval)
    decoded = base64.b64decode(encoded)

    returnarr = {}
    returnarr["status"] = 0
    returnarr["msg"] = encoded + "  <> " + decoded

    return HttpResponse(json.dumps(returnarr), content_type="application/json")


def sort_ip_mac_dict(data):
    '''
    Description:
 	    Function help to sorting the data into dictionary.
	Inputs:
        data
	Output:
        Return out dictionary.

    :param data:
    :return:
    '''
    out = {}
    Output = {}
    for el, val in data.iteritems():
        if val:
            for i in val:
                if i[1] not in Output:
                    Output[i[1]] = []
                if i[2]:
                    if i[1] in Output:
                        Output[i[1]].append(i[2])

            out[el] = Output
        else:
            out[el] = {}
    return out


def is_unique_username(username):
    # this function should check for users and return true if unique
    return True


def get_mac_dict(file_lines):
    cmd_flag = False
    lst = []
    hostname = ""
    for line in file_lines:
        dictionary = {}
        cmd = "show mac address-table"
        match = re.search(r"(\S+)#\s?(.+)\s?", line)
        if match:
            print match.group(1)
            print match.group(2) + "--"
            hostname = match.group(1)
            if cmd in match.group(2):
                cmd_flag = True
            else:
                cmd_flag = False
        if cmd_flag:
            regex_1 = re.search(r'(\d+)\s+(\S+)\s+(\w+)\s+(\S+\d)', line)
            if regex_1 and regex_1.group(3) != "STATIC" and "Po" not in regex_1.group(4) and "Tu" not in regex_1.group(
                    4):
                dictionary["mac"] = regex_1.group(2)
                dictionary["vlan"] = regex_1.group(1)
                dictionary["interface"] = regex_1.group(4)
                dictionary["hostname"] = hostname
        if dictionary:
            lst.append(dictionary)
    return lst

    mac_table_op()


def test_function(request):
    user = "netadmin@"
    ip = "74.95.1.202"
    password = "C1sco12345"
    port = '2202'
    COMMAND_PROMPT = '\S+#'
    child = pexpect.spawn('ssh -p ' + port + ' -c aes256-ctr -oHostKeyAlgorithms=+ssh-dss ' + user + ip, timeout=60)
    # print child
    i = child.expect([pexpect.TIMEOUT, COMMAND_PROMPT, r'assword:'])
    if i == 0:
        print 'ERROR! could not login with SSH. '
        returnarr = {"msg": "Error SSH", "status": "1", "flag": False}
    elif i == 1:
        child.sendline('\r')
        returnarr = {"msg": "UnExpected Error", "status": "1", "flag": False}
    elif i == 2:
        # print child.before, child.after
        child.sendline(password)
        child.expect(COMMAND_PROMPT)
        child.sendline('Show version')
        child.expect(COMMAND_PROMPT)
        print child.before + child.after
        returnarr = {"msg": "Pexpect Done", "status": "1", "flag": False}
        return HttpResponse(json.dumps(returnarr), content_type="application/json")
    else:
        returnarr = {"msg": "MAC table does not exist", "status": "1", "flag": False}
    return HttpResponse(json.dumps(returnarr), content_type="application/json")


def chart_dashboard(request):
    return render(request, "chart_dashboard.html")


def second_chart_dashboard(request):
    # return render(request,"chart1.html")
    return render(request, "second_dashboard.html")
    # return render(request,"third_dashboard.html")


def third_chart_dashboard(request):
    # return render(request,"chart1.html")
    # return render(request,"second_dashboard.html")
    return render(request, "third_dashboard.html")


def get_data(request, *args, **kwargs):
    with open('/home/ubuntu/prepro/mysite/mysite/nlead_library/portcnt.json') as f:

        data = json.load(f)
    sw_count = len(data.keys())
    print "###################Data For Chart1#########################"
    print "Switches"
    print "Switches:" + str(sw_count)

    asd = []
    for p in data:
        asd.append(data[p]["port_count"])

    p_count = sum(asd)
    print "Port Count:" + str(p_count)

    conn = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
    cursor = conn.cursor()
    cursor.execute("select count (mac) from mysite_mac_db;")
    mac_count = cursor.fetchall()[0][0]
    mac_count = 12500 + mac_count
    mac_count1 = mac_count * 5 / 100
    unused_ports = p_count - mac_count
    print "unused_ports"
    print unused_ports

    print "###################Data For Chart2#########################"

    Extraports = (p_count + ((5 / 100) * p_count)) / 48
    # print "New Value:" + str(ext1)

    cursor.execute("select count (*) from mysite_mac_db;")
    macdbs = cursor.fetchall()[0][0]
    macdbs = 12500 + mac_count1
    print "macdbs"
    print macdbs
    # Extraports= macdbs*5/100
    print "Extraports"
    print Extraports
    switches = (macdbs + Extraports) / 48
    print "switches"
    print switches
    print"............................................................"
    ip = ['74.95.1.202', '74.95.1.212']
    # ip =[request.GET.get("device_ip")]
    conn = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
    cursor = conn.cursor()

    vlan_list1 = []
    vlan_list2 = []
    vlan_list3 = ["All", ]
    vlan = []
    dictionary = {}
    cursor.execute("select vlan,count(vlan) as vlancount from mysite_mac_db group by vlan order by vlancount desc;")
    vlan = cursor.fetchall()
    cursor.execute(
        "select vlan,count(vlan) as vlancount from mysite_mac_db where status='add' group by vlan order by vlancount desc;")
    add_vlan = cursor.fetchall()
    cursor.execute(
        "select vlan,count(vlan) as vlancount from mysite_mac_db where status='remove' group by vlan order by vlancount desc;")
    remove_vlan = cursor.fetchall()
    add_vlan_list1 = [i[0] for i in add_vlan]
    count_vlan = [i[1] for i in add_vlan]
    select_count = count_vlan[0:7]
    a = sum(select_count)
    vlan_list1.append(a)
    for val in select_count:
        vlan_list1.append(val)
    oth_add_count = count_vlan[7:len(count_vlan)]
    others_add = sum(oth_add_count)
    vlan_list1.append(others_add)
    remove_vlan_list = [i[0] for i in remove_vlan]
    count1_vlan = [i[1] for i in remove_vlan]
    select_count1 = count1_vlan[0:7]
    b = sum(select_count1)
    vlan_list2.append(b)
    select_count1 = count1_vlan[0:7]
    for val in select_count1:
        vlan_list2.append(val)
    oth_remove_count = count1_vlan[7:len(count1_vlan)]
    others_remove = sum(oth_remove_count)
    vlan_list2.append(others_remove)

    print remove_vlan_list
    print "remov", vlan_list2
    print add_vlan_list1
    print "add", vlan_list1
    # print "other",others

    # conn = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
    # cursor = conn.cursor()

    # print "1)..................................................................................."
    # cursor.execute("select count (*) from mysite_stationdb where overwrite_flag='1'")
    # provisioned = cursor.fetchall()[0][0] + 2000
    # print provisioned

    # cursor.execute("select count (*) from mysite_stationdb where overwrite_flag=''")
    # Notprovisioned = cursor.fetchall()[0][0] - 2000
    # print Notprovisioned

    # available_ports = 35600 - provisioned - Notprovisioned
    # print available_ports

    # print"2)............................................................................................"
    # cursor.execute("select count (*) from mysite_stationdb where vlan = '200'or vlan = 210;")
    # total_End = cursor.fetchall()[0][0]
    # print total_End
    # cursor.execute(
    #    "select count (*) from mysite_stationdb where vlan = '302' or vlan = '301'or vlan ='300' or vlan ='1302';")
    # total_Biomed = cursor.fetchall()[0][0]
    # print total_Biomed
    # cursor.execute("select count (*) from mysite_stationdb where vlan = '310';")
    # total_BMS = cursor.fetchall()[0][0]
    # print total_BMS
    # cursor.execute("select count (*) from mysite_stationdb where vlan = '1100';")
    # total_Wireless = cursor.fetchall()[0][0]
    # print total_Wireless

    # cursor.execute("select count (*) from mysite_stationdb where vlan = '700';")
    # total_Voip = cursor.fetchall()[0][0]
    # total_Voip

    # cursor.execute("select count (*) from mysite_stationdb where vlan = '330' or vlan ='320';")
    # total_OthersPCI = cursor.fetchall()[0][0]
    # Other1 = total_OthersPCI
    # print Other1

    # print"3)............................................................................."
    # cursor.execute("select count (*) from mysite_stationdb where vlan = '200'or vlan = 210;")
    # total_End = cursor.fetchall()[0][0]
    # cursor.execute("select count (*) from mysite_mac_db where vlan = '200'or vlan = 210;")
    # total_End1 = cursor.fetchall()[0][0]
    # sub = total_End - total_End1
    # print sub
    # % for non-on boarded
    # percent_nonboardEnd = sub * 100 / total_End
    # print "percent_nonboardEnd"
    # print percent_nonboardEnd
    # % for onboarded
    # percent_OnboardEnd = total_End1 * 100 / total_End
    # print "percent_OnboardEnd"
    # print percent_OnboardEnd

    # cursor.execute(
    #  "select count (*) from mysite_stationdb where vlan = '302' or vlan = '301'or vlan ='300' or vlan ='1302';")
    # total_Biomed = cursor.fetchall()[0][0]
    # print total_Biomed
    # cursor.execute(
    #   "select count (*) from mysite_mac_db where vlan = '302' or vlan = '301'or vlan ='300' or vlan ='1302';")
    # total_Biomed1 = cursor.fetchall()[0][0]
    # sub2 = total_Biomed - total_Biomed1
    # percent_nonboardBiomed = sub2 * 100 / total_Biomed
    # print "percent_nonboardBiomed"
    # print  percent_nonboardBiomed
    # percent_OnboardBiomed = total_Biomed1 * 100 / total_Biomed
    # print "percent_OnboardBiomed"
    # print percent_OnboardBiomed

    # cursor.execute("select count (*) from mysite_stationdb where vlan = '310';")
    # total_BMS = cursor.fetchall()[0][0]
    # print "total_BMS"
    # print total_BMS
    # total_BMS = 1350
    # cursor.execute("select count (*) from mysite_mac_db where vlan = '310';")
    # total_BMS1 = cursor.fetchall()[0][0]
    # print "total_BMS1"
    # print total_BMS1

    # sub3 = total_BMS - total_BMS1
    # percent_BMS = 29 * 100.0 / 30
    # percent_nonboardBMS = sub3 * 100 / total_BMS
    # print "percent_nonboardBMS"
    # print percent_nonboardBMS
    # percent_OnboardBMS = total_BMS1 * 100 / total_BMS
    # print "percent_OnboardBMS"
    # print percent_OnboardBMS

    # cursor.execute("select count (*) from mysite_stationdb where vlan = '1100';")
    # total_Wireless = cursor.fetchall()[0][0]
    # total_Wireless = 1450
    # print total_Wireless
    # cursor.execute("select count (*) from mysite_mac_db where vlan = '1100';")
    # total_Wireless1 = cursor.fetchall()[0][0]
    # sub4 = total_Wireless - total_Wireless1
    # percent_nonboarWireless = sub4 * 100 / total_Wireless
    # print "percent_nonboarWireless"
    # print percent_nonboarWireless
    # percent_OnboarWireless = total_Wireless1 * 100 / total_Wireless
    # print "percent_OnboarWireless"
    # print percent_OnboarWireless

    # percent_Wireless = 29 * 100.0 / 30
    # print percent_Wireless
    # print ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    # cursor.execute("select count (*) from mysite_stationdb where vlan = '700';")
    # total_Voip = cursor.fetchall()[0][0]
    # total_Voip = 850
    # print total_Voip

    # cursor.execute("select count (*) from mysite_mac_db where vlan = '700';")
    # total_Voip1 = cursor.fetchall()[0][0]
    # print total_Voip1
    # sub5 = total_Voip - total_Voip1
    # print sub5
    # percent_nonboardVoip = sub5 * 100 / total_Voip
    # print "percent_nonboardVoip"
    # print percent_nonboardVoip
    # percent_Onboardvoip = total_Voip1 * 100 / total_Voip
    # print "percent_Onboardvoip"
    # print percent_Onboardvoip
    # percent_voice = 29 * 100.0 / 30
    # print percent_voice
    # print ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    # cursor.execute("select count (*) from mysite_stationdb where vlan = '330' or vlan ='1302';")
    # total_OthersPCI = cursor.fetchall()[0][0]
    # cursor.execute("select count (*) from mysite_mac_db where vlan = '330' or vlan ='1302';")
    # total_OthersPCI1 = cursor.fetchall()[0][0]
    # sub6 = total_OthersPCI - total_OthersPCI1
    # percent_nonboardOthersPCI = sub6 * 100 / total_OthersPCI
    # print "percent_nonboardOthersPCI"
    # print percent_nonboardOthersPCI
    # percent_OnboardOthersPCI = total_OthersPCI1 * 100 / total_OthersPCI
    # print "percent_OnboardOthersPCI"
    # print percent_OnboardOthersPCI

    # percent_PCI = 29 * 100.0 / 30
    # print percent_PCI

    # print"4) >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>"

    # cursor.execute("select count(mac) from mysite_mac_db where mac = '1';")
    # total_Unknown = cursor.fetchall()[0][0]
    # print total_Unknown

    # cursor.execute("select count (mac) from mysite_mac_db;")
    # total_mac = cursor.fetchall()[0][0]
    # print total_mac

    # Onboard = total_mac - total_Unknown
    # print Onboard
    # Nonboard = provisioned - Onboard - total_Unknown

    # print Nonboard

    data = {"piedata1": [10600, 20400, 5100],
            "Dcdata": [500, 267, 334, 284, 330, 345],
            "pie1data": [10500, 20000, 27729],
            "pie2data": [10500, 20000],
            "Dc1": [10500, 20000],
            "Dc2": [500, 267, 334, 284, 330, 345],
            "Dc3": [50, 150, 800],
            # "bdata1":[total_End,total_Biomed,total_BMS,total_Wireless,total_Voip,total_OthersPCI],
            # "bdata2":[total_End1,total_Biomed1,total_BMS1,total_Wireless1,total_Voip1,total_OthersPCI1]
            "bdata1": [500, 650, 800, 450, 777, 659],
            "bdata2": [200, 150, 200, 550, 250, 421],
            "pdata1": [mac_count, unused_ports],

            "pdata2": [Extraports, macdbs],
            "pdata3": [p_count, sw_count],
            "pdata4": [switches, macdbs],
            "lbl": []
            #
            #    "bdata1": [70,60,40,80,55,9,65],
            # "bdata2":[30,40,60,20,45,91,35]
            }
    # data = {"piedata1": [available_ports, provisioned, Notprovisioned],
    #       "Dcdata": [total_End, total_Biomed, total_BMS, total_Wireless, total_Voip, total_OthersPCI],
    #       "pie1data": [total_Unknown, total_mac, Nonboard],
    # "pie2data": [10500,20000],
    #       "bdata1": [percent_nonboardEnd, Voice, percent_nonboardBiomed, BMS, percent_nonboardBMS,
    #                 percent_nonboarWireless, percent_nonboardVoip, percent_nonboardOthersPCI],
    #      "bdata2": [percent_OnboardEnd, percent_OnboardBiomed, percent_OnboardBiomed, percent_OnboardBMS,
    #                 percent_OnboarWireless, percent_Onboardvoip, percent_OnboardOthersPCI]
    #     }

    return JsonResponse(data)


def addquotes(ip_list):
    if "," in ip_list:
        ip_list = ip_list.split(",")
    else:
        ip_list = [ip_list]
    ip_lst = []
    for ip in ip_list:
        ip_lst.append("'" + ip + "'")

    return ",".join(ip_lst)


def get_device_data(ip):
    conn = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
    cursor = conn.cursor()
    ip = str(ip)
    ip = addquotes(ip)
    cursor.execute(
        "select vlan,count(vlan) as vlancount from mysite_mac_db WHERE sw_ip in (" + ip + ") group by vlan order by vlancount desc;")

    vlan = cursor.fetchall()
    list1 = []
    sumvar = 0
    temp = {}
    summalladd = 0
    sumallremove = 0
    sumotherremove = 0
    sumotheradd = 0

    for m in range(len(vlan)):
        count_list = [vlan[m][1]]
        sumvar += vlan[m][1]
        temp = {}
        if m > 7:
            summalladd += get_count_grph(0, vlan[m][0], ip)
            sumotheradd += get_count_grph(0, vlan[m][0], ip)
            sumallremove += get_count_grph(1, vlan[m][0], ip)
            sumotherremove += get_count_grph(1, vlan[m][0], ip)
            # list1.append(temp.copy())
        elif m < 7:
            # sumvar =+ vlan[m][1]
            summalladd += get_count_grph(0, vlan[m][0], ip)
            sumallremove += get_count_grph(1, vlan[m][0], ip)
            temp["addvlan"] = vlan[m][0].encode('utf8')
            temp["count"] = get_count_grph(0, vlan[m][0], ip)
            temp["rcount"] = get_count_grph(1, vlan[m][0], ip)
            list1.append(temp)
    print list1
    temp = {}
    temp["addvlan"] = "ALL"
    temp["count"] = summalladd
    temp["rcount"] = sumallremove
    # list1.append(temp)
    list1.insert(0, temp)
    temp = {}
    temp["addvlan"] = "Other"
    temp["count"] = sumotheradd
    temp["rcount"] = sumotherremove
    list1.append(temp)
    vlanlist = []
    countlist = []
    rcountlist = []
    for j in list1:
        vlanlist.append(j["addvlan"])
        countlist.append(j["count"])
        rcountlist.append(j["rcount"])
    data = [vlanlist, countlist, rcountlist]
    print data
    return data


def get_count_grph(param, vlan, sw_ip):
    conn = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
    cursor = conn.cursor()
    if param == 0:
        cursor.execute(
            "select count(vlan) as vlancount from mysite_mac_db where (status = 'add') and sw_ip in (" + sw_ip + ") and vlan ='" + vlan + "';")
        add_vlan = cursor.fetchall()[0][0]
        # print add_vlan
        return add_vlan

    else:

        cursor.execute(
            "select count(vlan) as vlancount from mysite_mac_db where (status = 'remove') and sw_ip in (" + sw_ip + ") and vlan ='" + vlan + "' ;")
        count_remove = cursor.fetchall()[0][0]
        # print count_remove
        return count_remove


def get_device2_data(ip):
    conn = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
    cursor = conn.cursor()
    # ip1 = '74.95.1.202'
    ip1 = str(ip)

    vlan_list1 = []

    vlan = []
    dictionary = {}
    # print "select vlan,count(vlan) as vlancount from mysite_mac_db WHERE sw_ip in "+ip1+"group by vlan order by vlancount desc;"

    cursor.execute(
        "select vlan,count(vlan) as vlancount from mysite_mac_db WHERE sw_ip in (" + ip + ") group by vlan order by vlancount desc;")
    vlan = cursor.fetchall()
    # except Exception:
    print vlan
    list1 = []
    sumvar = 0
    list2 = []
    # range(10)
    # ADD LOGIC FOR ALL HERE IN LIST
    temp = {}

    summalladd = 0
    sumallremove = 0
    sumotherremove = 0
    sumotheradd = 0

    for m in range(len(vlan)):

        count_list = [vlan[m][1]]
        sumvar += vlan[m][1]
        temp = {}
        if m > 7:
            # sumvar = + vlan[m][1]
            # print sumvar
            # percent = bar_chart(vlan[m][1])
            temp["addvlan"] = vlan[m][0]
            summalladd += get_count_grph(0, vlan[m][0], ip)
            sumotheradd += get_count_grph(0, vlan[m][0], ip)
            sumallremove += get_count_grph(1, vlan[m][0], ip)
            sumotherremove += get_count_grph(1, vlan[m][0], ip)
            # list1.append(temp.copy())
        elif m < 7:
            # sumvar =+ vlan[m][1]
            summalladd += get_count_grph(0, vlan[m][0], ip)
            sumallremove += get_count_grph(1, vlan[m][0], ip)
            # percent = bar_chart(vlan[m][1])
            temp["addvlan"] = vlan[m][0]
            temp["count"] = get_count_grph(0, vlan[m][0], ip)
            temp["rcount"] = get_count_grph(1, vlan[m][0], ip)
            list1.append(temp)
        # temp = {}
        # temp["vlan"] = "Other"
        # temp["count"] = sumvar
        # list1.append(temp.copy())
    temp = {}
    temp["addvlan"] = "ALL"
    temp["count"] = summalladd
    temp["rcount"] = sumallremove
    list1.append(temp)
    temp = {}
    temp["addvlan"] = "Other"
    temp["count"] = sumotheradd
    temp["rcount"] = sumotherremove
    list1.append(temp)
    vlanlist = []
    countlist = []
    rcountlist = []
    for j in list1:
        vlanlist.append(j["addvlan"])
        countlist.append(j["count"])
        rcountlist.append(j["rcount"])

    data = {"dt1": vlanlist, "dt2": countlist, "dt3": rcountlist}
    #     "addvlan1":addvlan,
    #     "count":count,
    #     "rcount":rcount
    # }
    return JsonResponse(data)


def get_data_camp2():
    # {
    #   "port_usage": {"total": 96, "active": 72, "inactive": 24},
    # "active_port_type": {"poe": 20, "upoe": 1, "normal": 51},
    #  "existing_hw": ["c3850", "c3850", "c3850"],
    # "proposed_hw": ["c9300", "c9300"],
    #  "cost": ["$2000", "$2000"]
    # }

    camp2_data = {
        "port_usage": [72, 24],
        "active_port_type": [20, 1, 51],
        "existing_hw": ["c3850", "c3850", "c3850"],
        "proposed_hw": ["c9300", "c9300"],
        "cost": ["$2000", "$2000"],
        "proposed_design": [20, 4, 30, 18]
    }

    return camp2_data


def cost_estimator(request):
    return render(request, "cost_estimator.html")


def home(request):
    return render(request, "index.html")


def vdemo(request):
    return render(request, "Vue_demo.html")


def newRq(request):
    return render(request, "options/newReq.html")


def cloneRq(request):
    return render(request, "options/cloneReq.html")


def twr(request):
    return render(request, "options/taskwoReqno.html")


def modRq(request):
    return render(request, "options/modifyReq.html")


def dispRq(request):
    return render(request, "options/dispReq.html")


def exRq(request):
    return render(request, "options/existReq.html")


def green(request):
    return render(request, "options/greenfield.html")


def firstResp(request):
    return render(request, "options/greenfield.html", data)


def green_response(request, *args, **kwargs):
    data = {"column": "12",
            "inputs":
                [{"hide": "hide", "name": "green_field", "default1": "", "rhide": "hide", "extraclass": "color-black",
                  "type": "hidden", "desc": "Green Field Prject"},
                 {"border": "yes", "type": "line", "label": "Solution Requirements"},
                 {"length": "full", "trigger": ["business_requirement_others"], "hide": "hide",
                  "name": "buisness_requirement", "format": "default1", "default1": "", "type": "dropdown-checkbox",
                  "options": [{"value": "Agility", "label": "Agility"},
                              {"value": "Digitization", "label": "Digitization"},
                              {"value": "Reduce Cost ", "label": "Reduce Cost"},
                              {"value": "High Availability", "label": "High Availability"},
                              {"value": "Security", "label": "Security"},
                              {"value": "Compliance", "label": "Compliance"},
                              {"value": "Network Optimization", "label": "Network Optimization"},
                              {"value": "Other", "label": "Other"}], "condition": "Other",
                  "desc": "Business Requirements"}, {"length": "full",
                                                     "options": [{"value": "Agility", "label": "Agility"},
                                                                 {"value": "Digitization", "label": "Digitization"},
                                                                 {"value": "Reduce Cost ", "label": "Reduce Cost"},
                                                                 {"value": "High Availability",
                                                                  "label": "High Availability"},
                                                                 {"value": "Security", "label": "Security"},
                                                                 {"value": "Compliance", "label": "Compliance"},
                                                                 {"value": "Network Optimization",
                                                                  "label": "Network Optimization"},
                                                                 {"value": "Other", "label": "Other"}], "hide": "hide",
                                                     "name": "business_requirement_others", "rhide": "hide",
                                                     "default1": "", "type": "text", "example": "",
                                                     "desc": "Other Buisness Requirements"},
                 {"format": "default1", "checklabel": "Network Infra Challenges", "condition": "Other",
                  "desc": "Network Infra Challenges", "hide": "hide", "name": "network_infra_challenges",
                  "length": "full", "trigger": ["network_infra_challenges_others"], "default1": "",
                  "type": "dropdown-checkbox", "options": [{"value": "Slow Network", "label": "Slow Network"},
                                                           {"value": "Not Reliable", "label": "Not Reliable"},
                                                           {"value": "Documentation", "label": "Documentation"},
                                                           {"value": "Lack of Consistent standards",
                                                            "label": "Lack of Consistent standards"},
                                                           {"value": "Lac of Visibility",
                                                            "label": "Lack of Visibility"},
                                                           {"value": "Complex", "label": "Complex"},
                                                           {"value": "Other", "label": "Other"}]},
                 {"length": "full", "hide": "hide", "name": "network_infra_challenges_others", "rhide": "hide",
                  "default1": "", "type": "text", "example": "", "desc": "Other Network Infra Challenges"},
                 {"format": "default1", "checklabel": "Technical Requirements", "condition": "Multicast",
                  "desc": "Technical Requirements", "hide": "hide", "name": "technical_requirement", "length": "full",
                  "trigger": ["multicast_type", "multicast_ip_pool", "remote_rp", "Multicast_test_group"],
                  "default1": "", "type": "dropdown-checkbox",
                  "options": [{"value": "Multi-site", "label": "Multi-site"},
                              {"value": "wireless Fabric", "label": "Wireless Fabric"},
                              {"value": "Micro Segmentation", "label": "Micro-Segmentation"},
                              {"value": "Trust Sec", "label": "Trust Sec"},
                              {"value": "Macro Segmentation", "label": "Macro-Segmentation"},
                              {"value": "Multicast", "label": "Multicast"},
                              {"value": "Layer 2 Extension", "label": "Layer 2 Extension"},
                              {"value": "Extended Nodes", "label": "Extended Nodes"},
                              {"value": "Infoblox Integration", "label": "Infoblox Integration"},
                              {"value": "ACI Integration", "label": "ACI Integration"},
                              {"value": "Assurance", "label": "Assurance"},
                              {"value": "Automation", "label": "Automation"},
                              {"value": "BGP Automation", "label": "BGP Automation"},
                              {"value": "Underlay Automation", "label": "Underlay Automation"},
                              {"value": "Other", "label": "Other"}]},
                 {"length": "full", "hide": "hide", "name": "other_technical_requirements", "rhide": "hide",
                  "default1": "", "type": "text", "example": "", "desc": "Other Technical Requirements"},
                 {"length": "full", "hide": "hide", "name": "layer_2_extension", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Layer 2 Extension VLAN"},
                 {"length": "full", "hide": "hide", "name": "multicast_type", "format": "default1", "default1": "",
                  "type": "dropdown", "options": [{"value": "Native", "label": "Native Multicast"},
                                                  {"value": "Replication", "label": "Head-end Replication"},
                                                  {"value": "Native-rp", "label": "Native Multicast with remote RP"},
                                                  {"value": "Replication-rp",
                                                   "label": "Head-end Replication with remote RP"}],
                  "condition": "Other", "desc": "Multicast Deployment Type"},
                 {"length": "full", "hide": "hide", "name": "multicast_ip_pool", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Multicast IP Pool"},
                 {"length": "full", "hide": "hide", "name": "remote_rp", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Remote RP IP"},
                 {"length": "full", "hide": "hide", "name": "Multicast_test_group", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Multicast test Group"},
                 {"length": "full", "trigger": ["others"], "hide": "hide", "name": "project_scope",
                  "format": "default1", "default1": "", "type": "dropdown-checkbox",
                  "options": [{"value": "POC", "label": "POC"},
                              {"value": "Mentored Deployment", "label": "Mentored Deployment"},
                              {"value": "Design ", "label": "Design"},
                              {"value": "Implementation", "label": "Implementation"},
                              {"value": "Other", "label": "Other"}], "condition": "Other", "desc": "Project Scope"},
                 {"length": "full", "options": "   ", "hide": "hide", "name": "others", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Other"},
                 {"hide": "hide", "name": "Project Timeline", "length": "full", "default1": "", "rhide": "hide",
                  "type": "text", "desc": "Project Timeline"},
                 {"hide": "hide", "name": "project_hours", "length": "full", "default1": "", "rhide": "hide",
                  "type": "text", "desc": "Project Hours"},
                 {"length": "full", "trigger": ["netserv_other_reponsibilities"], "hide": "hide",
                  "name": "NetServ's Responsibilities", "format": "default1", "default1": "",
                  "type": "dropdown-checkbox", "options": [{"value": "Site Survey", "label": "Site Survey"},
                                                           {"value": "Data Gathering", "label": "Data Gathering"},
                                                           {"value": "Port Mapping", "label": "Port Mapping"},
                                                           {"value": "Provide PM", "label": "Provide PM"},
                                                           {"value": "Integrate DNA-C with existing tools",
                                                            "label": "Integrate DNA-C with existing tools"},
                                                           {"value": "Network Assesment", "label": "Network Assesment"},
                                                           {"value": "Create Configuration",
                                                            "label": "Create Configuration"},
                                                           {"value": "Install DNAC-C", "label": "Install DNA-C"},
                                                           {"value": "Upgrade DNAC-C", "label": "Upgrade DNA-C"},
                                                           {"value": "Install ISE", "label": "Install ISE"},
                                                           {"value": "Upgrade ISE", "label": "Upgrade ISE"},
                                                           {"value": "Configure ISE", "label": "Configure ISE"},
                                                           {"value": "Testing", "label": "Testing"},
                                                           {"value": "Other", "label": "Other"}], "condition": "Other",
                  "desc": "NetServ's Responsibilities"},
                 {"length": "full", "rows": "4", "hide": "hide", "name": "netserv_other_reponsibilities",
                  "rhide": "hide", "default1": "", "format": "", "type": "text",
                  "desc": "NetServ's Other Responsibilities"},
                 {"length": "full", "trigger": ["client_other_responsibilities"], "hide": "hide",
                  "name": "Client's Responsibilities", "format": "default1", "default1": "",
                  "type": "dropdown-checkbox", "options": [{"value": "Site Survey", "label": "Site Survey"},
                                                           {"value": "Data Gathering", "label": "Data Gathering"},
                                                           {"value": "Approve Config", "label": "Approve Config"},
                                                           {"value": "Racking and Cabling ",
                                                            "label": "Racking and Cabling "},
                                                           {"value": "Review and Approve Design",
                                                            "label": "Review and Approve Design"},
                                                           {"value": "DHCP and DNA changes ",
                                                            "label": "DHCP and DNA changes "},
                                                           {"value": "Firewall changes", "label": "Firewall changes"},
                                                           {"value": "Any Non-SDA Fabric changes ",
                                                            "label": "Any Non-SDA Fabric changes "},
                                                           {"value": "Install ISE", "label": "Install ISE"},
                                                           {"value": "Upgrade ISE", "label": "Upgrade ISE"},
                                                           {"value": "Configure ISE", "label": "Configure ISE"},
                                                           {"value": "Other", "label": "Other"}], "condition": "Other",
                  "desc": "Client's Responsibilities"},
                 {"length": "full", "rows": "4", "hide": "hide", "name": "client_other_responsibilities",
                  "rhide": "hide", "default1": "", "format": "", "type": "text",
                  "desc": "Client's Other Responsibilities"},
                 {"border": "yes", "type": "line", "label": "Topology Setup and Size"},
                 {"length": "full", "default1": "", "name": "External Connectivity Type", "rhide": "hide",
                  "hide": "hide", "type": "dropdown", "options": [{"value": "Internet", "label": "Internet"},
                                                                  {"value": "Private MPLS", "label": "Private MPLS"},
                                                                  {"value": "ISP MPLS", "label": "ISP MPLS"},
                                                                  {"hide": "hide", "value": "Layer3 Core",
                                                                   "label": "Layer3 Core"},
                                                                  {"hide": "hide", "value": "Layer2 MPLS",
                                                                   "label": "Layer2 MPLS"}],
                  "desc": "External Connectivity Type"},
                 {"length": "full", "default1": "", "name": "Device / Appliances at the site location",
                  "format": "default1", "hide": "hide", "rhide": "hide", "type": "dropdown-checkbox",
                  "options": [{"value": "WLC ", "label": "WLC"}, {"value": "Firewall", "label": "Firewall"},
                              {"value": "Fusion Router", "label": "Fusion Router"}, {"value": "ISE", "label": "ISE"},
                              {"value": "DNA-C", "label": "DNA-C"}, {"value": "DHCP Server", "label": "DHCP Server"}],
                  "desc": "Devices / Appliances at the site location"},
                 {"length": "full", "hide": "hide", "name": "DNA-C Appliances", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": 1, "label": 1}, {"value": 2, "label": 2}, {"value": 3, "label": 3}],
                  "desc": "DNA-C Appliances"},
                 {"length": "full", "hide": "hide", "name": "Sites", "rhide": "hide", "default1": "", "type": "text",
                  "options": "", "desc": "Sites"},
                 {"length": "full", "hide": "hide", "name": "Closets", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": "1", "label": "1"}, {"value": "2", "label": "2"}, {"value": "3", "label": "3"},
                              {"value": "4", "label": "4"}, {"value": "5", "label": "5"}, {"value": "6", "label": "6"},
                              {"value": "7", "label": "7"}, {"value": "8", "label": "8"}, {"value": "9", "label": "9"},
                              {"value": "10", "label": "10"}, {"value": "11", "label": "11"},
                              {"value": "12", "label": "12"}, {"value": "13", "label": "13"},
                              {"value": "14", "label": "14"}, {"value": "15", "label": "15"},
                              {"value": "16", "label": "16"}, {"value": "17", "label": "17"},
                              {"value": "18", "label": "18"}, {"value": "19", "label": "19"},
                              {"value": "20", "label": "20"}], "desc": "Closets"},
                 {"length": "full", "hide": "hide", "name": "Access SWs", "rhide": "hide", "default1": "",
                  "type": "text", "options": [], "desc": "Access SWs"},
                 {"length": "full", "hide": "hide", "name": "WLCs", "rhide": "hide", "default1": "", "type": "dropdown",
                  "options": [{"value": 1, "label": 1}, {"value": 2, "label": 2}, {"value": 3, "label": 3},
                              {"value": 4, "label": 4}, {"value": 5, "label": 5}, {"value": 6, "label": 6},
                              {"value": 7, "label": 7}, {"value": 8, "label": 8}], "desc": "WLCs"},
                 {"length": "full", "hide": "hide", "name": "APs", "rhide": "hide", "default1": "", "type": "text",
                  "options": "", "desc": "APs"},
                 {"length": "full", "hide": "hide", "name": "Device Types", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": 4, "label": 4}, {"value": 5, "label": 5}, {"value": 6, "label": 6},
                              {"value": 7, "label": 7}, {"value": 8, "label": 8}, {"value": 9, "label": 9},
                              {"value": 10, "label": 10}, {"value": 11, "label": 11}, {"value": 12, "label": 12},
                              {"value": 13, "label": 13}, {"value": 14, "label": 14}, {"value": 15, "label": 15}],
                  "desc": "Device Types"},
                 {"length": "full", "hide": "hide", "name": "End-User Devices", "rhide": "hide", "default1": "",
                  "type": "text", "options": "", "desc": "End-User Devices"},
                 {"length": "full", "hide": "hide", "name": "Virtual Networks", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": 1, "label": 1}, {"value": 2, "label": 2}, {"value": 3, "label": 3},
                              {"value": 4, "label": 4}, {"value": 5, "label": 5}, {"value": 6, "label": 6},
                              {"value": 7, "label": 7}, {"value": 8, "label": 8}, {"value": 9, "label": 9},
                              {"value": 10, "label": 10}], "desc": "Virtual Networks"},
                 {"length": "full", "hide": "hide", "name": "SSIDs", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": 2, "label": 2}, {"value": 3, "label": 3}, {"value": 4, "label": 4},
                              {"value": 5, "label": 5}, {"value": 6, "label": 6}, {"value": 7, "label": 7},
                              {"value": 8, "label": 8}, {"value": 9, "label": 9}, {"value": 10, "label": 10}],
                  "desc": "SSIDs"},
                 {"length": "full", "hide": "hide", "name": "Security Contracts", "rhide": "hide", "default1": "",
                  "type": "text", "options": "", "desc": "Security Contracts"},
                 {"length": "full", "hide": "hide", "name": "Device Profiles", "rhide": "hide",
                  "extraclass": "color-black", "default1": "", "type": "dropdown",
                  "options": [{"value": "4", "label": "4"}, {"value": "6", "label": "6"}, {"value": "8", "label": "8"},
                              {"value": "10", "label": "10"}, {"value": "12", "label": "12"},
                              {"value": "14", "label": "14"}, {"value": "16", "label": "16"},
                              {"value": "18", "label": "18"}, {"value": "20", "label": "20"}],
                  "desc": "Device Profiles"},
                 {"length": "full", "hide": "hide", "name": "Authorization Profiles", "rhide": "hide",
                  "extraclass": "color-black", "default1": "", "type": "dropdown",
                  "options": [{"value": "4", "label": "4"}, {"value": "6", "label": "6"}, {"value": "8", "label": "8"},
                              {"value": "10", "label": "10"}, {"value": "12", "label": "12"},
                              {"value": "14", "label": "14"}, {"value": "16", "label": "16"},
                              {"value": "18", "label": "18"}, {"value": "20", "label": "20"}],
                  "desc": "Authorization Profiles"}, {"border": "yes", "type": "line", "label": "Platforms"},
                 {"length": "full", "hide": "hide", "name": "access_switches", "rhide": "hide", "default1": "",
                  "type": "dropdown-checkbox",
                  "options": [{"value": "c9200", "label": "C9200"}, {"value": "c9300", "label": "C9300"},
                              {"value": "c9400", "label": "C9400"}, {"value": "c9500", "label": "C9500"},
                              {"value": "C3850", "label": "C3850"}, {"value": "C3650", "label": "C3650"},
                              {"value": "4500E", "label": "4500E"}], "desc": "Access Switches"},
                 {"length": "full", "hide": "hide", "name": "wireless_controller", "format": "default1", "default1": "",
                  "rhide": "hide", "type": "dropdown-checkbox",
                  "options": [{"value": "CT9800-80", "label": "9800-80"}, {"value": "CT9800-40", "label": "9800-40"},
                              {"value": "CT9800-CL", "label": "9800-CL"}, {"value": "CT9800 ", "label": "9800"},
                              {"value": "CT3504", "label": "CT3504"}, {"value": "CT5520", "label": "CT5520"},
                              {"value": "CT8510", "label": "CT8510"}, {"value": "CT8540", "label": "CT8540"}],
                  "desc": "Wireless Controller"},
                 {"length": "full", "hide": "hide", "name": "border_router", "rhide": "hide", "default1": "",
                  "type": "dropdown-checkbox",
                  "options": [{"value": "C9300", "label": "C9300"}, {"value": "C9500", "label": "C9500"},
                              {"value": "C9400", "label": "C9400"}, {"value": "C3850", "label": "C3850"},
                              {"value": "C6500 or C6807-XL", "label": "C6500 or C6807-XL"},
                              {"value": "C6880-X", "label": "C6880-X"}, {"value": "C6840-X", "label": "C6840-X"},
                              {"value": "NX7700", "label": "NX7700"},
                              {"value": "ISR4400 and ISR4300", "label": "ISR4400 and ISR4300"},
                              {"value": "ASR 1000-X and 1000-HX", "label": "ASR 1000-X and 1000-HX"},
                              {"value": "Cloud Services Router 1000v (Fabric Control Plane only)\t",
                               "label": "Cloud Services Router 1000v (Fabric Control Plane only)"}],
                  "desc": "Border Router"},
                 {"length": "full", "hide": "hide", "name": "access_point", "rhide": "hide", "default1": "",
                  "type": "dropdown-checkbox",
                  "options": [{"value": "AP1540", "label": "AP1540"}, {"value": "AP1560", "label": "AP1560"},
                              {"value": "AP4800", "label": "AP4800"}, {"value": "AP1700", "label": "AP1700"},
                              {"value": "AP1800", "label": "AP1800"}, {"value": "AP2700", "label": "AP2700"},
                              {"value": "AP2800", "label": "AP2800"}, {"value": "AP3700", "label": "AP3700"},
                              {"value": "AP3800", "label": "AP3800"}], "desc": "Access Point"},
                 {"border": "yes", "type": "line", "label": "Completed Tasks"},
                 {"length": "full", "hide": "hide", "name": "hardware", "format": "default1",
                  "extraclass": "color-black", "default1": "", "rhide": "hide", "type": "dropdown-checkbox",
                  "options": [{"value": "Not Finalized", "label": "Not Finalized"},
                              {"value": "BOM Ready", "label": "BOM Ready"}, {"value": "Ordered", "label": "Ordered"},
                              {"value": "Available", "label": "Available"},
                              {"value": "Partially Available", "label": "Partially Available"}],
                  "desc": "Hardware Status"},
                 {"length": "full", "hide": "hide", "name": "completed_task_others", "format": "default1",
                  "extraclass": "color-black", "default1": "", "rhide": "hide", "type": "dropdown-checkbox",
                  "options": [
                      {"trigger": ["site_survey"], "hide": "hide", "value": "Site Survey", "label": "Site Survey"},
                      {"value": "dnac_installed", "label": "DNA-C installed"},
                      {"value": "will_wireles_use_existing_wlc", "label": "Will wireless use  existing WLC"},
                      {"value": "ise_installed", "label": "ISE installed"},
                      {"value": "High Level Design", "label": "High level Design"},
                      {"value": "Network Assesments", "label": "Network Assesments"},
                      {"value": "Port matrix", "label": "Port Matrix"}], "desc": "Other"},
                 {"length": "full", "trigger": ["other_next_actions"], "hide": "hide", "name": "Next Action",
                  "format": "default1", "default1": "", "type": "dropdown-checkbox",
                  "options": [{"value": "Estimates", "label": "Proposal/Estimates"}, {"value": "SoW", "label": "SoW"},
                              {"value": "Gather Requirements", "label": "Gather Requirements"},
                              {"value": "Discovery", "label": "Discovery"},
                              {"value": "High Level Solution ", "label": "High Level Solution"},
                              {"value": "High Level Design", "label": "High Level Design"},
                              {"value": "Other", "label": "Other"}], "condition": "Other", "desc": "Next Action"},
                 {"length": "full", "options": "   ", "hide": "hide", "name": "other_next_actions", "rhide": "hide",
                  "default1": "", "type": "text", "example": "", "desc": "Other Next Action"},
                 {"hide": "hide", "name": "customer_info", "length": "full", "default1": "", "rhide": "hide",
                  "type": "textarea", "desc": "Customer Information"}], "newline": "yes", "opflag": 1}
    return JsonResponse(data)


def third_response(request, *args, **kwargs):
    data = {"column": "12",
            "inputs":
                [{"hide": "hide", "name": "green_field", "default1": "", "rhide": "hide", "extraclass": "color-black",
                  "type": "hidden", "desc": "Green Field Prject"},
                 {"border": "yes", "type": "line", "label": "Solution Requirements"},
                 {"length": "full", "trigger": ["business_requirement_others"], "hide": "hide",
                  "name": "buisness_requirement", "format": "default1", "default1": "", "type": "dropdown-checkbox",
                  "options": [{"value": "Agility", "label": "Agility"},
                              {"value": "Digitization", "label": "Digitization"},
                              {"value": "Reduce Cost ", "label": "Reduce Cost"},
                              {"value": "High Availability", "label": "High Availability"},
                              {"value": "Security", "label": "Security"},
                              {"value": "Compliance", "label": "Compliance"},
                              {"value": "Network Optimization", "label": "Network Optimization"},
                              {"value": "Other", "label": "Other"}], "condition": "Other",
                  "desc": "Business Requirements"}, {"length": "full",
                                                     "options": [{"value": "Agility", "label": "Agility"},
                                                                 {"value": "Digitization", "label": "Digitization"},
                                                                 {"value": "Reduce Cost ", "label": "Reduce Cost"},
                                                                 {"value": "High Availability",
                                                                  "label": "High Availability"},
                                                                 {"value": "Security", "label": "Security"},
                                                                 {"value": "Compliance", "label": "Compliance"},
                                                                 {"value": "Network Optimization",
                                                                  "label": "Network Optimization"},
                                                                 {"value": "Other", "label": "Other"}], "hide": "hide",
                                                     "name": "business_requirement_others", "rhide": "hide",
                                                     "default1": "", "type": "text", "example": "",
                                                     "desc": "Other Buisness Requirements"},
                 {"format": "default1", "checklabel": "Network Infra Challenges", "condition": "Other",
                  "desc": "Network Infra Challenges", "hide": "hide", "name": "network_infra_challenges",
                  "length": "full", "trigger": ["network_infra_challenges_others"], "default1": "",
                  "type": "dropdown-checkbox", "options": [{"value": "Slow Network", "label": "Slow Network"},
                                                           {"value": "Not Reliable", "label": "Not Reliable"},
                                                           {"value": "Documentation", "label": "Documentation"},
                                                           {"value": "Lack of Consistent standards",
                                                            "label": "Lack of Consistent standards"},
                                                           {"value": "Lac of Visibility",
                                                            "label": "Lack of Visibility"},
                                                           {"value": "Complex", "label": "Complex"},
                                                           {"value": "Other", "label": "Other"}]},
                 {"length": "full", "hide": "hide", "name": "network_infra_challenges_others", "rhide": "hide",
                  "default1": "", "type": "text", "example": "", "desc": "Other Network Infra Challenges"},
                 {"format": "default1", "checklabel": "Technical Requirements", "condition": "Multicast",
                  "desc": "Technical Requirements", "hide": "hide", "name": "technical_requirement", "length": "full",
                  "trigger": ["multicast_type", "multicast_ip_pool", "remote_rp", "Multicast_test_group"],
                  "default1": "", "type": "dropdown-checkbox",
                  "options": [{"value": "Multi-site", "label": "Multi-site"},
                              {"value": "wireless Fabric", "label": "Wireless Fabric"},
                              {"value": "Micro Segmentation", "label": "Micro-Segmentation"},
                              {"value": "Trust Sec", "label": "Trust Sec"},
                              {"value": "Macro Segmentation", "label": "Macro-Segmentation"},
                              {"value": "Multicast", "label": "Multicast"},
                              {"value": "Layer 2 Extension", "label": "Layer 2 Extension"},
                              {"value": "Extended Nodes", "label": "Extended Nodes"},
                              {"value": "Infoblox Integration", "label": "Infoblox Integration"},
                              {"value": "ACI Integration", "label": "ACI Integration"},
                              {"value": "Assurance", "label": "Assurance"},
                              {"value": "Automation", "label": "Automation"},
                              {"value": "BGP Automation", "label": "BGP Automation"},
                              {"value": "Underlay Automation", "label": "Underlay Automation"},
                              {"value": "Other", "label": "Other"}]},
                 {"length": "full", "hide": "hide", "name": "other_technical_requirements", "rhide": "hide",
                  "default1": "", "type": "text", "example": "", "desc": "Other Technical Requirements"},
                 {"length": "full", "hide": "hide", "name": "layer_2_extension", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Layer 2 Extension VLAN"},
                 {"length": "full", "hide": "hide", "name": "multicast_type", "format": "default1", "default1": "",
                  "type": "dropdown", "options": [{"value": "Native", "label": "Native Multicast"},
                                                  {"value": "Replication", "label": "Head-end Replication"},
                                                  {"value": "Native-rp", "label": "Native Multicast with remote RP"},
                                                  {"value": "Replication-rp",
                                                   "label": "Head-end Replication with remote RP"}],
                  "condition": "Other", "desc": "Multicast Deployment Type"},
                 {"length": "full", "hide": "hide", "name": "multicast_ip_pool", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Multicast IP Pool"},
                 {"length": "full", "hide": "hide", "name": "remote_rp", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Remote RP IP"},
                 {"length": "full", "hide": "hide", "name": "Multicast_test_group", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Multicast test Group"},
                 {"length": "full", "trigger": ["others"], "hide": "hide", "name": "project_scope",
                  "format": "default1", "default1": "", "type": "dropdown-checkbox",
                  "options": [{"value": "POC", "label": "POC"},
                              {"value": "Mentored Deployment", "label": "Mentored Deployment"},
                              {"value": "Design ", "label": "Design"},
                              {"value": "Implementation", "label": "Implementation"},
                              {"value": "Other", "label": "Other"}], "condition": "Other", "desc": "Project Scope"},
                 {"length": "full", "options": "   ", "hide": "hide", "name": "others", "rhide": "hide", "default1": "",
                  "type": "text", "example": "", "desc": "Other"},
                 {"hide": "hide", "name": "Project Timeline", "length": "full", "default1": "", "rhide": "hide",
                  "type": "text", "desc": "Project Timeline"},
                 {"hide": "hide", "name": "project_hours", "length": "full", "default1": "", "rhide": "hide",
                  "type": "text", "desc": "Project Hours"},
                 {"length": "full", "trigger": ["netserv_other_reponsibilities"], "hide": "hide",
                  "name": "NetServ's Responsibilities", "format": "default1", "default1": "",
                  "type": "dropdown-checkbox", "options": [{"value": "Site Survey", "label": "Site Survey"},
                                                           {"value": "Data Gathering", "label": "Data Gathering"},
                                                           {"value": "Port Mapping", "label": "Port Mapping"},
                                                           {"value": "Provide PM", "label": "Provide PM"},
                                                           {"value": "Integrate DNA-C with existing tools",
                                                            "label": "Integrate DNA-C with existing tools"},
                                                           {"value": "Network Assesment", "label": "Network Assesment"},
                                                           {"value": "Create Configuration",
                                                            "label": "Create Configuration"},
                                                           {"value": "Install DNAC-C", "label": "Install DNA-C"},
                                                           {"value": "Upgrade DNAC-C", "label": "Upgrade DNA-C"},
                                                           {"value": "Install ISE", "label": "Install ISE"},
                                                           {"value": "Upgrade ISE", "label": "Upgrade ISE"},
                                                           {"value": "Configure ISE", "label": "Configure ISE"},
                                                           {"value": "Testing", "label": "Testing"},
                                                           {"value": "Other", "label": "Other"}], "condition": "Other",
                  "desc": "NetServ's Responsibilities"},
                 {"length": "full", "rows": "4", "hide": "hide", "name": "netserv_other_reponsibilities",
                  "rhide": "hide", "default1": "", "format": "", "type": "text",
                  "desc": "NetServ's Other Responsibilities"},
                 {"length": "full", "trigger": ["client_other_responsibilities"], "hide": "hide",
                  "name": "Client's Responsibilities", "format": "default1", "default1": "",
                  "type": "dropdown-checkbox", "options": [{"value": "Site Survey", "label": "Site Survey"},
                                                           {"value": "Data Gathering", "label": "Data Gathering"},
                                                           {"value": "Approve Config", "label": "Approve Config"},
                                                           {"value": "Racking and Cabling ",
                                                            "label": "Racking and Cabling "},
                                                           {"value": "Review and Approve Design",
                                                            "label": "Review and Approve Design"},
                                                           {"value": "DHCP and DNA changes ",
                                                            "label": "DHCP and DNA changes "},
                                                           {"value": "Firewall changes", "label": "Firewall changes"},
                                                           {"value": "Any Non-SDA Fabric changes ",
                                                            "label": "Any Non-SDA Fabric changes "},
                                                           {"value": "Install ISE", "label": "Install ISE"},
                                                           {"value": "Upgrade ISE", "label": "Upgrade ISE"},
                                                           {"value": "Configure ISE", "label": "Configure ISE"},
                                                           {"value": "Other", "label": "Other"}], "condition": "Other",
                  "desc": "Client's Responsibilities"},
                 {"length": "full", "rows": "4", "hide": "hide", "name": "client_other_responsibilities",
                  "rhide": "hide", "default1": "", "format": "", "type": "text",
                  "desc": "Client's Other Responsibilities"},
                 {"border": "yes", "type": "line", "label": "Topology Setup and Size"},
                 {"length": "full", "default1": "", "name": "External Connectivity Type", "rhide": "hide",
                  "hide": "hide", "type": "dropdown", "options": [{"value": "Internet", "label": "Internet"},
                                                                  {"value": "Private MPLS", "label": "Private MPLS"},
                                                                  {"value": "ISP MPLS", "label": "ISP MPLS"},
                                                                  {"hide": "hide", "value": "Layer3 Core",
                                                                   "label": "Layer3 Core"},
                                                                  {"hide": "hide", "value": "Layer2 MPLS",
                                                                   "label": "Layer2 MPLS"}],
                  "desc": "External Connectivity Type"},
                 {"length": "full", "default1": "", "name": "Device / Appliances at the site location",
                  "format": "default1", "hide": "hide", "rhide": "hide", "type": "dropdown-checkbox",
                  "options": [{"value": "WLC ", "label": "WLC"}, {"value": "Firewall", "label": "Firewall"},
                              {"value": "Fusion Router", "label": "Fusion Router"}, {"value": "ISE", "label": "ISE"},
                              {"value": "DNA-C", "label": "DNA-C"}, {"value": "DHCP Server", "label": "DHCP Server"}],
                  "desc": "Devices / Appliances at the site location"},
                 {"length": "full", "hide": "hide", "name": "DNA-C Appliances", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": 1, "label": 1}, {"value": 2, "label": 2}, {"value": 3, "label": 3}],
                  "desc": "DNA-C Appliances"},
                 {"length": "full", "hide": "hide", "name": "Sites", "rhide": "hide", "default1": "", "type": "text",
                  "options": "", "desc": "Sites"},
                 {"length": "full", "hide": "hide", "name": "Closets", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": "1", "label": "1"}, {"value": "2", "label": "2"}, {"value": "3", "label": "3"},
                              {"value": "4", "label": "4"}, {"value": "5", "label": "5"}, {"value": "6", "label": "6"},
                              {"value": "7", "label": "7"}, {"value": "8", "label": "8"}, {"value": "9", "label": "9"},
                              {"value": "10", "label": "10"}, {"value": "11", "label": "11"},
                              {"value": "12", "label": "12"}, {"value": "13", "label": "13"},
                              {"value": "14", "label": "14"}, {"value": "15", "label": "15"},
                              {"value": "16", "label": "16"}, {"value": "17", "label": "17"},
                              {"value": "18", "label": "18"}, {"value": "19", "label": "19"},
                              {"value": "20", "label": "20"}], "desc": "Closets"},
                 {"length": "full", "hide": "hide", "name": "Access SWs", "rhide": "hide", "default1": "",
                  "type": "text", "options": [], "desc": "Access SWs"},
                 {"length": "full", "hide": "hide", "name": "WLCs", "rhide": "hide", "default1": "", "type": "dropdown",
                  "options": [{"value": 1, "label": 1}, {"value": 2, "label": 2}, {"value": 3, "label": 3},
                              {"value": 4, "label": 4}, {"value": 5, "label": 5}, {"value": 6, "label": 6},
                              {"value": 7, "label": 7}, {"value": 8, "label": 8}], "desc": "WLCs"},
                 {"length": "full", "hide": "hide", "name": "APs", "rhide": "hide", "default1": "", "type": "text",
                  "options": "", "desc": "APs"},
                 {"length": "full", "hide": "hide", "name": "Device Types", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": 4, "label": 4}, {"value": 5, "label": 5}, {"value": 6, "label": 6},
                              {"value": 7, "label": 7}, {"value": 8, "label": 8}, {"value": 9, "label": 9},
                              {"value": 10, "label": 10}, {"value": 11, "label": 11}, {"value": 12, "label": 12},
                              {"value": 13, "label": 13}, {"value": 14, "label": 14}, {"value": 15, "label": 15}],
                  "desc": "Device Types"},
                 {"length": "full", "hide": "hide", "name": "End-User Devices", "rhide": "hide", "default1": "",
                  "type": "text", "options": "", "desc": "End-User Devices"},
                 {"length": "full", "hide": "hide", "name": "Virtual Networks", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": 1, "label": 1}, {"value": 2, "label": 2}, {"value": 3, "label": 3},
                              {"value": 4, "label": 4}, {"value": 5, "label": 5}, {"value": 6, "label": 6},
                              {"value": 7, "label": 7}, {"value": 8, "label": 8}, {"value": 9, "label": 9},
                              {"value": 10, "label": 10}], "desc": "Virtual Networks"},
                 {"length": "full", "hide": "hide", "name": "SSIDs", "rhide": "hide", "default1": "",
                  "type": "dropdown",
                  "options": [{"value": 2, "label": 2}, {"value": 3, "label": 3}, {"value": 4, "label": 4},
                              {"value": 5, "label": 5}, {"value": 6, "label": 6}, {"value": 7, "label": 7},
                              {"value": 8, "label": 8}, {"value": 9, "label": 9}, {"value": 10, "label": 10}],
                  "desc": "SSIDs"},
                 {"length": "full", "hide": "hide", "name": "Security Contracts", "rhide": "hide", "default1": "",
                  "type": "text", "options": "", "desc": "Security Contracts"},
                 {"length": "full", "hide": "hide", "name": "Device Profiles", "rhide": "hide",
                  "extraclass": "color-black", "default1": "", "type": "dropdown",
                  "options": [{"value": "4", "label": "4"}, {"value": "6", "label": "6"}, {"value": "8", "label": "8"},
                              {"value": "10", "label": "10"}, {"value": "12", "label": "12"},
                              {"value": "14", "label": "14"}, {"value": "16", "label": "16"},
                              {"value": "18", "label": "18"}, {"value": "20", "label": "20"}],
                  "desc": "Device Profiles"},
                 {"length": "full", "hide": "hide", "name": "Authorization Profiles", "rhide": "hide",
                  "extraclass": "color-black", "default1": "", "type": "dropdown",
                  "options": [{"value": "4", "label": "4"}, {"value": "6", "label": "6"}, {"value": "8", "label": "8"},
                              {"value": "10", "label": "10"}, {"value": "12", "label": "12"},
                              {"value": "14", "label": "14"}, {"value": "16", "label": "16"},
                              {"value": "18", "label": "18"}, {"value": "20", "label": "20"}],
                  "desc": "Authorization Profiles"}, {"border": "yes", "type": "line", "label": "Platforms"},
                 {"length": "full", "hide": "hide", "name": "access_switches", "rhide": "hide", "default1": "",
                  "type": "dropdown-checkbox",
                  "options": [{"value": "c9200", "label": "C9200"}, {"value": "c9300", "label": "C9300"},
                              {"value": "c9400", "label": "C9400"}, {"value": "c9500", "label": "C9500"},
                              {"value": "C3850", "label": "C3850"}, {"value": "C3650", "label": "C3650"},
                              {"value": "4500E", "label": "4500E"}], "desc": "Access Switches"},
                 {"length": "full", "hide": "hide", "name": "wireless_controller", "format": "default1", "default1": "",
                  "rhide": "hide", "type": "dropdown-checkbox",
                  "options": [{"value": "CT9800-80", "label": "9800-80"}, {"value": "CT9800-40", "label": "9800-40"},
                              {"value": "CT9800-CL", "label": "9800-CL"}, {"value": "CT9800 ", "label": "9800"},
                              {"value": "CT3504", "label": "CT3504"}, {"value": "CT5520", "label": "CT5520"},
                              {"value": "CT8510", "label": "CT8510"}, {"value": "CT8540", "label": "CT8540"}],
                  "desc": "Wireless Controller"},
                 {"length": "full", "hide": "hide", "name": "border_router", "rhide": "hide", "default1": "",
                  "type": "dropdown-checkbox",
                  "options": [{"value": "C9300", "label": "C9300"}, {"value": "C9500", "label": "C9500"},
                              {"value": "C9400", "label": "C9400"}, {"value": "C3850", "label": "C3850"},
                              {"value": "C6500 or C6807-XL", "label": "C6500 or C6807-XL"},
                              {"value": "C6880-X", "label": "C6880-X"}, {"value": "C6840-X", "label": "C6840-X"},
                              {"value": "NX7700", "label": "NX7700"},
                              {"value": "ISR4400 and ISR4300", "label": "ISR4400 and ISR4300"},
                              {"value": "ASR 1000-X and 1000-HX", "label": "ASR 1000-X and 1000-HX"},
                              {"value": "Cloud Services Router 1000v (Fabric Control Plane only)\t",
                               "label": "Cloud Services Router 1000v (Fabric Control Plane only)"}],
                  "desc": "Border Router"},
                 {"length": "full", "hide": "hide", "name": "access_point", "rhide": "hide", "default1": "",
                  "type": "dropdown-checkbox",
                  "options": [{"value": "AP1540", "label": "AP1540"}, {"value": "AP1560", "label": "AP1560"},
                              {"value": "AP4800", "label": "AP4800"}, {"value": "AP1700", "label": "AP1700"},
                              {"value": "AP1800", "label": "AP1800"}, {"value": "AP2700", "label": "AP2700"},
                              {"value": "AP2800", "label": "AP2800"}, {"value": "AP3700", "label": "AP3700"},
                              {"value": "AP3800", "label": "AP3800"}], "desc": "Access Point"},
                 {"border": "yes", "type": "line", "label": "Completed Tasks"},
                 {"length": "full", "hide": "hide", "name": "hardware", "format": "default1",
                  "extraclass": "color-black", "default1": "", "rhide": "hide", "type": "dropdown-checkbox",
                  "options": [{"value": "Not Finalized", "label": "Not Finalized"},
                              {"value": "BOM Ready", "label": "BOM Ready"}, {"value": "Ordered", "label": "Ordered"},
                              {"value": "Available", "label": "Available"},
                              {"value": "Partially Available", "label": "Partially Available"}],
                  "desc": "Hardware Status"},
                 {"length": "full", "hide": "hide", "name": "completed_task_others", "format": "default1",
                  "extraclass": "color-black", "default1": "", "rhide": "hide", "type": "dropdown-checkbox",
                  "options": [
                      {"trigger": ["site_survey"], "hide": "hide", "value": "Site Survey", "label": "Site Survey"},
                      {"value": "dnac_installed", "label": "DNA-C installed"},
                      {"value": "will_wireles_use_existing_wlc", "label": "Will wireless use  existing WLC"},
                      {"value": "ise_installed", "label": "ISE installed"},
                      {"value": "High Level Design", "label": "High level Design"},
                      {"value": "Network Assesments", "label": "Network Assesments"},
                      {"value": "Port matrix", "label": "Port Matrix"}], "desc": "Other"},
                 {"length": "full", "trigger": ["other_next_actions"], "hide": "hide", "name": "Next Action",
                  "format": "default1", "default1": "", "type": "dropdown-checkbox",
                  "options": [{"value": "Estimates", "label": "Proposal/Estimates"}, {"value": "SoW", "label": "SoW"},
                              {"value": "Gather Requirements", "label": "Gather Requirements"},
                              {"value": "Discovery", "label": "Discovery"},
                              {"value": "High Level Solution ", "label": "High Level Solution"},
                              {"value": "High Level Design", "label": "High Level Design"},
                              {"value": "Other", "label": "Other"}], "condition": "Other", "desc": "Next Action"},
                 {"length": "full", "options": "   ", "hide": "hide", "name": "other_next_actions", "rhide": "hide",
                  "default1": "", "type": "text", "example": "", "desc": "Other Next Action"},
                 {"hide": "hide", "name": "customer_info", "length": "full", "default1": "", "rhide": "hide",
                  "type": "textarea", "desc": "Customer Information"}], "newline": "yes", "opflag": 1}
    return JsonResponse(data)


def green_third(request, *args, **kwargs):
    datadict = {"Host Ip": "1001", "Configuration Status": "20202", "Validations Status": "Others",
                "Log File": "File name"}

    return render(request, "green_third.html", {'output_list': datadict})


def green_four(request, *args, **kwargs):
    return render(request, "dropzone_v2.html")


def first_menu(request, *args, **kwargs):
    # if pre_response.has_key("customer"):
    #     para_dict.append({"name": "customer", "format": "", "default1": pre_response["customer"], "output": "",
    #                       "type": "hidden", "example": "", "desc": "Customer/Department", "mandatory": "no",
    #                       "hide": "hide", "send": "yes", "options": get_customer_options()})
    # else:
    #     para_dict.append(
    #         {"name": "customer", "format": "", "default1": defaultcustomer, "output": "", "type": "hidden",
    #          "example": "", "desc": "Customer/Department", "mandatory": "no", "hide": "hide", "send": "yes",
    #          "options": get_customer_options()})
    #
    # if pre_response.has_key("action"):
    #     para_dict.append({"name": "action", "format": "", "default1": pre_response["action"], "output": "",
    #                       "type": "radio", "example": "", "desc": "Action", "mandatory": "no",
    #                       "hide": "hide", "send": "yes", "options": [{"value": "add", "label": "Add Project"},
    #                                                                  {"value": "modify", "label": "Modify Project"},
    #                                                                  {"value": "clone",
    #                                                                   "label": "Clone Project"}]})
    # else:
    #     para_dict.append(
    #         {"name": "action", "format": "", "default1": "add", "output": "", "type": "radio",
    #          "example": "", "desc": "Action", "mandatory": "no", "hide": "hide", "send": "yes",
    #          "options": [{"value": "add", "label": "Add Project"},
    #                      {"value": "modify", "label": "Modify Project"}, {"value": "clone", "label": "Clone Project"}]})
    #
    # if pre_response.get("action") == "modify":
    #     sentry = ServiceRequestDB.objects.order_by().values_list('taskid').filter(selectedvalue=2).distinct()
    #     temp = []
    #     t = {}
    #     t["value"] = ""
    #     t["label"] = "Select Project No."
    #     temp.append(t)
    #     if sentry:
    #         for entry in sentry:
    #             t = {}
    #             t["value"] = entry[0]
    #             t["label"] = entry[0]
    #             temp.append(t)
    #     para_dict.append(
    #         {"name": "project_no", "format": "", "default1": "", "output": "", "type": "dropdown-autocomplete",
    #          "example": "", "desc": "Project Name", "mandatory": "yes",
    #          "vmessage": "Please select Service Request No.", "options": temp})
    #     print "______________________________" + str(response.user)
    #     if str(response.user) == "admin":
    #         para_dict.append(
    #             {"name": "project_phase", "format": "", "default1": "Plan", "output": "", "type": "dropdown",
    #              "example": "", "desc": "Project Phase", "mandatory": "no",
    #              "vmessage": "Please Enter Service Request No.",
    #              "options": [{"value": "Plan", "label": "Plan"}, {"value": "Design", "label": "Design"},
    #                          {"value": "Checklist", "label": "Check List"},
    #                          {"value": "Implimentation", "label": "Implimentation"},
    #                          {"value": "validate", "label": "Validate"},
    #                          {"value": "Configuration", "label": "Configuration Phase-I"},
    #                          {"value": "Configuration_Underlay_Automation",
    #                           "label": "Configuration Underlay Automation"}]})
    #     else:
    #         para_dict.append(
    #             {"name": "project_phase", "format": "", "default1": "Plan", "output": "", "type": "dropdown",
    #              "example": "", "desc": "Project Phase", "mandatory": "no",
    #              "vmessage": "Please Enter Service Request No.",
    #              "options": [
    #                  {"value": "validate", "label": "Validate"},
    #                  {"value": "Configuration", "label": "Configuration Phase-I"},
    #                  {"value": "Configuration_Underlay_Automation", "label": "Configuration Phase-II"}]})
    #     # para_dict.append({"type": "radio", "name": "fabric_type", "desc": "Fabric Type",
    #     #                   "extraclass": "color-black", "hide": "hide", "rhide": "hide", "default1": "sda",
    #     #                   "options": [{"value": "sda", "label": "SDA"},
    #     #                               {"value": "non_sda", "label": "Non SDA"}]})
    # elif pre_response.get("action") == "clone":
    #     sentry = ServiceRequestDB.objects.order_by().values_list('taskid').filter(selectedvalue=2).distinct()
    #     temp = []
    #     t = {}
    #     t["value"] = ""
    #     t["label"] = "Select Project No."
    #     temp.append(t)
    #     if sentry:
    #         for entry in sentry:
    #             t = {}
    #             t["value"] = entry[0]
    #             t["label"] = entry[0]
    #             temp.append(t)
    #     para_dict.append(
    #         {"name": "project_no", "format": "", "default1": "", "output": "", "type": "dropdown-autocomplete",
    #          "example": "", "desc": "Project Name", "mandatory": "yes",
    #          "vmessage": "Please Select Project Name", "options": temp})
    #     para_dict.append(
    #         {"name": "new_project_no", "format": "", "default1": "", "output": "", "type": "text",
    #          "example": "", "desc": "New Project Name", "mandatory": "yes",
    #          "vmessage": "Please Select New Project Name"})
    # elif pre_response.get("action") == "add":
    #     para_dict.append(
    #         {"name": "project_no", "format": "", "default1": "", "output": "", "type": "text",
    #          "example": "", "desc": "Project Name", "mandatory": "no", "hide": "hide", "send": "yes"})
    #     para_dict.append(
    #         {"name": "project_phase", "format": "", "default1": "Plan", "output": "", "type": "hidden",
    #          "example": "", "desc": "Project Phase", "mandatory": "no",
    #          "vmessage": "Please Enter Service Request No.",
    #          "options": [{"value": "Plan", "label": "Plan"}, {"value": "Design", "label": "Design"},
    #                      {"value": "implement", "label": "implement"},
    #                      {"value": "validation", "label": "Validation"},
    #                      {"value": "Configuration", "label": "Configuration"}]})
    #     para_dict.append({"type": "hidden", "name": "fabric_type", "desc": "Fabric Type",
    #                       "extraclass": "color-black", "hide": "hide", "rhide": "hide", "default1": "sda",
    #                       "options": [{"value": "sda", "label": "SDA"},
    #                                   {"value": "non_sda", "label": "Non SDA"}]})
    #
    # else:
    #     para_dict.append(
    #         {"name": "project_no", "format": "", "default1": "", "output": "", "type": "text",
    #          "example": "", "desc": "Project No.", "mandatory": "no", "hide": "hide", "send": "yes"})
    #     para_dict.append(
    #         {"name": "project_phase", "format": "", "default1": "Plan", "output": "", "type": "hidden",
    #          "example": "", "desc": "Project Phase", "mandatory": "no",
    #          "vmessage": "Please Enter Service Request No.",
    #          "options": [{"value": "Plan", "label": "Plan"}, {"value": "Design", "label": "Design"},
    #                      {"value": "implement", "label": "implement"},
    #                      {"value": "Validate", "label": "Validate"},
    #                      {"value": "Configuration", "label": "Configuration"}]})
    #     para_dict.append({"type": "hidden", "name": "fabric_type", "desc": "Fabric Type",
    #                       "extraclass": "color-black", "hide": "hide", "rhide": "hide", "default1": "sda",
    #                       "options": [{"value": "sda", "label": "SDA"},
    #                                   {"value": "non_sda", "label": "Non SDA"}]})

    data = {"column": "12", "inputs": [
        {"mandatory": "no", "format": "", "desc": "Customer/Department", "hide": "hide", "name": "customer",
         "send": "yes", "example": "", "default1": "kaiser", "output": "", "type": "hidden",
         "options": [{"value": "", "label": "Please Select Customer"},
                     {"send": "yes", "value": "stanford", "label": "Stanford"},
                     {"send": "yes", "value": "aig", "label": "AIG"},
                     {"send": "yes", "value": "common", "label": "Common"},
                     {"send": "yes", "value": "kaiser", "label": "Kaiser"}]},
        {"mandatory": "no", "format": "", "desc": "Action", "hide": "hide", "name": "action", "send": "yes",
         "example": "", "default1": "add", "output": "", "type": "radio",
         "options": [{"value": "add", "label": "Add Project"}, {"value": "modify", "label": "Modify Project"},
                     {"value": "clone", "label": "Clone Project"}]},
        {"mandatory": "no", "hide": "hide", "default1": "", "name": "project_no", "format": "", "output": "",
         "type": "text", "example": "", "send": "yes", "desc": "Project No."}, {"mandatory": "no", "options": [
            {"value": "Plan", "label": "Plan"}, {"value": "Design", "label": "Design"},
            {"value": "implement", "label": "implement"}, {"value": "Validate", "label": "Validate"},
            {"value": "Configuration", "label": "Configuration"}], "default1": "Plan", "name": "project_phase",
                                                                                "format": "", "output": "",
                                                                                "vmessage": "Please Enter Service Request No.",
                                                                                "type": "hidden", "example": "",
                                                                                "desc": "Project Phase"},
        {"hide": "hide", "name": "fabric_type", "rhide": "hide", "extraclass": "color-black", "default1": "sda",
         "type": "hidden", "options": [{"value": "sda", "label": "SDA"}, {"value": "non_sda", "label": "Non SDA"}],
         "desc": "Fabric Type"}], "newline": "yes"}
    return JsonResponse(data)


p_dict = {}


def get_command_op(cmd_line, cmd):
    add_flag = False
    command_ops = []
    host_name = ""
    for line in cmd_line:
        print line
        match = re.search('(\S+)#\s?.+' + cmd + ".+$", line)
        if match:
            print">>>>> ", line
        if not add_flag and match:
            add_flag = True
            host_name = match.group(1).strip()
            continue
        if add_flag:
            # logging.info(line)
            match2 = re.search('(\S+)#', line)
            if match2:
                add_flag = False
            else:
                command_ops.append(line)
    return command_ops, host_name


def hw_refresh_function(request):
    print " In Hardware refresh "
    type = request.POST.get('type')
    FILE_UPLOAD_DIR = "/home/ubuntu/prepro/mysite/mysite/user_uploads/"
    file = request.FILES['file']
    session_id = request.session._get_or_create_session_key()
    filename = file.name
    if filename.endswith('.txt'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".txt"
        with open(name, 'w+') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
        infile = open(name, 'r+')
        print name
        file_lines = [i for i in infile.readlines()]
        if type == "Precheck":
            import datetime

            conn1 = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
            cursor1 = conn1.cursor()
            today = datetime.datetime.now()

            filtered_mac_dict = {}
            total_mac_dict = {}
            total_mac = 0
            idf = ""
            arp_count_dict = {}
            op = get_command_op(file_lines, "show mac-address")
            arp_op = get_command_op(file_lines, "arp")[0]
            total_mac_op = op[0]
            updatedcount = 0
            added_count = 0
            print len(total_mac_op)
            hostname = request.POST.get("precheck_sw")
            for ele in total_mac_op:
                print ele
                # m1 = re.search(r'(\d+)\s+(\S+)\s.+\s(\d/\S+)', ele)
                # m1 = re.search(r'(\d+)\s+(\S+)\s.+\s(\d/\S+)', ele)
                # Pre-check for Cisco
                # m1 = re.search(r'(\d+\s+)(\S+\S+\S+\S+)(\s.+)', ele)
                # Pre-check for Brocade
                m1 = re.search(r'(\S+)\s+(\d+/\d+/\d+)\s+\S+\s+\S+\s+(\d+)', ele)
                # mac ,port,vlan
                if m1:
                    # Pre-check for Cisco
                    # vlan = m1.group(1)
                    # print vlan,'>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
                    # mac = m1.group(2)
                    # port = m1.group(3)
                    # Pre-check for Brocade
                    vlan = m1.group(3)
                    mac = m1.group(1)
                    port = m1.group(2)

                    # vrf = "grn200"
                    # if vlan:
                    #     vrf = get_vrf(vlan)
                    if mac:
                        total_mac += 1

                    if vlan not in filtered_mac_dict:

                        filtered_mac_dict[vlan] = [{"mac": mac, "interface": port}]
                    else:
                        filtered_mac_dict[vlan].append({"mac": mac, "interface": port})

                    if mac in total_mac_dict:
                        total_mac_dict[mac]['vlan'].append(vlan)
                    else:
                        total_mac_dict[mac] = {"vlan": [vlan], "interface": port, "arp_dict": {}, "hostname": hostname}

            for line1 in arp_op:
                match = re.search(r'(\d+.\d+.\d+.\d+)\s+\S+\s+(\S+).+Vlan(\d+)', line1)
                if match and match.group(2) in total_mac_dict:
                    print "Condition 1"
                    arp_ip_dict = {'arp_ip': match.group(1)}
                    total_mac_dict[match.group(2)]["arp_dict"] = arp_ip_dict

                elif match and match.group(2) not in total_mac_dict:

                    total_mac += 1
                    print "Condition 2"
                    hostname = ""
                    total_mac_dict[match.group(2)] = {"vlan": [match.group(3)], "interface": "",
                                                      "arp_dict": {'arp_ip': match.group(1)}, "hostname": hostname}
                    if match.group(3) not in filtered_mac_dict:
                        filtered_mac_dict[match.group(3)] = [{"mac": match.group(2), "interface": ""}]
                    else:
                        filtered_mac_dict[match.group(3)].append({"mac": match.group(2), "interface": ""})

            for mac, mac_dict in total_mac_dict.iteritems():
                cursor1.execute("SELECT * FROM mysite_hadware_refresh_db WHERE mac_address=?", [mac])
                q1 = cursor1.fetchall()
                if len(q1) != 0:
                    print mac, ">>>>>", mac_dict["vlan"]
                    db_vlan = json.loads(q1[0][6])
                    print db_vlan
                    db_hostname = q1[0][1]

                    if mac_dict['arp_dict'] == {}:
                        arp_dict = json.loads(q1[0][8])
                    else:
                        arp_dict = mac_dict['arp_dict']

                    if db_hostname and mac_dict['hostname'] == "":
                        mac_dict['hostname'] = db_hostname

                    for vlan in mac_dict['vlan']:
                        if vlan not in db_vlan:
                            db_vlan.append(vlan)

                    cursor1.execute(
                        "UPDATE mysite_hadware_refresh_db SET existingswitch=?,IDF=?,oldinterface=?,vlan=?,Remark=?,timestamp=? WHERE mac_address=?",
                        [mac_dict["hostname"], idf, mac_dict["interface"], json.dumps(db_vlan), json.dumps(arp_dict),
                         today, mac])
                else:
                    # print " Inserting into DB ", mac
                    cursor1.execute(
                        "INSERT INTO mysite_hadware_refresh_db('existingswitch','IDF','oldinterface','mac_address','vlan','Remark','timestamp') VALUES(?,?,?,?,?,?,?)",
                        [mac_dict["hostname"], idf, mac_dict["interface"], mac, json.dumps(mac_dict["vlan"]),
                         json.dumps(mac_dict["arp_dict"]), today])
            #
            # vrf_op = login_switch.get_command_output("show vrf")
            # vrf_list = get_vrf_list(vrf_op)
            # for vrf in vrf_list:
            #     if "mgt" not in vrf:
            #         arp_ip_op = login_switch.get_command_output("show ip arp vrf {} | count ARPA".format(vrf))
            #         m2 = re.search(r'=\s+(\d+)', " ".join(arp_ip_op))
            #         if m2:
            #             arp_count_dict[vrf] = m2.group(1)

            conn1.commit()
            output_list = {}
            output_list["Result"] = []
            output_list["Result"].append("<strong>Total MAC entries</strong> : " + str(total_mac))
            output_list["Result"].append("<strong>Total VLANs</strong> : " + str(len(filtered_mac_dict.keys())))
            for key, value in filtered_mac_dict.iteritems():
                output_list["Result"].append("Total MACs for VL{} : {}".format(key, str(len(value))))
            # for k, v in arp_count_dict.iteritems():
            #     output_list["Result"].append("Total ARP for VRF {} : {}".format(k, str(v)))
            print updatedcount
            print added_count
            return render(request, 'tabs_configuration.html', {'output_list': output_list, 'var_flag': 4})
            # return render(request, 'notification.html',{'output_list': "Data Saved Successfully  ", 'class': 'alert-success'})

        elif type == "Postcheck":

            if request.POST.get("existing_vlan"):
                if not request.POST.get("new_vlan"):
                    return render(request, 'notification.html',
                                  {'output_list': "Please enter New VLAN ", 'class': 'alert-success'})
                else:
                    existing_vlan = [x.strip() for x in request.POST.get("existing_vlan").split(',')]
                    new_vlan = [x.strip() for x in request.POST.get("new_vlan").split(',')]
            else:
                existing_vlan = ""
                new_vlan = ""
            from datetime import datetime

            conn1 = sqlite3.connect('/home/ubuntu/prepro/mysite/db.sqlite3')
            cursor1 = conn1.cursor()

            # precheck Switches
            precheck_switches = request.POST.get("precheck_sw")
            if "," in precheck_switches:
                precheck_switches = precheck_switches.split(",")
            else:
                precheck_switches = [precheck_switches.strip()]

            Total_new_mac_dict = {}
            Total_DB_mac_dict = {}
            logging.info(precheck_switches)
            # Logging to Each Switch Using For loop
            for switch in precheck_switches:
                cursor1.execute(
                    "SELECT oldinterface,vlan,mac_address,timestamp,existingswitch,Remark FROM mysite_hadware_refresh_db WHERE  existingswitch=?",
                    [switch.strip()])
                q1 = cursor1.fetchall()
                if len(q1) != 0:
                    for tpl in q1:
                        old_interface = tpl[0]
                        old_vlan = json.loads(tpl[1])
                        db_mac = tpl[2]
                        timestamp = tpl[3]
                        device = tpl[4]
                        if tpl[5]:
                            arp_ip_dict = json.loads(tpl[5])
                        else:
                            arp_ip_dict = {}
                        db_mac_dict = {"db_vlan": ",".join(old_vlan), "interface": old_interface, 'time': timestamp,
                                       'switch': device}
                        db_mac_dict.update(arp_ip_dict)
                        Total_DB_mac_dict[db_mac] = db_mac_dict
                else:
                    return render(request, 'notification.html',
                                  {'output_list': "Entries not found in DB  ", 'class': 'alert-success'})

                    # return render(request, 'notification.html',
                    #               {'output_list': len(Total_DB_mac_dict.keys()), 'class': 'alert-success'})
            op = get_command_op(file_lines, "mac")
            arp_op = get_command_op(file_lines, "arp")[0]
            # print 'file_lines'
            # print file_lines
            # print 'op'
            # print op
            if len(arp_op) == 0:
                arp_op_flag = False
            else:
                arp_op_flag = True

            total_mac_op = op[0]
            print 'total_mac_op'
            print total_mac_op
            hostname = op[1]
            print hostname
            # print arp_op
            print 'Post-check'
            for ele in total_mac_op:

                new_mac_dict = {}
                # Brocade Post-check Regex - type 1
                # MAC - Address
                # Port
                # Type
                # VLAN
                # b46b.fcda.d617
                # 3 / 1 / 45
                # Dynamic
                # 976
                post_output_type = "old"
                # print 'post_output_type: ' + post_output_type
                #
                # m1 = re.search(r'(\S+)\s+(\d+/\d+/\d+)\s+\S+\s+\S+\s+(\d+)', ele)
                # # Brocade Post-check Regex - type 2
                #
                #
                # # m1 = re.search(r'\s(\d+\s+)(\S+\S+\S+\S+)(\s.+)', ele)
                if post_output_type == "new":
                    # m1 = re.search(r'(\S+)\s+(\d+/\d+/\d+)\s+\S+\s+\S+\s(\d+)', ele)
                    m1 = re.search(r'(\S+)\s+(\d+/\d+/\d+)\s+\S+\s+\S+\s+(\d+)', ele)
                    if m1:
                        vlan = m1.group(3)
                        mac = m1.group(1)
                        port = m1.group(2)
                        if vlan:
                            vrf = get_vrf(vlan)
                        else:
                            vrf = "grn200"
                        new_mac_dict = {"vlan": vlan, "interface": port, "new_switch": hostname, 'arp_ip': ""}
                        Total_new_mac_dict[mac] = new_mac_dict
                else:
                    m1 = re.search(r'(\S+)\s+(\d+/\d+/\d+)\s+\S+\s+(\d+)', ele)
                    # print 'in old format >>>>>>>>>>>>>>'
                    if m1:
                        # print 'ele'
                        # print ele
                        vlan = m1.group(3)
                        mac = m1.group(1)
                        port = m1.group(2)
                        if vlan:
                            vrf = get_vrf(vlan)
                        else:
                            vrf = "grn200"
                        # if mac:
                        #     arp_ip_dict = {'arp_ip': ""}
                        #     arp_op_mac = []
                        # arp_mac_op = login_switch.get_command_output("show ip  arp vrf " + vrf + " " + mac)
                        # # logging.info(arp_mac_op)
                        # for line1 in arp_op:
                        #     match = re.search(r'(\S+)\s+([A-z0-9]+\.[A-z0-9]+\.[A-z0-9]+)\s', line1)
                        #     if match and match.group(2)== mac:
                        #         arp_ip_dict = {'arp_ip': match.group(1)}
                        #         arp_op_mac.append(match.group(2))

                        new_mac_dict = {"vlan": vlan, "interface": port, "new_switch": hostname, 'arp_ip': ""}
                        if mac in Total_new_mac_dict:
                            new_mac_dict['vlan'] = Total_new_mac_dict[mac]['vlan'] + ',' + new_mac_dict['vlan']
                            Total_new_mac_dict[mac] = new_mac_dict
                        else:
                            Total_new_mac_dict[mac] = new_mac_dict
            for line1 in arp_op:
                match = re.search(r'(\S+)\s+([A-z0-9]+\.[A-z0-9]+\.[A-z0-9]+)\s', line1)
                if match and match.group(2) in Total_new_mac_dict:
                    print "Condition 1"
                    arp_ip_dict = {'arp_ip': match.group(1)}
                    Total_new_mac_dict[match.group(2)].update(arp_ip_dict)

                elif match and match.group(2) not in Total_new_mac_dict:
                    print "Condition 2"
                    Total_new_mac_dict[match.group(2)] = {"vlan": "", "interface": "", "arp_ip": match.group(1)}

            # print Total_new_mac_dict
            Not_found_list = []
            missing_vlan_mac_dict = {}
            Not_arp_list = []
            err_list = []
            for mac_k, val_d in Total_DB_mac_dict.iteritems():
                er_dict = {}
                if arp_op_flag and val_d and 'arp_ip' in val_d and mac_k in Total_new_mac_dict.keys():
                    # print mac_k, "> 1"
                    if val_d['arp_ip'] and not Total_new_mac_dict[mac_k]['arp_ip']:
                        Not_arp_list.append(mac_k)
                if mac_k not in Total_new_mac_dict.keys():
                    # print mac_k, "> 2"
                    Not_found_list.append(mac_k)
                    # print len(Not_found_list)
                elif mac_k in Total_new_mac_dict.keys() and val_d['db_vlan']:
                    # print "mac_k " , mac_k
                    er_dict['mac'] = mac_k
                    # condition For no Exception added
                    if not existing_vlan and Total_new_mac_dict[mac_k]['vlan'] not in val_d['db_vlan']:
                        if "," in Total_new_mac_dict[mac_k]['vlan'] and "," in val_d['db_vlan']:
                            db_vlan_lst = val_d['db_vlan'].split(",")
                            new_vlan_lst = Total_new_mac_dict[mac_k]['vlan'].split(",")
                            for each_vlan in new_vlan_lst:
                                er_dict['vlan'] = ""
                                if each_vlan not in db_vlan_lst:
                                    er_dict['vlan'] = each_vlan
                                    er_dict['hostname'] = Total_new_mac_dict[mac_k]['new_switch']
                                    er_dict['port'] = Total_new_mac_dict[mac_k]['interface']
                                    er_dict['old_vlan'] = ",".join(db_vlan_lst)
                                    er_dict['expected_vlan'] = ",".join(
                                        list(set(db_vlan_lst).difference(set(new_vlan_lst))))
                                    err_list.append(er_dict)
                        else:
                            er_dict['vlan'] = Total_new_mac_dict[mac_k]['vlan']
                            er_dict['hostname'] = Total_new_mac_dict[mac_k]['new_switch']
                            er_dict['port'] = Total_new_mac_dict[mac_k]['interface']
                            er_dict['old_vlan'] = val_d['db_vlan']
                            er_dict['expected_vlan'] = val_d['db_vlan']
                            err_list.append(er_dict)
                    if not existing_vlan and Total_new_mac_dict[mac_k]['vlan'] in val_d['db_vlan'] and \
                            Total_new_mac_dict[mac_k]['vlan'] != val_d['db_vlan']:
                        print " In Here ", Total_new_mac_dict[mac_k]['vlan'], ">>>>", val_d['db_vlan']
                        if "," in Total_new_mac_dict[mac_k]['vlan']:
                            new_vlan_lst = Total_new_mac_dict[mac_k]['vlan'].split(",")
                            print new_vlan_lst
                            for i in range(0, len(new_vlan_lst)):
                                if new_vlan_lst[i] in val_d['db_vlan']:
                                    pass
                                else:
                                    missing_vlan_mac_dict[mac_k] = new_vlan_lst[i]
                        else:
                            missing_vlan = val_d['db_vlan'].replace(Total_new_mac_dict[mac_k]['vlan'], "")
                            missing_vlan_mac_dict[mac_k] = missing_vlan.replace(",", "")

                    else:
                        # condition for Exception vlans added
                        for i in range(0, len(existing_vlan)):
                            # Code for matching two precheck vlan correspond to  two postcheck vlan
                            # if "/" in existing_vlan[i]:
                            #     existing_vlan[i] = existing_vlan[i].split("/")
                            #     new_vlan[i] = new_vlan[i].split("/")
                            #     if  val_d['db_vlan'] == existing_vlan[i][0] or val_d['db_vlan'] == existing_vlan[i][1]:
                            #         if Total_new_mac_dict[mac_k]['vlan'] == new_vlan[i][0] or \
                            #                 Total_new_mac_dict[mac_k]['vlan'] == new_vlan[i][1] or \
                            #                 Total_new_mac_dict[mac_k]['vlan'] == existing_vlan[i][0] or \
                            #                 Total_new_mac_dict[mac_k]['vlan'] == existing_vlan[i][1]:
                            #             continue
                            #         else:
                            #             er_dict['vlan'] = Total_new_mac_dict[mac_k]['vlan']
                            #             er_dict['hostname'] = Total_new_mac_dict[mac_k]['new_switch']
                            #             er_dict['port'] = Total_new_mac_dict[mac_k]['interface']
                            #             er_dict['old_vlan'] = val_d['db_vlan']
                            #             er_dict['expected_vlan'] = new_vlan[i]
                            #             logging.info(er_dict)
                            #             err_list.append(er_dict)
                            # End of code for two vlan check -- (11/11/2019)
                            if existing_vlan[i] in val_d['db_vlan']:
                                logging.info(existing_vlan[i] + ">>>>>>>>>>>>>>>>>>>>>>>>>" + val_d['db_vlan'])
                                logging.info(
                                    new_vlan[i] + ">>>>>>>>>>>>>>>>>>>>>>>>>" + Total_new_mac_dict[mac_k]['vlan'])
                                if Total_new_mac_dict[mac_k]['vlan'] == new_vlan[i]:  # or \
                                    # Total_new_mac_dict[mac_k]['vlan'] == existing_vlan[i]:
                                    continue
                                else:
                                    er_dict['vlan'] = Total_new_mac_dict[mac_k]['vlan']
                                    er_dict['hostname'] = Total_new_mac_dict[mac_k]['new_switch']
                                    er_dict['port'] = Total_new_mac_dict[mac_k]['interface']
                                    er_dict['old_vlan'] = val_d['db_vlan']
                                    er_dict['expected_vlan'] = new_vlan[i]
                                    logging.info(er_dict)
                                    err_list.append(er_dict)
                            elif Total_new_mac_dict[mac_k]['vlan'] not in val_d['db_vlan']:
                                er_dict['vlan'] = Total_new_mac_dict[mac_k]['vlan']
                                er_dict['hostname'] = Total_new_mac_dict[mac_k]['new_switch']
                                er_dict['port'] = Total_new_mac_dict[mac_k]['interface']
                                er_dict['old_vlan'] = val_d['db_vlan']
                                er_dict['expected_vlan'] = val_d['db_vlan']
                                logging.info(er_dict)
                                err_list.append(er_dict)
            # for mac_k, val_d in Total_new_mac_dict.iteritems():
            #     er_dict = {}
            #     if mac_k not in Total_DB_mac_dict.keys():
            #         Not_found_list.append(mac_k)
            #     elif mac_k in Total_DB_mac_dict.keys() and val_d['vlan']!= Total_DB_mac_dict[mac_k]['db_vlan']:
            #         er_dict['mac'] = mac_k
            #         er_dict['old_vlan'] = Total_DB_mac_dict[mac_k]['db_vlan']
            #         er_dict['vlan'] = val_d['vlan']
            #         err_list.append(er_dict)
            print ">>>>>>>>>>>> Over "
            total_count = len(Total_DB_mac_dict.keys())
            output_list = {}

            output_list["Result"] = []
            count = len(Not_found_list) + len(missing_vlan_mac_dict.keys())

            # output_list["Result"].append("<strong>Missing MAC</strong>: "+str(len(Not_found_list)))
            for mac_adddr in Not_found_list:
                # print i
                d1 = {}
                db_date = datetime.strptime(Total_DB_mac_dict[mac_adddr]['time'], "%Y-%m-%d %H:%M:%S.%f").date()
                print_date = db_date.strftime('%d/%m/%Y')
                d1['timestamp'] = db_date.strftime('%d/%m/%Y')
                d1['mac'] = mac_adddr
                d1['vendor'] = get_mac_device_type(mac_adddr)
                d1['hostname'] = Total_DB_mac_dict[mac_adddr]['switch']
                d1['vlan'] = Total_DB_mac_dict[mac_adddr]['db_vlan']
                output_list["Result"].append(d1.copy())

            for mac, val_vlan in missing_vlan_mac_dict.iteritems():
                d1 = {}
                db_date = datetime.strptime(Total_DB_mac_dict[mac_adddr]['time'], "%Y-%m-%d %H:%M:%S.%f").date()
                print_date = db_date.strftime('%d/%m/%Y')
                d1['timestamp'] = db_date.strftime('%d/%m/%Y')
                d1['mac'] = mac
                d1['vendor'] = get_mac_device_type(mac_adddr)
                d1['hostname'] = Total_DB_mac_dict[mac_adddr]['switch']
                d1['vlan'] = val_vlan
                output_list["Result"].append(d1)

            # print output_list
            arp_output_list = {}
            arp_output_list["Result"] = []
            arp_er_count = len(Not_arp_list)

            # output_list["Result"].append("<strong>Missing MAC</strong>: "+str(len(Not_found_list)))
            for mac_adddr in Not_arp_list:
                d1 = {}
                db_date = datetime.strptime(Total_DB_mac_dict[mac_adddr]['time'], "%Y-%m-%d %H:%M:%S.%f").date()
                print_date = db_date.strftime('%d/%m/%Y')
                d1['timestamp'] = db_date.strftime('%d/%m/%Y')
                d1['mac'] = mac_adddr
                d1['vendor'] = get_mac_device_type(mac_adddr)
                d1['hostname'] = Total_new_mac_dict[mac_adddr]['new_switch']
                d1['old_hostname'] = Total_DB_mac_dict[mac_adddr]['switch']
                d1['vlan'] = Total_DB_mac_dict[mac_adddr]['db_vlan']
                d1['port'] = Total_new_mac_dict[mac_adddr]['interface']
                arp_output_list["Result"].append(d1.copy())
            error_list = {}
            error_list["Result"] = err_list
            er_count = len(err_list)
            temp = count + arp_er_count + er_count
            rem_count = total_count - temp
            #
            # output_list["Result"].append("<strong>MAC with wrong VLAN</strong> : " + str(len(err_list)))
            # if len(err_list) >0:
            #     for each_dict in err_list:
            #         output_list["Result"].append("{} : Precheck VLAN {}, Postcheck VLAN {} (Expected VLAN: {})".format(each_dict['mac'], each_dict['old_vlan'], each_dict['vlan'],each_dict['expected_vlan'] ))

            # return render(request, 'notification.html',{'output_list': "work in Progress ", 'class': 'alert-success'})
            return render(request, 'hw_refresh_table.html',
                          {'output_list': output_list, 'error_list': error_list, 'var_flag': 4, 'count': count,
                           'err_count': er_count, 'arp_er_list': arp_output_list, 'arp_error_count': arp_er_count,
                           'total_mac_count': total_count, 'rem_count': rem_count})


def cucm_bulk_upload_function(request):
    import csv
    service = request.GET.get('service')
    # print service
    session_id = request.session._get_or_create_session_key()
    print '>>>>>>', session_id
    FILE_UPLOAD_DIR = "/home/netserv/Webapp/Netserv/mysite/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    if filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            with open(name, 'r') as csvfile:
                csv_file = csv.DictReader(csvfile)
                addphn_list = []
                for row in csv_file:
                    phn_dict = {}
                    phn_dict['name'] = row['Device Name']
                    phn_dict['location'] = row['Location']
                    phn_dict['class'] = 'Phone'
                    phn_dict['protocol'] = row['Device Protocol']
                    phn_dict['protocolside'] = 'User'
                    phn_dict['common_phone_profile'] = row['Common Phone Profile']
                    phn_dict['device_pool'] = row['Device Pool']
                    phn_dict['useTrustedRelayPoint'] = row['Use Trusted Relay Point']
                    phn_dict['builtInBridgeStatus'] = row['Built in Bridge']
                    phn_dict['packetCaptureMode'] = row['Packet Capture Mode']
                    phn_dict['builtInBridgeStatus'] = row['Built in Bridge']
                    phn_dict['certificateOperation'] = row['Certificate Operation']
                    phn_dict['deviceMobilityMode'] = row['Device Mobility Mode']
                    phn_dict['description'] = row['Description']
                    phn_dict['model'] = row['Device Type']
                    phn_dict['line_no'] = row['Directory Number 1']
                    addphn_list.append(phn_dict)

                op_list = []
                for response_dict in addphn_list:
                    op_dict = {}
                    ucm_obj = CUCM_AXL()
                    op = ucm_obj.add_Phone(response_dict)
                    print op
                    op_dict['name'] = response_dict['name']
                    if op == True:
                        op_dict['result'] = "Phone Added Successfully"
                    else:
                        op_dict['result'] = op
                    op_list.append(op_dict)
            return render(request, 'cucm_phone_bulk_filter.html',
                          {'output_list': op_list, 'class': 'alert-success'})


def apic_bulk_upload_function(request):
    import csv
    service = request.POST.get('action')
    print service
    # if service == 'Provision':
    #     port_type = request.POST.get('port_type')
    #     policy_grp = request.POST.get('profile_grp')
    #     print port_type, policy_grp
    # print service
    session_id = request.session._get_or_create_session_key()
    FILE_UPLOAD_DIR = "/home/netserv/Webapp_Latest/netserv/mysite/user_uploads/"
    file = request.FILES['file']
    filename = file.name
    if filename.endswith('.csv'):
        name = FILE_UPLOAD_DIR + str(session_id) + ".csv"
        with open(name, 'wb') as dest:
            shutil.copyfileobj(file, dest)
            dest.close()
            with open(name, 'r') as csvfile:
                csv_file = csv.DictReader(csvfile)
                apic_port_list = []
                op_list = []
                for row in csv_file:
                    print row
                    apic_dict = {}
                    if "work_order_no" in row:
                        apic_dict['work_order_no'] = row['work_order_no']
                    if "Description" in row:
                        apic_dict['description'] = row['Description']
                    if "Policy Group" in row:
                        apic_dict['policy_grp'] = row['Policy Group']
                    if "Leaf" in row:
                        apic_dict['leaf'] = row['Leaf']
                    if "Interface" in row:
                        apic_dict['port'] = row['Interface'].lower()
                    if "Admin State" in row:
                        apic_dict['admin_state'] = row['Admin State']
                        apic_dict['port'] = row['Interface'].lower()
                        
                    if "Port Type" in row:
                        apic_dict['port_type'] = row['Port Type']
                    apic_dict['action'] = service
                    if "Vlan ID" in row:
                        apic_dict['vlan_id'] = row['Vlan ID'] + '-'+row['EPG'] + '-' +row['Bridge Domain']
                    if "Tenant Name" in row:
                        apic_dict['tenant_name'] = row['Tenant Name']
                    if "Application" in row:
                        apic_dict['application'] = row['Application']
                    if "Port Mode" in row:
                        if row['Port Mode'] == "access":
                            apic_dict['port_mode'] = "untagged"
                        else:
                            apic_dict['port_mode'] = "trunk"
                    apic_port_list.append(apic_dict)

                request.session['apic_data_dict'] = {'apic_services': 'ACI_Bulk_Upload',
                                                     'response_dict': apic_port_list}
                # print "??????????", apic_port_list
                count = 0
                
                return render(request, 'apic_api_bulk_upload.html',
                              {'output_list': apic_port_list, 'class': 'alert-success'})
                # else:
                #     for data in port_config['imdata']:
                #         return render(request, 'notification.html', {'output_list': data, 'class': 'alert-danger'})


def msp_charts(request):
    list1 = [10, 90]
    list2 = [15, 85]
    list3 = [10, 90]
    list4 = [15, 85]
    list5 = [15, 85]
    list6 = [20, 80]

    d3 = {'result1': list1, 'result2': list2, 'result3': list3, 'result4': list4, 'result5': list5, 'result6': list6}

    return JsonResponse(d3)


def app_connectivity_color_fun(request):
    print " ???????????"
    src_ip = request.GET.get('source_ip')
    dest_ip = request.GET.get('destination_ip')
    port = request.GET.get('port')
    type = request.GET.get('type')
    pc_name = "cap13"
    # with open('./mysite/Json_DATA/Application_baseline.json', 'r') as data:
    #     App_data = json.load(data)
    #     for app, val_dict in App_data.iteritems():
    #         if app_url == app.lower():
    #             dest_ip = val_dict['ip']
    #             port = val_dict['ports']
    #         elif app_url == val_dict['ip']:
    #             dest_ip = val_dict['ip']
    #             port = val_dict['ports']
    #         elif app_url == val_dict['url']:
    #             dest_ip = val_dict['ip']
    #             port = val_dict['ports']
    # if type ==1 :
    print src_ip, dest_ip, port, type
    if type == '4':
        info_data = Application_connectivity_vpn2(src_ip, dest_ip, port, pc_name)
        print '>>>>>>>>', info_data
        if info_data['vpn_gateway_tx'] == 'Green':
            vpn_gw_colour_tx = "box-green"
        elif info_data['vpn_gateway_tx'] == 'Grey':
            vpn_gw_colour_tx = "box-gray"
        elif info_data['vpn_gateway_tx'] == 'Orange':
            vpn_gw_colour_tx = "box-orange"
        else:
            vpn_gw_colour_tx = "box-red"

        if info_data['firewall_tx'] == 'Green':
            fw_colour_tx = "box-green"
        elif info_data['firewall_tx'] == 'Grey':
            fw_colour_tx = "box-gray"
        elif info_data['firewall_tx'] == 'Orange':
            fw_colour_tx = "box-orange"
        else:
            fw_colour_tx = "box-red"

        if info_data['isp_tx'] == 'Green':
            isp_colour_tx = "box-green"
        elif info_data['isp_tx'] == 'Grey':
            isp_colour_tx = "box-gray"
        elif info_data['isp_tx'] == 'Orange':
            isp_colour_tx = "box-orange"
        else:
            isp_colour_tx = "box-red"

        if info_data['loadbalancer_tx'] == 'Green':
            lb_colour_tx = "box-green"
        elif info_data['loadbalancer_tx'] == 'Grey':
            lb_colour_tx = "box-gray"
        elif info_data['loadbalancer_tx'] == 'Orange':
            lb_colour_tx = "box-orange"
        else:
            lb_colour_tx = "box-red"

        if info_data['app_tx'] == 'Green':
            app_colour_tx = "box-green"
        elif info_data['app_tx'] == 'Red':
            app_colour_tx = "box-red"
        elif info_data['app_tx'] == 'Orange':
            app_colour_tx = "box-orange"
        else:
            app_colour_tx = "box-gray"

        if info_data['remote_user_tx'] == 'Green':
            client_colour_tx = "box-green"
        elif info_data['remote_user_tx'] == 'Grey':
            client_colour_tx = "box-gray"
        elif info_data['remote_user_tx'] == 'Orange':
            client_colour_tx = "box-orange"
        else:
            client_colour_tx = "box-red"

        if info_data['transit_gw_tx'] == 'Green':
            transit_gw_colour_tx = "box-green"
        elif info_data['transit_gw_tx'] == 'Grey':
            transit_gw_colour_tx = "box-gray"
        elif info_data['transit_gw_tx'] == 'Orange':
            transit_gw_colour_tx = "box-orange"
        else:
            transit_gw_colour_tx = "box-red"

        if info_data['host_vpc_tx'] == 'Green':
            host_vpc_colour_tx = "box-green"
        elif info_data['host_vpc_tx'] == 'Grey':
            host_vpc_colour_tx = "box-gray"
        elif info_data['host_vpc_tx'] == 'Orange':
            host_vpc_colour_tx = "box-orange"
        else:
            host_vpc_colour_tx = "box-red"

        if info_data['vpn_client_tx'] == 'Green':
            vpn_client_colour_tx = "box-green"
        elif info_data['vpn_client_tx'] == 'Grey':
            vpn_client_colour_tx = "box-gray"
        elif info_data['vpn_client_tx'] == 'Orange':
            vpn_client_colour_tx = "box-orange"
        else:
            vpn_client_colour_tx = "box-red"

        # Colors for reverse transmission
        if info_data['vpn_gateway_rx'] == 'Green':
            vpn_gw_colour_rx = "box-green"
        elif info_data['vpn_gateway_rx'] == 'Grey':
            vpn_gw_colour_rx = "box-gray"
        elif info_data['vpn_gateway_rx'] == 'Orange':
            vpn_gw_colour_rx = "box-orange"
        else:
            vpn_gw_colour_rx = "box-red"

        if info_data['firewall_rx'] == 'Green':
            fw_colour_rx = "box-green"
        elif info_data['firewall_rx'] == 'Grey':
            fw_colour_rx = "box-gray"
        elif info_data['firewall_rx'] == 'Orange':
            fw_colour_rx = "box-orange"
        else:
            fw_colour_rx = "box-red"

        if info_data['isp_rx'] == 'Green':
            isp_colour_rx = "box-green"
        elif info_data['isp_rx'] == 'Grey':
            isp_colour_rx = "box-gray"
        elif info_data['isp_rx'] == 'Orange':
            isp_colour_rx = "box-orange"
        else:
            isp_colour_rx = "box-red"

        if info_data['loadbalancer_rx'] == 'Green':
            lb_colour_rx = "box-green"
        elif info_data['loadbalancer_rx'] == 'Grey':
            lb_colour_rx = "box-gray"
        elif info_data['loadbalancer_rx'] == 'Orange':
            lb_colour_rx = "box-orange"
        else:
            lb_colour_rx = "box-red"

        if info_data['app_rx'] == 'Green':
            app_colour_rx = "box-green"
        elif info_data['app_rx'] == 'Red':
            app_colour_rx = "box-red"
        elif info_data['app_rx'] == 'Orange':
            app_colour_rx = "box-orange"
        else:
            app_colour_rx = "box-gray"

        if info_data['remote_user_rx'] == 'Green':
            client_colour_rx = "box-green"
        elif info_data['remote_user_rx'] == 'Grey':
            client_colour_rx = "box-gray"
        elif info_data['remote_user_rx'] == 'Orange':
            client_colour_rx = "box-orange"
        else:
            client_colour_rx = "box-red"

        if info_data['transit_gw_rx'] == 'Green':
            transit_gw_colour_rx = "box-green"
        elif info_data['transit_gw_rx'] == 'Grey':
            transit_gw_colour_rx = "box-gray"
        elif info_data['transit_gw_rx'] == 'Orange':
            transit_gw_colour_rx = "box-orange"
        else:
            transit_gw_colour_rx = "box-red"

        if info_data['host_vpc_rx'] == 'Green':
            host_vpc_colour_rx = "box-green"
        elif info_data['host_vpc_rx'] == 'Grey':
            host_vpc_colour_rx = "box-gray"
        elif info_data['host_vpc_rx'] == 'Orange':
            host_vpc_colour_rx = "box-orange"
        else:
            host_vpc_colour_rx = "box-red"

        if info_data['vpn_client_rx'] == 'Green':
            vpn_client_colour_rx = "box-green"
        elif info_data['vpn_client_rx'] == 'Grey':
            vpn_client_colour_rx = "box-gray"
        elif info_data['vpn_client_rx'] == 'Orange':
            vpn_client_colour_rx = "box-orange"
        else:
            vpn_client_colour_rx = "box-red"

        # colour_dict = {"application": app_colour, "Server": lb_colour, "Firewalls": fw_colour, "ISP": isp_colour,
        #                "Access": sw_colour, "Device": client_colour}

        color_dict = {"application_tx": app_colour_tx,
                      "application_rx": app_colour_rx,
                      "firewall_rx": fw_colour_rx,
                      "firewall_tx": fw_colour_tx,
                      "lb_tx": lb_colour_tx,
                      "lb_rx": lb_colour_rx,
                      "host_tx": host_vpc_colour_tx,
                      "host_rx": host_vpc_colour_rx,
                      "isp_tx": isp_colour_tx,
                      "isp_rx": isp_colour_rx,
                      "gw_tx": transit_gw_colour_tx,
                      "gw_rx": transit_gw_colour_rx,
                      "gateway_tx": vpn_gw_colour_tx,
                      "gateway_rx": vpn_gw_colour_rx,
                      "vpn_client_tx": vpn_client_colour_tx,
                      "vpn_client_rx": vpn_client_colour_rx,
                      "user_tx": client_colour_tx,
                      "user_rx": client_colour_rx,
                      }
        return JsonResponse(color_dict)
    elif type == '5':
        info_data = Application_connectivity_vpn3(src_ip, dest_ip, port, pc_name)
        print '>>>>>>>>', info_data
        if info_data['switch_tx'] == 'Green':
            sw_colour_tx = "box-green"
        elif info_data['switch_tx'] == 'Grey':
            sw_colour_tx = "box-gray"
        elif info_data['switch_tx'] == 'Orange':
            sw_colour_tx = "box-orange"
        else:
            sw_colour_tx = "box-red"

        if info_data['firewall_tx'] == 'Green':
            fw_colour_tx = "box-green"
        elif info_data['firewall_tx'] == 'Grey':
            fw_colour_tx = "box-gray"
        elif info_data['firewall_tx'] == 'Orange':
            fw_colour_tx = "box-orange"
        else:
            fw_colour_tx = "box-red"

        if info_data['isp_tx'] == 'Green':
            isp_colour_tx = "box-green"
        elif info_data['isp_tx'] == 'Grey':
            isp_colour_tx = "box-gray"
        elif info_data['isp_tx'] == 'Orange':
            isp_colour_tx = "box-orange"
        else:
            isp_colour_tx = "box-red"

        if info_data['loadbalancer_tx'] == 'Green':
            lb_colour_tx = "box-green"
        elif info_data['loadbalancer_tx'] == 'Grey':
            lb_colour_tx = "box-gray"
        elif info_data['loadbalancer_tx'] == 'Orange':
            lb_colour_tx = "box-orange"
        else:
            lb_colour_tx = "box-red"

        if info_data['app_tx'] == 'Green':
            app_colour_tx = "box-green"
        elif info_data['app_tx'] == 'Red':
            app_colour_tx = "box-red"
        elif info_data['app_tx'] == 'Orange':
            app_colour_tx = "box-orange"
        else:
            app_colour_tx = "box-gray"

        if info_data['end_device_tx'] == 'Green':
            client_colour_tx = "box-green"
        elif info_data['end_device_tx'] == 'Grey':
            client_colour_tx = "box-gray"
        elif info_data['end_device_tx'] == 'Orange':
            client_colour_tx = "box-orange"
        else:
            client_colour_tx = "box-red"

        if info_data['transit_gw_tx'] == 'Green':
            transit_gw_colour_tx = "box-green"
        elif info_data['transit_gw_tx'] == 'Grey':
            transit_gw_colour_tx = "box-gray"
        elif info_data['transit_gw_tx'] == 'Orange':
            transit_gw_colour_tx = "box-orange"
        else:
            transit_gw_colour_tx = "box-red"

        if info_data['host_vpc_tx'] == 'Green':
            host_vpc_colour_tx = "box-green"
        elif info_data['host_vpc_tx'] == 'Grey':
            host_vpc_colour_tx = "box-gray"
        elif info_data['host_vpc_tx'] == 'Orange':
            host_vpc_colour_tx = "box-orange"
        else:
            host_vpc_colour_tx = "box-red"

        if info_data['vpn_gateway_tx'] == 'Green':
            vpn_gw_colour_tx = "box-green"
        elif info_data['vpn_gateway_tx'] == 'Grey':
            vpn_gw_colour_tx = "box-gray"
        elif info_data['vpn_gateway_tx'] == 'Orange':
            vpn_gw_colour_tx = "box-orange"
        else:
            vpn_gw_colour_tx = "box-red"

        if info_data['vpn_gateway1_tx'] == 'Green':
            vpn_gw1_colour_tx = "box-green"
        elif info_data['vpn_gateway1_tx'] == 'Grey':
            vpn_gw1_colour_tx = "box-gray"
        elif info_data['vpn_gateway1_tx'] == 'Orange':
            vpn_gw1_colour_tx = "box-orange"
        else:
            vpn_gw1_colour_tx = "box-red"

        # Colors for reverse transmission
        if info_data['switch_rx'] == 'Green':
            sw_colour_rx = "box-green"
        elif info_data['switch_rx'] == 'Grey':
            sw_colour_rx = "box-gray"
        elif info_data['switch_rx'] == 'Orange':
            sw_colour_rx = "box-orange"
        else:
            sw_colour_rx = "box-red"

        if info_data['firewall_rx'] == 'Green':
            fw_colour_rx = "box-green"
        elif info_data['firewall_rx'] == 'Grey':
            fw_colour_rx = "box-gray"
        elif info_data['firewall_rx'] == 'Orange':
            fw_colour_rx = "box-orange"
        else:
            fw_colour_rx = "box-red"

        if info_data['isp_rx'] == 'Green':
            isp_colour_rx = "box-green"
        elif info_data['isp_rx'] == 'Grey':
            isp_colour_rx = "box-gray"
        elif info_data['isp_rx'] == 'Orange':
            isp_colour_rx = "box-orange"
        else:
            isp_colour_rx = "box-red"

        if info_data['loadbalancer_rx'] == 'Green':
            lb_colour_rx = "box-green"
        elif info_data['loadbalancer_rx'] == 'Grey':
            lb_colour_rx = "box-gray"
        elif info_data['loadbalancer_rx'] == 'Orange':
            lb_colour_rx = "box-orange"
        else:
            lb_colour_rx = "box-red"

        if info_data['app_rx'] == 'Green':
            app_colour_rx = "box-green"
        elif info_data['app_rx'] == 'Red':
            app_colour_rx = "box-red"
        elif info_data['app_rx'] == 'Orange':
            app_colour_rx = "box-orange"
        else:
            app_colour_rx = "box-gray"

        if info_data['end_device_rx'] == 'Green':
            client_colour_rx = "box-green"
        elif info_data['end_device_rx'] == 'Grey':
            client_colour_rx = "box-gray"
        elif info_data['end_device_rx'] == 'Orange':
            client_colour_rx = "box-orange"
        else:
            client_colour_rx = "box-red"

        if info_data['transit_gw_rx'] == 'Green':
            transit_gw_colour_rx = "box-green"
        elif info_data['transit_gw_rx'] == 'Grey':
            transit_gw_colour_rx = "box-gray"
        elif info_data['transit_gw_rx'] == 'Orange':
            transit_gw_colour_rx = "box-orange"
        else:
            transit_gw_colour_rx = "box-red"

        if info_data['host_vpc_rx'] == 'Green':
            host_vpc_colour_rx = "box-green"
        elif info_data['host_vpc_rx'] == 'Grey':
            host_vpc_colour_rx = "box-gray"
        elif info_data['host_vpc_rx'] == 'Orange':
            host_vpc_colour_rx = "box-orange"
        else:
            host_vpc_colour_rx = "box-red"

        if info_data['vpn_gateway_rx'] == 'Green':
            vpn_gw_colour_rx = "box-green"
        elif info_data['vpn_gateway_rx'] == 'Grey':
            vpn_gw_colour_rx = "box-gray"
        elif info_data['vpn_gateway_rx'] == 'Orange':
            vpn_gw_colour_rx = "box-orange"
        else:
            vpn_gw_colour_rx = "box-red"

        if info_data['vpn_gateway1_rx'] == 'Green':
            vpn_gw1_colour_rx = "box-green"
        elif info_data['vpn_gateway1_rx'] == 'Grey':
            vpn_gw1_colour_rx = "box-gray"
        elif info_data['vpn_gateway1_rx'] == 'Orange':
            vpn_gw1_colour_rx = "box-orange"
        else:
            vpn_gw1_colour_rx = "box-red"

        # colour_dict = {"application": app_colour, "Server": lb_colour, "Firewalls": fw_colour, "ISP": isp_colour,
        #                "Access": sw_colour, "Device": client_colour}

        color_dict = {"application_tx": app_colour_tx,
                      "application_rx": app_colour_rx,
                      "firewall_rx": fw_colour_rx,
                      "firewall_tx": fw_colour_tx,
                      "lb_tx": lb_colour_tx,
                      "lb_rx": lb_colour_rx,
                      "host_tx": host_vpc_colour_tx,
                      "host_rx": host_vpc_colour_rx,
                      "isp_tx": isp_colour_tx,
                      "isp_rx": isp_colour_rx,
                      "gw_tx": transit_gw_colour_tx,
                      "gw_rx": transit_gw_colour_rx,
                      "gateway_tx": vpn_gw_colour_tx,
                      "gateway_rx": vpn_gw_colour_rx,
                      "gateway2_tx": vpn_gw1_colour_tx,
                      "gateway2_rx": vpn_gw1_colour_rx,
                      "access_tx": sw_colour_tx,
                      "access_rx": sw_colour_rx,
                      "client_tx": client_colour_tx,
                      "client_rx": client_colour_rx,
                      }

        result = ""
        for line in info_data['result']:
            result += "<li>{}</li>".format(line)

        main_dict = {
            'colordict': color_dict,
            'result': result
        }
        return JsonResponse(main_dict)
    elif type == '3':
        info_data = Application_connectivity_vpn1(src_ip, dest_ip, port, pc_name)
        print '>>>>>>>>', info_data
        if info_data['vpn_client_tx'] == 'Green':
            sw_colour_tx = "box-green"
        elif info_data['vpn_client_tx'] == 'Grey':
            sw_colour_tx = "box-gray"
        elif info_data['vpn_client_tx'] == 'Orange':
            sw_colour_tx = "box-orange"
        else:
            sw_colour_tx = "box-red"

        if info_data['firewall_tx'] == 'Green':
            fw_colour_tx = "box-green"
        elif info_data['firewall_tx'] == 'Grey':
            fw_colour_tx = "box-gray"
        elif info_data['firewall_tx'] == 'Orange':
            fw_colour_tx = "box-orange"
        else:
            fw_colour_tx = "box-red"

        if info_data['isp_tx'] == 'Green':
            isp_colour_tx = "box-green"
        elif info_data['isp_tx'] == 'Grey':
            isp_colour_tx = "box-gray"
        elif info_data['isp_tx'] == 'Orange':
            isp_colour_tx = "box-orange"
        else:
            isp_colour_tx = "box-red"

        if info_data['loadbalancer_tx'] == 'Green':
            lb_colour_tx = "box-green"
        elif info_data['loadbalancer_tx'] == 'Grey':
            lb_colour_tx = "box-gray"
        elif info_data['loadbalancer_tx'] == 'Orange':
            lb_colour_tx = "box-orange"
        else:
            lb_colour_tx = "box-red"

        if info_data['app_tx'] == 'Green':
            app_colour_tx = "box-green"
        elif info_data['app_tx'] == 'Red':
            app_colour_tx = "box-red"
        elif info_data['app_tx'] == 'Orange':
            app_colour_tx = "box-orange"
        else:
            app_colour_tx = "box-gray"

        if info_data['end_device_tx'] == 'Green':
            client_colour_tx = "box-green"
        elif info_data['end_device_tx'] == 'Grey':
            client_colour_tx = "box-gray"
        elif info_data['end_device_tx'] == 'Orange':
            client_colour_tx = "box-orange"
        else:
            client_colour_tx = "box-red"

        if info_data['dc_network_tx'] == 'Green':
            dc_colour_tx = "box-green"
        elif info_data['dc_network_tx'] == 'Grey':
            dc_colour_tx = "box-gray"
        elif info_data['dc_network_tx'] == 'Orange':
            dc_colour_tx = "box-orange"
        else:
            dc_colour_tx = "box-red"

        # Colors for reverse transmission
        if info_data['vpn_client_rx'] == 'Green':
            sw_colour_rx = "box-green"
        elif info_data['vpn_client_rx'] == 'Grey':
            sw_colour_rx = "box-gray"
        elif info_data['vpn_client_rx'] == 'Orange':
            sw_colour_rx = "box-orange"
        else:
            sw_colour_rx = "box-red"

        if info_data['firewall_rx'] == 'Green':
            fw_colour_rx = "box-green"
        elif info_data['firewall_rx'] == 'Grey':
            fw_colour_rx = "box-gray"
        elif info_data['firewall_rx'] == 'Orange':
            fw_colour_rx = "box-orange"
        else:
            fw_colour_rx = "box-red"

        if info_data['isp_rx'] == 'Green':
            isp_colour_rx = "box-green"
        elif info_data['isp_rx'] == 'Grey':
            isp_colour_rx = "box-gray"
        elif info_data['isp_rx'] == 'Orange':
            isp_colour_rx = "box-orange"
        else:
            isp_colour_rx = "box-red"

        if info_data['loadbalancer_rx'] == 'Green':
            lb_colour_rx = "box-green"
        elif info_data['loadbalancer_rx'] == 'Grey':
            lb_colour_rx = "box-gray"
        elif info_data['loadbalancer_rx'] == 'Orange':
            lb_colour_rx = "box-orange"
        else:
            lb_colour_rx = "box-red"

        if info_data['app_rx'] == 'Green':
            app_colour_rx = "box-green"
        elif info_data['app_rx'] == 'Red':
            app_colour_rx = "box-red"
        elif info_data['app_rx'] == 'Orange':
            app_colour_rx = "box-orange"
        else:
            app_colour_rx = "box-gray"

        if info_data['end_device_rx'] == 'Green':
            client_colour_rx = "box-green"
        elif info_data['end_device_rx'] == 'Grey':
            client_colour_rx = "box-gray"
        elif info_data['end_device_rx'] == 'Orange':
            client_colour_rx = "box-orange"
        else:
            client_colour_rx = "box-red"

        if info_data['dc_network_rx'] == 'Green':
            dc_colour_rx = "box-green"
        elif info_data['dc_network_rx'] == 'Grey':
            dc_colour_rx = "box-gray"
        elif info_data['dc_network_rx'] == 'Orange':
            dc_colour_rx = "box-orange"
        else:
            dc_colour_rx = "box-red"

        # colour_dict = {"application": app_colour, "Server": lb_colour, "Firewalls": fw_colour, "ISP": isp_colour,
        #                "Access": sw_colour, "Device": client_colour}

        result = ""
        for line in info_data['result']:
            result += "<li>{}</li>".format(line)
        color_dict = {"application_tx": app_colour_tx,
                      "application_rx": app_colour_rx,
                      "firewall_rx": fw_colour_rx,
                      "firewall_tx": fw_colour_tx,
                      "lb_tx": lb_colour_tx,
                      "lb_rx": lb_colour_rx,
                      "dc_tx": dc_colour_tx,
                      "dc_rx": dc_colour_rx,
                      "isp_tx": isp_colour_tx,
                      "isp_rx": isp_colour_rx,
                      "vpn_client_tx": sw_colour_tx,
                      "vpn_client_rx": sw_colour_rx,
                      "client_tx": client_colour_tx,
                      "client_rx": client_colour_rx,
                      "info_list": info_data['result']
                      }

        main_dict = {
            'colordict': color_dict,
            'result': result
        }
        return JsonResponse(main_dict)
    elif type == '2':
        info_data = Application_connectivity_Direct_connect(src_ip, dest_ip, port, pc_name)
        print '>>>>>>>>', info_data
        if info_data['switch_tx'] == 'Green':
            sw_colour_tx = "box-green"
        elif info_data['switch_tx'] == 'Grey':
            sw_colour_tx = "box-gray"
        elif info_data['switch_tx'] == 'Orange':
            sw_colour_tx = "box-orange"
        else:
            sw_colour_tx = "box-red"

        if info_data['firewall_tx'] == 'Green':
            fw_colour_tx = "box-green"
        elif info_data['firewall_tx'] == 'Grey':
            fw_colour_tx = "box-gray"
        elif info_data['firewall_tx'] == 'Orange':
            fw_colour_tx = "box-orange"
        else:
            fw_colour_tx = "box-red"

        if info_data['isp_tx'] == 'Green':
            isp_colour_tx = "box-green"
        elif info_data['isp_tx'] == 'Grey':
            isp_colour_tx = "box-gray"
        elif info_data['isp_tx'] == 'Orange':
            isp_colour_tx = "box-orange"
        else:
            isp_colour_tx = "box-red"

        if info_data['loadbalancer_tx'] == 'Green':
            lb_colour_tx = "box-green"
        elif info_data['loadbalancer_tx'] == 'Grey':
            lb_colour_tx = "box-gray"
        elif info_data['loadbalancer_tx'] == 'Orange':
            lb_colour_tx = "box-orange"
        else:
            lb_colour_tx = "box-red"

        if info_data['app_tx'] == 'Green':
            app_colour_tx = "box-green"
        elif info_data['app_tx'] == 'Red':
            app_colour_tx = "box-red"
        elif info_data['app_tx'] == 'Orange':
            app_colour_tx = "box-orange"
        else:
            app_colour_tx = "box-gray"

        if info_data['end_device_tx'] == 'Green':
            client_colour_tx = "box-green"
        elif info_data['end_device_tx'] == 'Grey':
            client_colour_tx = "box-gray"
        elif info_data['end_device_tx'] == 'Orange':
            client_colour_tx = "box-orange"
        else:
            client_colour_tx = "box-red"

        if info_data['transit_gw_tx'] == 'Green':
            transit_gw_colour_tx = "box-green"
        elif info_data['transit_gw_tx'] == 'Grey':
            transit_gw_colour_tx = "box-gray"
        elif info_data['transit_gw_tx'] == 'Orange':
            transit_gw_colour_tx = "box-orange"
        else:
            transit_gw_colour_tx = "box-red"

        if info_data['host_vpc_tx'] == 'Green':
            host_vpc_colour_tx = "box-green"
        elif info_data['host_vpc_tx'] == 'Grey':
            host_vpc_colour_tx = "box-gray"
        elif info_data['host_vpc_tx'] == 'Orange':
            host_vpc_colour_tx = "box-orange"
        else:
            host_vpc_colour_tx = "box-red"

        if info_data['network_tx'] == 'Green':
            network_colour_tx = "box-green"
        elif info_data['network_tx'] == 'Grey':
            network_colour_tx = "box-gray"
        elif info_data['network_tx'] == 'Orange':
            network_colour_tx = "box-orange"
        else:
            network_colour_tx = "box-red"

        # Colors for reverse transmission
        if info_data['switch_rx'] == 'Green':
            sw_colour_rx = "box-green"
        elif info_data['switch_rx'] == 'Grey':
            sw_colour_rx = "box-gray"
        elif info_data['switch_rx'] == 'Orange':
            sw_colour_rx = "box-orange"
        else:
            sw_colour_rx = "box-red"

        if info_data['firewall_rx'] == 'Green':
            fw_colour_rx = "box-green"
        elif info_data['firewall_rx'] == 'Grey':
            fw_colour_rx = "box-gray"
        elif info_data['firewall_rx'] == 'Orange':
            fw_colour_rx = "box-orange"
        else:
            fw_colour_rx = "box-red"

        if info_data['isp_rx'] == 'Green':
            isp_colour_rx = "box-green"
        elif info_data['isp_rx'] == 'Grey':
            isp_colour_rx = "box-gray"
        elif info_data['isp_rx'] == 'Orange':
            isp_colour_rx = "box-orange"
        else:
            isp_colour_rx = "box-red"

        if info_data['loadbalancer_rx'] == 'Green':
            lb_colour_rx = "box-green"
        elif info_data['loadbalancer_rx'] == 'Grey':
            lb_colour_rx = "box-gray"
        elif info_data['loadbalancer_rx'] == 'Orange':
            lb_colour_rx = "box-orange"
        else:
            lb_colour_rx = "box-red"

        if info_data['app_rx'] == 'Green':
            app_colour_rx = "box-green"
        elif info_data['app_rx'] == 'Red':
            app_colour_rx = "box-red"
        elif info_data['app_rx'] == 'Orange':
            app_colour_rx = "box-orange"
        else:
            app_colour_rx = "box-gray"

        if info_data['end_device_rx'] == 'Green':
            client_colour_rx = "box-green"
        elif info_data['end_device_rx'] == 'Grey':
            client_colour_rx = "box-gray"
        elif info_data['end_device_rx'] == 'Orange':
            client_colour_rx = "box-orange"
        else:
            client_colour_rx = "box-red"

        if info_data['transit_gw_rx'] == 'Green':
            transit_gw_colour_rx = "box-green"
        elif info_data['transit_gw_rx'] == 'Grey':
            transit_gw_colour_rx = "box-gray"
        elif info_data['transit_gw_rx'] == 'Orange':
            transit_gw_colour_rx = "box-orange"
        else:
            transit_gw_colour_rx = "box-red"

        if info_data['host_vpc_rx'] == 'Green':
            host_vpc_colour_rx = "box-green"
        elif info_data['host_vpc_rx'] == 'Grey':
            host_vpc_colour_rx = "box-gray"
        elif info_data['host_vpc_rx'] == 'Orange':
            host_vpc_colour_rx = "box-orange"
        else:
            host_vpc_colour_rx = "box-red"

        if info_data['network_rx'] == 'Green':
            network_colour_rx = "box-green"
        elif info_data['network_rx'] == 'Grey':
            network_colour_rx = "box-gray"
        elif info_data['network_rx'] == 'Orange':
            network_colour_rx = "box-orange"
        else:
            network_colour_rx = "box-red"

        # colour_dict = {"application": app_colour, "Server": lb_colour, "Firewalls": fw_colour, "ISP": isp_colour,
        #                "Access": sw_colour, "Device": client_colour}

        result = ""
        for line in info_data['result']:
            result += "<li>{}</li>".format(line)
        color_dict = {"application_tx": app_colour_tx,
                      "application_rx": app_colour_rx,
                      "firewall_rx": fw_colour_rx,
                      "firewall_tx": fw_colour_tx,
                      "lb_tx": lb_colour_tx,
                      "lb_rx": lb_colour_rx,
                      "host_tx": host_vpc_colour_tx,
                      "host_rx": host_vpc_colour_rx,
                      "isp_tx": isp_colour_tx,
                      "isp_rx": isp_colour_rx,
                      "gw_tx": transit_gw_colour_tx,
                      "gw_rx": transit_gw_colour_rx,
                      "network_tx": network_colour_tx,
                      "network_rx": network_colour_rx,
                      "access_tx": sw_colour_tx,
                      "access_rx": sw_colour_rx,
                      "client_tx": client_colour_tx,
                      "client_rx": client_colour_rx,
                      }

        main_dict = {
            'colordict': color_dict,
            'result': result
        }
        return JsonResponse(main_dict)
    else:
        info_data = Application_connectivity_Main(src_ip, dest_ip, port, pc_name)
        print '>>>>>>>>', info_data
        if info_data['switch_tx'] == 'Green':
            sw_colour_tx = "box-green"
        elif info_data['switch_tx'] == 'Grey':
            sw_colour_tx = "box-gray"
        elif info_data['switch_tx'] == 'Orange':
            sw_colour_tx = "box-orange"
        else:
            sw_colour_tx = "box-red"

        if info_data['firewall_tx'] == 'Green':
            fw_colour_tx = "box-green"
        elif info_data['firewall_tx'] == 'Grey':
            fw_colour_tx = "box-gray"
        elif info_data['firewall_tx'] == 'Orange':
            fw_colour_tx = "box-orange"
        else:
            fw_colour_tx = "box-red"

        if info_data['isp_tx'] == 'Green':
            isp_colour_tx = "box-green"
        elif info_data['isp_tx'] == 'Grey':
            isp_colour_tx = "box-gray"
        elif info_data['isp_tx'] == 'Orange':
            isp_colour_tx = "box-orange"
        else:
            isp_colour_tx = "box-red"

        if info_data['loadbalancer_tx'] == 'Green':
            lb_colour_tx = "box-green"
        elif info_data['loadbalancer_tx'] == 'Grey':
            lb_colour_tx = "box-gray"
        elif info_data['loadbalancer_tx'] == 'Orange':
            lb_colour_tx = "box-orange"
        else:
            lb_colour_tx = "box-red"

        if info_data['app_tx'] == 'Green':
            app_colour_tx = "box-green"
        elif info_data['app_tx'] == 'Red':
            app_colour_tx = "box-red"
        elif info_data['app_tx'] == 'Orange':
            app_colour_tx = "box-orange"
        else:
            app_colour_tx = "box-gray"

        if info_data['end_device_tx'] == 'Green':
            client_colour_tx = "box-green"
        elif info_data['end_device_tx'] == 'Grey':
            client_colour_tx = "box-gray"
        elif info_data['end_device_tx'] == 'Orange':
            client_colour_tx = "box-orange"
        else:
            client_colour_tx = "box-red"

        if info_data['dc_switch_tx'] == 'Green':
            dc_colour_tx = "box-green"
        elif info_data['dc_switch_tx'] == 'Grey':
            dc_colour_tx = "box-gray"
        elif info_data['dc_switch_tx'] == 'Orange':
            dc_colour_tx = "box-orange"
        else:
            dc_colour_tx = "box-red"

        # Colors for reverse transmission
        if info_data['switch_rx'] == 'Green':
            sw_colour_rx = "box-green"
        elif info_data['switch_rx'] == 'Grey':
            sw_colour_rx = "box-gray"
        elif info_data['switch_rx'] == 'Orange':
            sw_colour_rx = "box-orange"
        else:
            sw_colour_rx = "box-red"

        if info_data['firewall_rx'] == 'Green':
            fw_colour_rx = "box-green"
        elif info_data['firewall_rx'] == 'Grey':
            fw_colour_rx = "box-gray"
        elif info_data['firewall_rx'] == 'Orange':
            fw_colour_rx = "box-orange"
        else:
            fw_colour_rx = "box-red"

        if info_data['isp_rx'] == 'Green':
            isp_colour_rx = "box-green"
        elif info_data['isp_rx'] == 'Grey':
            isp_colour_rx = "box-gray"
        elif info_data['isp_rx'] == 'Orange':
            isp_colour_rx = "box-orange"
        else:
            isp_colour_rx = "box-red"

        if info_data['loadbalancer_rx'] == 'Green':
            lb_colour_rx = "box-green"
        elif info_data['loadbalancer_rx'] == 'Grey':
            lb_colour_rx = "box-gray"
        elif info_data['loadbalancer_rx'] == 'Orange':
            lb_colour_rx = "box-orange"
        else:
            lb_colour_rx = "box-red"

        if info_data['app_rx'] == 'Green':
            app_colour_rx = "box-green"
        elif info_data['app_rx'] == 'Red':
            app_colour_rx = "box-red"
        elif info_data['app_rx'] == 'Orange':
            app_colour_rx = "box-orange"
        else:
            app_colour_rx = "box-gray"

        if info_data['end_device_rx'] == 'Green':
            client_colour_rx = "box-green"
        elif info_data['end_device_rx'] == 'Grey':
            client_colour_rx = "box-gray"
        elif info_data['end_device_rx'] == 'Orange':
            client_colour_rx = "box-orange"
        else:
            client_colour_rx = "box-red"

        if info_data['dc_switch_rx'] == 'Green':
            dc_colour_rx = "box-green"
        elif info_data['dc_switch_rx'] == 'Grey':
            dc_colour_rx = "box-gray"
        elif info_data['dc_switch_rx'] == 'Orange':
            dc_colour_rx = "box-orange"
        else:
            dc_colour_rx = "box-red"

        # colour_dict = {"application": app_colour, "Server": lb_colour, "Firewalls": fw_colour, "ISP": isp_colour,
        #                "Access": sw_colour, "Device": client_colour}

        result = ""
        for line in info_data['result']:
            result += "<li>{}</li>".format(line)
        color_dict = {"application_tx": app_colour_tx,
                      "application_rx": app_colour_rx,
                      "firewall_rx": fw_colour_rx,
                      "firewall_tx": fw_colour_tx,
                      "lb_tx": lb_colour_tx,
                      "lb_rx": lb_colour_rx,
                      "dc_tx": dc_colour_tx,
                      "dc_rx": dc_colour_rx,
                      "isp_tx": isp_colour_tx,
                      "isp_rx": isp_colour_rx,
                      "network_tx": sw_colour_tx,
                      "network_rx": sw_colour_rx,
                      "end_tx": client_colour_tx,
                      "end_rx": client_colour_rx,
                      }
        main_dict = {
            'colordict': color_dict,
            'result': result
        }
        return JsonResponse(main_dict)
